
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08004f2c  08004f2c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f2c  08004f2c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08004f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200000fc  08005030  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005030  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e98  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002854  00000000  00000000  00030fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e38  00000000  00000000  000352e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134b5  00000000  00000000  0004e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4d3  00000000  00000000  000615d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecaa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  000ecafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df0 	.word	0x08004df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08004df0 	.word	0x08004df0

0800014c <isButtonPressed>:

int keyReg3[MAX_BUTTON] = {NORMAL_STATE};
int timerForKeyPress[MAX_BUTTON] = {200};
int button_flag[MAX_BUTTON] = {0};

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000118 	.word	0x20000118

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000118 	.word	0x20000118

080001a0 <getKeyInput>:


void getKeyInput(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	keyReg0[index] = keyReg1[index];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[index] = keyReg2[index];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	keyReg2[index] = HAL_GPIO_ReadPin(button_pin[index].GPIOtype, button_pin[index].buttonPin);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80001d0:	4930      	ldr	r1, [pc, #192]	; (8000294 <getKeyInput+0xf4>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	00db      	lsls	r3, r3, #3
 80001d6:	440b      	add	r3, r1
 80001d8:	889b      	ldrh	r3, [r3, #4]
 80001da:	4619      	mov	r1, r3
 80001dc:	4610      	mov	r0, r2
 80001de:	f001 ff67 	bl	80020b0 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4619      	mov	r1, r3
 80001e6:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//keyReg2[index] = HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
	if ((keyReg0[index] == keyReg1[index]) && (keyReg1[index] == keyReg2[index])) {
 80001ee:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d13e      	bne.n	8000280 <getKeyInput+0xe0>
 8000202:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d134      	bne.n	8000280 <getKeyInput+0xe0>
		if (keyReg3[index] != keyReg2[index]) {
 8000216:	4a20      	ldr	r2, [pc, #128]	; (8000298 <getKeyInput+0xf8>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d016      	beq.n	8000258 <getKeyInput+0xb8>
			keyReg3[index] = keyReg2[index];
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4919      	ldr	r1, [pc, #100]	; (8000298 <getKeyInput+0xf8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (keyReg2[index] == PRESSED_STATE) {
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d11c      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(index);
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f7ff ff9a 	bl	8000180 <subKeyProcess>
				timerForKeyPress[index] = 200;
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <getKeyInput+0xfc>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	21c8      	movs	r1, #200	; 0xc8
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (timerForKeyPress[index] == 0) {
				keyReg3[index] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			timerForKeyPress[index]--;
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490e      	ldr	r1, [pc, #56]	; (800029c <getKeyInput+0xfc>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timerForKeyPress[index] == 0) {
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <getKeyInput+0xfc>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d104      	bne.n	8000280 <getKeyInput+0xe0>
				keyReg3[index] = NORMAL_STATE;
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <getKeyInput+0xf8>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000030 	.word	0x20000030
 800028c:	20000020 	.word	0x20000020
 8000290:	20000040 	.word	0x20000040
 8000294:	20000000 	.word	0x20000000
 8000298:	20000050 	.word	0x20000050
 800029c:	20000060 	.word	0x20000060

080002a0 <redGreenLed>:
int	greenTime = 0;

int led13 = 0; //initial time for that state
int led24 = 0;

void redGreenLed() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	onRed1();
 80002a4:	f000 feaa 	bl	8000ffc <onRed1>
	onGreen2();
 80002a8:	f000 fef0 	bl	800108c <onGreen2>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <redAmberLed>:

void redAmberLed() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	onRed1();
 80002b4:	f000 fea2 	bl	8000ffc <onRed1>
	onAmber2();
 80002b8:	f000 fec8 	bl	800104c <onAmber2>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <greenRedLed>:

void greenRedLed() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	onGreen1();
 80002c4:	f000 feae 	bl	8001024 <onGreen1>
	onRed2();
 80002c8:	f000 fed0 	bl	800106c <onRed2>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <amberRedLed>:

void amberRedLed() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	onAmber1();
 80002d4:	f000 fe7e 	bl	8000fd4 <onAmber1>
	onRed2();
 80002d8:	f000 fec8 	bl	800106c <onRed2>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <countDown>:

void countDown() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (timerFlag[1] == 1) { //for 7 seg leds buffer
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <countDown+0x50>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d11f      	bne.n	800032c <countDown+0x4c>
		currentLed13--;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <countDown+0x54>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a10      	ldr	r2, [pc, #64]	; (8000334 <countDown+0x54>)
 80002f4:	6013      	str	r3, [r2, #0]
		currentLed24--;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <countDown+0x58>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <countDown+0x58>)
 80002fe:	6013      	str	r3, [r2, #0]
		if (currentLed13 <= 0)
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <countDown+0x54>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	dc03      	bgt.n	8000310 <countDown+0x30>
			currentLed13 = led13;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <countDown+0x5c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <countDown+0x54>)
 800030e:	6013      	str	r3, [r2, #0]
		if (currentLed24 <= 0)
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <countDown+0x58>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dc03      	bgt.n	8000320 <countDown+0x40>
			currentLed24 = led24;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <countDown+0x60>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <countDown+0x58>)
 800031e:	6013      	str	r3, [r2, #0]
		updateLedBuffer();
 8000320:	f000 fdfa 	bl	8000f18 <updateLedBuffer>
		setTimer(1, 100);
 8000324:	2164      	movs	r1, #100	; 0x64
 8000326:	2001      	movs	r0, #1
 8000328:	f000 ff82 	bl	8001230 <setTimer>
	}
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000174 	.word	0x20000174
 8000334:	20000154 	.word	0x20000154
 8000338:	20000158 	.word	0x20000158
 800033c:	20000130 	.word	0x20000130
 8000340:	20000134 	.word	0x20000134

08000344 <fsm_automatic_run>:
void fsm_automatic_run() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	amberTime = realAmberTime * 100;
 8000348:	4ba4      	ldr	r3, [pc, #656]	; (80005dc <fsm_automatic_run+0x298>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2264      	movs	r2, #100	; 0x64
 800034e:	fb02 f303 	mul.w	r3, r2, r3
 8000352:	4aa3      	ldr	r2, [pc, #652]	; (80005e0 <fsm_automatic_run+0x29c>)
 8000354:	6013      	str	r3, [r2, #0]
	greenTime = realGreenTime * 100;
 8000356:	4ba3      	ldr	r3, [pc, #652]	; (80005e4 <fsm_automatic_run+0x2a0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2264      	movs	r2, #100	; 0x64
 800035c:	fb02 f303 	mul.w	r3, r2, r3
 8000360:	4aa1      	ldr	r2, [pc, #644]	; (80005e8 <fsm_automatic_run+0x2a4>)
 8000362:	6013      	str	r3, [r2, #0]
	switch (status) {
 8000364:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <fsm_automatic_run+0x2a8>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	2b04      	cmp	r3, #4
 800036c:	f200 8130 	bhi.w	80005d0 <fsm_automatic_run+0x28c>
 8000370:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <fsm_automatic_run+0x34>)
 8000372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000376:	bf00      	nop
 8000378:	0800038d 	.word	0x0800038d
 800037c:	080003bd 	.word	0x080003bd
 8000380:	0800043f 	.word	0x0800043f
 8000384:	080004c5 	.word	0x080004c5
 8000388:	0800054b 	.word	0x0800054b
	case INIT:
		clearTrafficLight();
 800038c:	f000 fe04 	bl	8000f98 <clearTrafficLight>
		status = AUTO_RED_GREEN;
 8000390:	4b96      	ldr	r3, [pc, #600]	; (80005ec <fsm_automatic_run+0x2a8>)
 8000392:	2202      	movs	r2, #2
 8000394:	601a      	str	r2, [r3, #0]
		setTimer(0, greenTime);
 8000396:	4b94      	ldr	r3, [pc, #592]	; (80005e8 <fsm_automatic_run+0x2a4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	b29b      	uxth	r3, r3
 800039c:	4619      	mov	r1, r3
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 ff46 	bl	8001230 <setTimer>

		led13 = realAmberTime + realGreenTime;
 80003a4:	4b8d      	ldr	r3, [pc, #564]	; (80005dc <fsm_automatic_run+0x298>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b8e      	ldr	r3, [pc, #568]	; (80005e4 <fsm_automatic_run+0x2a0>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4413      	add	r3, r2
 80003ae:	4a90      	ldr	r2, [pc, #576]	; (80005f0 <fsm_automatic_run+0x2ac>)
 80003b0:	6013      	str	r3, [r2, #0]
		led24 = realGreenTime;
 80003b2:	4b8c      	ldr	r3, [pc, #560]	; (80005e4 <fsm_automatic_run+0x2a0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a8f      	ldr	r2, [pc, #572]	; (80005f4 <fsm_automatic_run+0x2b0>)
 80003b8:	6013      	str	r3, [r2, #0]
		break;
 80003ba:	e10c      	b.n	80005d6 <fsm_automatic_run+0x292>
	case AUTO_RED_GREEN:
		redGreenLed();
 80003bc:	f7ff ff70 	bl	80002a0 <redGreenLed>
		if (isButtonPressed(0) == 1) {
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff fec3 	bl	800014c <isButtonPressed>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d10f      	bne.n	80003ec <fsm_automatic_run+0xa8>
			status = MANUAL_RED_GREEN;
 80003cc:	4b87      	ldr	r3, [pc, #540]	; (80005ec <fsm_automatic_run+0x2a8>)
 80003ce:	221a      	movs	r2, #26
 80003d0:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 80003d2:	f000 fde1 	bl	8000f98 <clearTrafficLight>
			currentLed24 = 2; //mode
 80003d6:	4b88      	ldr	r3, [pc, #544]	; (80005f8 <fsm_automatic_run+0x2b4>)
 80003d8:	2202      	movs	r2, #2
 80003da:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 80003dc:	f000 fd9c 	bl	8000f18 <updateLedBuffer>
			setTimer(2, 10); //update leds
 80003e0:	210a      	movs	r1, #10
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 ff24 	bl	8001230 <setTimer>
			uart_communication_fsm();
 80003e8:	f001 fa5e 	bl	80018a8 <uart_communication_fsm>
		}
		if (timerFlag[0] == 1){
 80003ec:	4b83      	ldr	r3, [pc, #524]	; (80005fc <fsm_automatic_run+0x2b8>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d114      	bne.n	800041e <fsm_automatic_run+0xda>
			status = AUTO_RED_AMBER;
 80003f4:	4b7d      	ldr	r3, [pc, #500]	; (80005ec <fsm_automatic_run+0x2a8>)
 80003f6:	2203      	movs	r2, #3
 80003f8:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime + realGreenTime;
 80003fa:	4b78      	ldr	r3, [pc, #480]	; (80005dc <fsm_automatic_run+0x298>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b79      	ldr	r3, [pc, #484]	; (80005e4 <fsm_automatic_run+0x2a0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a7a      	ldr	r2, [pc, #488]	; (80005f0 <fsm_automatic_run+0x2ac>)
 8000406:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime;
 8000408:	4b74      	ldr	r3, [pc, #464]	; (80005dc <fsm_automatic_run+0x298>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a79      	ldr	r2, [pc, #484]	; (80005f4 <fsm_automatic_run+0x2b0>)
 800040e:	6013      	str	r3, [r2, #0]

			setTimer(0, amberTime);
 8000410:	4b73      	ldr	r3, [pc, #460]	; (80005e0 <fsm_automatic_run+0x29c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	b29b      	uxth	r3, r3
 8000416:	4619      	mov	r1, r3
 8000418:	2000      	movs	r0, #0
 800041a:	f000 ff09 	bl	8001230 <setTimer>
		}
		countDown();
 800041e:	f7ff ff5f 	bl	80002e0 <countDown>
		if (isButtonPressed(3)) { // pedestrian nho' check cac state khac khi bam nut
 8000422:	2003      	movs	r0, #3
 8000424:	f7ff fe92 	bl	800014c <isButtonPressed>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	f000 80d2 	beq.w	80005d4 <fsm_automatic_run+0x290>
			buzzer_flag=1;
 8000430:	4b73      	ldr	r3, [pc, #460]	; (8000600 <fsm_automatic_run+0x2bc>)
 8000432:	2201      	movs	r2, #1
 8000434:	601a      	str	r2, [r3, #0]
			status_pedestrian=PEDESTRIAN;
 8000436:	4b73      	ldr	r3, [pc, #460]	; (8000604 <fsm_automatic_run+0x2c0>)
 8000438:	220a      	movs	r2, #10
 800043a:	601a      	str	r2, [r3, #0]
		}
		break;
 800043c:	e0ca      	b.n	80005d4 <fsm_automatic_run+0x290>
	case AUTO_RED_AMBER:
		redAmberLed();
 800043e:	f7ff ff37 	bl	80002b0 <redAmberLed>

		if (isButtonPressed(0) == 1) {
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff fe82 	bl	800014c <isButtonPressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	d10f      	bne.n	800046e <fsm_automatic_run+0x12a>
			status = MANUAL_RED_AMBER;
 800044e:	4b67      	ldr	r3, [pc, #412]	; (80005ec <fsm_automatic_run+0x2a8>)
 8000450:	221b      	movs	r2, #27
 8000452:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 8000454:	f000 fda0 	bl	8000f98 <clearTrafficLight>
			currentLed24 = 2; //mode
 8000458:	4b67      	ldr	r3, [pc, #412]	; (80005f8 <fsm_automatic_run+0x2b4>)
 800045a:	2202      	movs	r2, #2
 800045c:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 800045e:	f000 fd5b 	bl	8000f18 <updateLedBuffer>
			setTimer(2, 10); //update leds
 8000462:	210a      	movs	r1, #10
 8000464:	2002      	movs	r0, #2
 8000466:	f000 fee3 	bl	8001230 <setTimer>
			uart_communication_fsm();
 800046a:	f001 fa1d 	bl	80018a8 <uart_communication_fsm>
		}

		if (timerFlag[0] == 1) {
 800046e:	4b63      	ldr	r3, [pc, #396]	; (80005fc <fsm_automatic_run+0x2b8>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d114      	bne.n	80004a0 <fsm_automatic_run+0x15c>
			status = AUTO_GREEN_RED;
 8000476:	4b5d      	ldr	r3, [pc, #372]	; (80005ec <fsm_automatic_run+0x2a8>)
 8000478:	2204      	movs	r2, #4
 800047a:	601a      	str	r2, [r3, #0]

			led13 = realGreenTime;
 800047c:	4b59      	ldr	r3, [pc, #356]	; (80005e4 <fsm_automatic_run+0x2a0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a5b      	ldr	r2, [pc, #364]	; (80005f0 <fsm_automatic_run+0x2ac>)
 8000482:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime + realGreenTime;
 8000484:	4b55      	ldr	r3, [pc, #340]	; (80005dc <fsm_automatic_run+0x298>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b56      	ldr	r3, [pc, #344]	; (80005e4 <fsm_automatic_run+0x2a0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4413      	add	r3, r2
 800048e:	4a59      	ldr	r2, [pc, #356]	; (80005f4 <fsm_automatic_run+0x2b0>)
 8000490:	6013      	str	r3, [r2, #0]

			setTimer(0, greenTime);
 8000492:	4b55      	ldr	r3, [pc, #340]	; (80005e8 <fsm_automatic_run+0x2a4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2000      	movs	r0, #0
 800049c:	f000 fec8 	bl	8001230 <setTimer>
		}
		countDown();
 80004a0:	f7ff ff1e 	bl	80002e0 <countDown>
		if (isButtonPressed(3)) { // pedestrian nho' check cac state khac khi bam nut
 80004a4:	2003      	movs	r0, #3
 80004a6:	f7ff fe51 	bl	800014c <isButtonPressed>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d005      	beq.n	80004bc <fsm_automatic_run+0x178>
			buzzer_flag=1;
 80004b0:	4b53      	ldr	r3, [pc, #332]	; (8000600 <fsm_automatic_run+0x2bc>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
			status_pedestrian=PEDESTRIAN;
 80004b6:	4b53      	ldr	r3, [pc, #332]	; (8000604 <fsm_automatic_run+0x2c0>)
 80004b8:	220a      	movs	r2, #10
 80004ba:	601a      	str	r2, [r3, #0]
		}
		isButtonPressed(0);
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff fe45 	bl	800014c <isButtonPressed>
		break;
 80004c2:	e088      	b.n	80005d6 <fsm_automatic_run+0x292>
	case AUTO_GREEN_RED:
		greenRedLed();
 80004c4:	f7ff fefc 	bl	80002c0 <greenRedLed>

		if (isButtonPressed(0) == 1) {
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff fe3f 	bl	800014c <isButtonPressed>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10f      	bne.n	80004f4 <fsm_automatic_run+0x1b0>
			status = MANUAL_GREEN_RED;
 80004d4:	4b45      	ldr	r3, [pc, #276]	; (80005ec <fsm_automatic_run+0x2a8>)
 80004d6:	221c      	movs	r2, #28
 80004d8:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 80004da:	f000 fd5d 	bl	8000f98 <clearTrafficLight>
			currentLed24 = 2; //mode
 80004de:	4b46      	ldr	r3, [pc, #280]	; (80005f8 <fsm_automatic_run+0x2b4>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 80004e4:	f000 fd18 	bl	8000f18 <updateLedBuffer>
			setTimer(2, 10); //update leds
 80004e8:	210a      	movs	r1, #10
 80004ea:	2002      	movs	r0, #2
 80004ec:	f000 fea0 	bl	8001230 <setTimer>
			uart_communication_fsm();
 80004f0:	f001 f9da 	bl	80018a8 <uart_communication_fsm>
		}

		if (timerFlag[0] == 1) {
 80004f4:	4b41      	ldr	r3, [pc, #260]	; (80005fc <fsm_automatic_run+0x2b8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d114      	bne.n	8000526 <fsm_automatic_run+0x1e2>
			status = AUTO_AMBER_RED;
 80004fc:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <fsm_automatic_run+0x2a8>)
 80004fe:	2205      	movs	r2, #5
 8000500:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime;
 8000502:	4b36      	ldr	r3, [pc, #216]	; (80005dc <fsm_automatic_run+0x298>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a3a      	ldr	r2, [pc, #232]	; (80005f0 <fsm_automatic_run+0x2ac>)
 8000508:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime + realGreenTime;
 800050a:	4b34      	ldr	r3, [pc, #208]	; (80005dc <fsm_automatic_run+0x298>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <fsm_automatic_run+0x2a0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <fsm_automatic_run+0x2b0>)
 8000516:	6013      	str	r3, [r2, #0]

			setTimer(0, amberTime);
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <fsm_automatic_run+0x29c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fe85 	bl	8001230 <setTimer>
		}
		countDown();
 8000526:	f7ff fedb 	bl	80002e0 <countDown>
		if (isButtonPressed(3)) { // pedestrian nho' check cac state khac khi bam nut
 800052a:	2003      	movs	r0, #3
 800052c:	f7ff fe0e 	bl	800014c <isButtonPressed>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d005      	beq.n	8000542 <fsm_automatic_run+0x1fe>
			buzzer_flag=1;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <fsm_automatic_run+0x2bc>)
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
			status_pedestrian=PEDESTRIAN;
 800053c:	4b31      	ldr	r3, [pc, #196]	; (8000604 <fsm_automatic_run+0x2c0>)
 800053e:	220a      	movs	r2, #10
 8000540:	601a      	str	r2, [r3, #0]
		}
		isButtonPressed(0);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff fe02 	bl	800014c <isButtonPressed>
		break;
 8000548:	e045      	b.n	80005d6 <fsm_automatic_run+0x292>
	case AUTO_AMBER_RED:
		amberRedLed();
 800054a:	f7ff fec1 	bl	80002d0 <amberRedLed>

		if (isButtonPressed(0) == 1) {
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fdfc 	bl	800014c <isButtonPressed>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10f      	bne.n	800057a <fsm_automatic_run+0x236>
			status = MANUAL_AMBER_RED;
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <fsm_automatic_run+0x2a8>)
 800055c:	221d      	movs	r2, #29
 800055e:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 8000560:	f000 fd1a 	bl	8000f98 <clearTrafficLight>
			currentLed24 = 2; //mode
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <fsm_automatic_run+0x2b4>)
 8000566:	2202      	movs	r2, #2
 8000568:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 800056a:	f000 fcd5 	bl	8000f18 <updateLedBuffer>
			setTimer(2, 10); //update leds
 800056e:	210a      	movs	r1, #10
 8000570:	2002      	movs	r0, #2
 8000572:	f000 fe5d 	bl	8001230 <setTimer>
			uart_communication_fsm();
 8000576:	f001 f997 	bl	80018a8 <uart_communication_fsm>
		}

		if (timerFlag[0] == 1) {
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <fsm_automatic_run+0x2b8>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d114      	bne.n	80005ac <fsm_automatic_run+0x268>
			status = AUTO_RED_GREEN;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <fsm_automatic_run+0x2a8>)
 8000584:	2202      	movs	r2, #2
 8000586:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime + realGreenTime;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <fsm_automatic_run+0x298>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <fsm_automatic_run+0x2a0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4413      	add	r3, r2
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <fsm_automatic_run+0x2ac>)
 8000594:	6013      	str	r3, [r2, #0]
			led24 = realGreenTime;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <fsm_automatic_run+0x2a0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <fsm_automatic_run+0x2b0>)
 800059c:	6013      	str	r3, [r2, #0]

			setTimer(0, greenTime);
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <fsm_automatic_run+0x2a4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fe42 	bl	8001230 <setTimer>
		}
		countDown();
 80005ac:	f7ff fe98 	bl	80002e0 <countDown>
		if (isButtonPressed(3)) { // pedestrian nho' check cac state khac khi bam nut
 80005b0:	2003      	movs	r0, #3
 80005b2:	f7ff fdcb 	bl	800014c <isButtonPressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <fsm_automatic_run+0x284>
			buzzer_flag=1;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <fsm_automatic_run+0x2bc>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
			status_pedestrian=PEDESTRIAN;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <fsm_automatic_run+0x2c0>)
 80005c4:	220a      	movs	r2, #10
 80005c6:	601a      	str	r2, [r3, #0]
		}
		isButtonPressed(0);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff fdbf 	bl	800014c <isButtonPressed>
		break;
 80005ce:	e002      	b.n	80005d6 <fsm_automatic_run+0x292>
	default:
		break;
 80005d0:	bf00      	nop
 80005d2:	e000      	b.n	80005d6 <fsm_automatic_run+0x292>
		break;
 80005d4:	bf00      	nop
	}
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000078 	.word	0x20000078
 80005e0:	20000128 	.word	0x20000128
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	2000012c 	.word	0x2000012c
 80005ec:	20000070 	.word	0x20000070
 80005f0:	20000130 	.word	0x20000130
 80005f4:	20000134 	.word	0x20000134
 80005f8:	20000158 	.word	0x20000158
 80005fc:	20000174 	.word	0x20000174
 8000600:	2000013c 	.word	0x2000013c
 8000604:	20000074 	.word	0x20000074

08000608 <manual_fsm_run>:
 *      Author: PC
 */

#include "fsm_manual.h"

void manual_fsm_run(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	switch(status){
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <manual_fsm_run+0x158>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b1a      	subs	r3, #26
 8000612:	2b03      	cmp	r3, #3
 8000614:	f200 8098 	bhi.w	8000748 <manual_fsm_run+0x140>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <manual_fsm_run+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	080006bd 	.word	0x080006bd
 8000624:	08000703 	.word	0x08000703
 8000628:	08000631 	.word	0x08000631
 800062c:	08000677 	.word	0x08000677
	case MANUAL_GREEN_RED:
		onGreen1();
 8000630:	f000 fcf8 	bl	8001024 <onGreen1>
		onRed2();
 8000634:	f000 fd1a 	bl	800106c <onRed2>
		if(isButtonPressed(0)){
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff fd87 	bl	800014c <isButtonPressed>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00a      	beq.n	800065a <manual_fsm_run+0x52>
			status = TUNING_RED;
 8000644:	4b46      	ldr	r3, [pc, #280]	; (8000760 <manual_fsm_run+0x158>)
 8000646:	2215      	movs	r2, #21
 8000648:	601a      	str	r2, [r3, #0]
			clearled();
 800064a:	f000 fd6b 	bl	8001124 <clearled>
			setTimer(3, 50);
 800064e:	2132      	movs	r1, #50	; 0x32
 8000650:	2003      	movs	r0, #3
 8000652:	f000 fded 	bl	8001230 <setTimer>
			uart_communication_fsm();
 8000656:	f001 f927 	bl	80018a8 <uart_communication_fsm>
		}
		if(isButtonPressed(1)){
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff fd76 	bl	800014c <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d072      	beq.n	800074c <manual_fsm_run+0x144>
			status = MANUAL_AMBER_RED;
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <manual_fsm_run+0x158>)
 8000668:	221d      	movs	r2, #29
 800066a:	601a      	str	r2, [r3, #0]
			clearled();
 800066c:	f000 fd5a 	bl	8001124 <clearled>
			uart_communication_fsm();
 8000670:	f001 f91a 	bl	80018a8 <uart_communication_fsm>
		}

		break;
 8000674:	e06a      	b.n	800074c <manual_fsm_run+0x144>
	case MANUAL_AMBER_RED:
		onAmber1();
 8000676:	f000 fcad 	bl	8000fd4 <onAmber1>
		onRed2();
 800067a:	f000 fcf7 	bl	800106c <onRed2>
		if(isButtonPressed(0)){
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fd64 	bl	800014c <isButtonPressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00a      	beq.n	80006a0 <manual_fsm_run+0x98>
			status = TUNING_RED;
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <manual_fsm_run+0x158>)
 800068c:	2215      	movs	r2, #21
 800068e:	601a      	str	r2, [r3, #0]
			clearled();
 8000690:	f000 fd48 	bl	8001124 <clearled>
			setTimer(3, 50);
 8000694:	2132      	movs	r1, #50	; 0x32
 8000696:	2003      	movs	r0, #3
 8000698:	f000 fdca 	bl	8001230 <setTimer>
			uart_communication_fsm();
 800069c:	f001 f904 	bl	80018a8 <uart_communication_fsm>
		}
		if(isButtonPressed(1)){
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff fd53 	bl	800014c <isButtonPressed>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d051      	beq.n	8000750 <manual_fsm_run+0x148>
			status = MANUAL_RED_GREEN;
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <manual_fsm_run+0x158>)
 80006ae:	221a      	movs	r2, #26
 80006b0:	601a      	str	r2, [r3, #0]
			clearled();
 80006b2:	f000 fd37 	bl	8001124 <clearled>
			uart_communication_fsm();
 80006b6:	f001 f8f7 	bl	80018a8 <uart_communication_fsm>
		}
		break;
 80006ba:	e049      	b.n	8000750 <manual_fsm_run+0x148>
	case MANUAL_RED_GREEN:
		onRed1();
 80006bc:	f000 fc9e 	bl	8000ffc <onRed1>
		onGreen2();
 80006c0:	f000 fce4 	bl	800108c <onGreen2>
		if(isButtonPressed(0)){
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fd41 	bl	800014c <isButtonPressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <manual_fsm_run+0xde>
			status = TUNING_RED;
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <manual_fsm_run+0x158>)
 80006d2:	2215      	movs	r2, #21
 80006d4:	601a      	str	r2, [r3, #0]
			clearled();
 80006d6:	f000 fd25 	bl	8001124 <clearled>
			setTimer(3, 50);
 80006da:	2132      	movs	r1, #50	; 0x32
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 fda7 	bl	8001230 <setTimer>
			uart_communication_fsm();
 80006e2:	f001 f8e1 	bl	80018a8 <uart_communication_fsm>
		}
		if(isButtonPressed(1)){
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fd30 	bl	800014c <isButtonPressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d030      	beq.n	8000754 <manual_fsm_run+0x14c>
			status = MANUAL_RED_AMBER;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <manual_fsm_run+0x158>)
 80006f4:	221b      	movs	r2, #27
 80006f6:	601a      	str	r2, [r3, #0]
			clearled();
 80006f8:	f000 fd14 	bl	8001124 <clearled>
			uart_communication_fsm();
 80006fc:	f001 f8d4 	bl	80018a8 <uart_communication_fsm>
		}
		break;
 8000700:	e028      	b.n	8000754 <manual_fsm_run+0x14c>
	case MANUAL_RED_AMBER:
		onRed1();
 8000702:	f000 fc7b 	bl	8000ffc <onRed1>
		onAmber2();
 8000706:	f000 fca1 	bl	800104c <onAmber2>
		if(isButtonPressed(0)){
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fd1e 	bl	800014c <isButtonPressed>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00a      	beq.n	800072c <manual_fsm_run+0x124>
			status = TUNING_RED;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <manual_fsm_run+0x158>)
 8000718:	2215      	movs	r2, #21
 800071a:	601a      	str	r2, [r3, #0]
			clearled();
 800071c:	f000 fd02 	bl	8001124 <clearled>
			setTimer(3, 50);
 8000720:	2132      	movs	r1, #50	; 0x32
 8000722:	2003      	movs	r0, #3
 8000724:	f000 fd84 	bl	8001230 <setTimer>
			uart_communication_fsm();
 8000728:	f001 f8be 	bl	80018a8 <uart_communication_fsm>
		}
		if(isButtonPressed(1)){
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fd0d 	bl	800014c <isButtonPressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00f      	beq.n	8000758 <manual_fsm_run+0x150>
			status = MANUAL_GREEN_RED;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <manual_fsm_run+0x158>)
 800073a:	221c      	movs	r2, #28
 800073c:	601a      	str	r2, [r3, #0]
			clearled();
 800073e:	f000 fcf1 	bl	8001124 <clearled>
			uart_communication_fsm();
 8000742:	f001 f8b1 	bl	80018a8 <uart_communication_fsm>
		}
		break;
 8000746:	e007      	b.n	8000758 <manual_fsm_run+0x150>
	default:
		break;
 8000748:	bf00      	nop
 800074a:	e006      	b.n	800075a <manual_fsm_run+0x152>
		break;
 800074c:	bf00      	nop
 800074e:	e004      	b.n	800075a <manual_fsm_run+0x152>
		break;
 8000750:	bf00      	nop
 8000752:	e002      	b.n	800075a <manual_fsm_run+0x152>
		break;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <manual_fsm_run+0x152>
		break;
 8000758:	bf00      	nop
	}
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000070 	.word	0x20000070

08000764 <fsm_pedestrian>:
 *      Author: Vostro
 */

#include "global.h"
#include "software_timer.h"
void fsm_pedestrian() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
//		///////////////////////
//
//		setTimer(5, realGreenTime*100);
//		timerFlag[3]=0;
//	}
	switch(status_pedestrian) {
 8000768:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <fsm_pedestrian+0xc0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000770:	d043      	beq.n	80007fa <fsm_pedestrian+0x96>
 8000772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000776:	dc4a      	bgt.n	800080e <fsm_pedestrian+0xaa>
 8000778:	2b0d      	cmp	r3, #13
 800077a:	d01e      	beq.n	80007ba <fsm_pedestrian+0x56>
 800077c:	2b0d      	cmp	r3, #13
 800077e:	dc46      	bgt.n	800080e <fsm_pedestrian+0xaa>
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d002      	beq.n	800078a <fsm_pedestrian+0x26>
 8000784:	2b0b      	cmp	r3, #11
 8000786:	d02b      	beq.n	80007e0 <fsm_pedestrian+0x7c>
 8000788:	e041      	b.n	800080e <fsm_pedestrian+0xaa>
	case PEDESTRIAN:
//		buzzer_on();
		if (status==AUTO_RED_GREEN || status==AUTO_RED_AMBER || status==AUTO_AMBER_RED) {
 800078a:	4b27      	ldr	r3, [pc, #156]	; (8000828 <fsm_pedestrian+0xc4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d007      	beq.n	80007a2 <fsm_pedestrian+0x3e>
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <fsm_pedestrian+0xc4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b03      	cmp	r3, #3
 8000798:	d003      	beq.n	80007a2 <fsm_pedestrian+0x3e>
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <fsm_pedestrian+0xc4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d103      	bne.n	80007aa <fsm_pedestrian+0x46>
			status_pedestrian=PEDESTRIAN_RED;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <fsm_pedestrian+0xc0>)
 80007a4:	220b      	movs	r2, #11
 80007a6:	601a      	str	r2, [r3, #0]
		} else if (status==AUTO_GREEN_RED) {
			status_pedestrian=PEDESTRIAN_GREEN;
		}
		break;
 80007a8:	e034      	b.n	8000814 <fsm_pedestrian+0xb0>
		} else if (status==AUTO_GREEN_RED) {
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <fsm_pedestrian+0xc4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d130      	bne.n	8000814 <fsm_pedestrian+0xb0>
			status_pedestrian=PEDESTRIAN_GREEN;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <fsm_pedestrian+0xc0>)
 80007b4:	220d      	movs	r2, #13
 80007b6:	601a      	str	r2, [r3, #0]
		break;
 80007b8:	e02c      	b.n	8000814 <fsm_pedestrian+0xb0>
	case PEDESTRIAN_GREEN:
		onGreenPedes();
 80007ba:	f000 fc77 	bl	80010ac <onGreenPedes>
		buzzer_on();
 80007be:	f000 fccf 	bl	8001160 <buzzer_on>
		if (status==AUTO_AMBER_RED) {
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <fsm_pedestrian+0xc4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b05      	cmp	r3, #5
 80007c8:	d126      	bne.n	8000818 <fsm_pedestrian+0xb4>
			status_pedestrian=1000;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <fsm_pedestrian+0xc0>)
 80007cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d0:	601a      	str	r2, [r3, #0]
			buzzer_off();
 80007d2:	f000 fd21 	bl	8001218 <buzzer_off>
			setTimer(5, 100);
 80007d6:	2164      	movs	r1, #100	; 0x64
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 fd29 	bl	8001230 <setTimer>
		}
//		if (timerFlag[5]==1) {
//			status_pedestrian=PEDESTRIAN_AMBER;
//			setTimer(5, realAmberTime*100);
//		}
		break;
 80007de:	e01b      	b.n	8000818 <fsm_pedestrian+0xb4>
	case PEDESTRIAN_RED:
		onRedPedes();
 80007e0:	f000 fc78 	bl	80010d4 <onRedPedes>
		if (status==AUTO_GREEN_RED) {
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <fsm_pedestrian+0xc4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d117      	bne.n	800081c <fsm_pedestrian+0xb8>
			status_pedestrian=PEDESTRIAN_GREEN;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <fsm_pedestrian+0xc0>)
 80007ee:	220d      	movs	r2, #13
 80007f0:	601a      	str	r2, [r3, #0]
			b=1;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <fsm_pedestrian+0xc8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
		}
		break;
 80007f8:	e010      	b.n	800081c <fsm_pedestrian+0xb8>
	case 1000:
		onRedPedes();
 80007fa:	f000 fc6b 	bl	80010d4 <onRedPedes>
		if (timerFlag[5]) {
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <fsm_pedestrian+0xcc>)
 8000800:	795b      	ldrb	r3, [r3, #5]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <fsm_pedestrian+0xaa>
			status_pedestrian=2000;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <fsm_pedestrian+0xc0>)
 8000808:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800080c:	601a      	str	r2, [r3, #0]
		}
	default:
		clearPedesLed();
 800080e:	f000 fc75 	bl	80010fc <clearPedesLed>
		break;
 8000812:	e004      	b.n	800081e <fsm_pedestrian+0xba>
		break;
 8000814:	bf00      	nop
 8000816:	e002      	b.n	800081e <fsm_pedestrian+0xba>
		break;
 8000818:	bf00      	nop
 800081a:	e000      	b.n	800081e <fsm_pedestrian+0xba>
		break;
 800081c:	bf00      	nop
	}
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000074 	.word	0x20000074
 8000828:	20000070 	.word	0x20000070
 800082c:	20000140 	.word	0x20000140
 8000830:	20000174 	.word	0x20000174

08000834 <fsm_tuning_run>:
 */
#include "fsm_tuning.h"

int amber_on = 0;

void fsm_tuning_run() {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	switch (status) {
 8000838:	4b9a      	ldr	r3, [pc, #616]	; (8000aa4 <fsm_tuning_run+0x270>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b17      	cmp	r3, #23
 800083e:	f000 80cf 	beq.w	80009e0 <fsm_tuning_run+0x1ac>
 8000842:	2b17      	cmp	r3, #23
 8000844:	f300 8125 	bgt.w	8000a92 <fsm_tuning_run+0x25e>
 8000848:	2b15      	cmp	r3, #21
 800084a:	d002      	beq.n	8000852 <fsm_tuning_run+0x1e>
 800084c:	2b16      	cmp	r3, #22
 800084e:	d04c      	beq.n	80008ea <fsm_tuning_run+0xb6>
				realGreenTime = currentLed13;
				currentLed13 = 0;
			}
			break;
		default:
			break;
 8000850:	e11f      	b.n	8000a92 <fsm_tuning_run+0x25e>
			if (timerFlag[3] == 1) {
 8000852:	4b95      	ldr	r3, [pc, #596]	; (8000aa8 <fsm_tuning_run+0x274>)
 8000854:	78db      	ldrb	r3, [r3, #3]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d10c      	bne.n	8000874 <fsm_tuning_run+0x40>
				setTimer(3, 50); //blinky 2 Hz
 800085a:	2132      	movs	r1, #50	; 0x32
 800085c:	2003      	movs	r0, #3
 800085e:	f000 fce7 	bl	8001230 <setTimer>
				HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin); //toggle red 1
 8000862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000866:	4891      	ldr	r0, [pc, #580]	; (8000aac <fsm_tuning_run+0x278>)
 8000868:	f001 fc51 	bl	800210e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin); //toggle red 2
 800086c:	2120      	movs	r1, #32
 800086e:	4890      	ldr	r0, [pc, #576]	; (8000ab0 <fsm_tuning_run+0x27c>)
 8000870:	f001 fc4d 	bl	800210e <HAL_GPIO_TogglePin>
			if (isButtonPressed(1) == 1) {
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fc69 	bl	800014c <isButtonPressed>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10f      	bne.n	80008a0 <fsm_tuning_run+0x6c>
				currentLed13++;
 8000880:	4b8c      	ldr	r3, [pc, #560]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a8b      	ldr	r2, [pc, #556]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000888:	6013      	str	r3, [r2, #0]
				if (currentLed13 > 99)
 800088a:	4b8a      	ldr	r3, [pc, #552]	; (8000ab4 <fsm_tuning_run+0x280>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b63      	cmp	r3, #99	; 0x63
 8000890:	dd02      	ble.n	8000898 <fsm_tuning_run+0x64>
					currentLed13 = 0;
 8000892:	4b88      	ldr	r3, [pc, #544]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 8000898:	f000 fb3e 	bl	8000f18 <updateLedBuffer>
				uart_communication_fsm();
 800089c:	f001 f804 	bl	80018a8 <uart_communication_fsm>
			if(isButtonPressed(0) == 1) {
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff fc53 	bl	800014c <isButtonPressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d10f      	bne.n	80008cc <fsm_tuning_run+0x98>
				clearled();
 80008ac:	f000 fc3a 	bl	8001124 <clearled>
				status = TUNING_AMBER;
 80008b0:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <fsm_tuning_run+0x270>)
 80008b2:	2216      	movs	r2, #22
 80008b4:	601a      	str	r2, [r3, #0]
				currentLed24 = 3; //mode
 80008b6:	4b80      	ldr	r3, [pc, #512]	; (8000ab8 <fsm_tuning_run+0x284>)
 80008b8:	2203      	movs	r2, #3
 80008ba:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 80008bc:	f000 fb2c 	bl	8000f18 <updateLedBuffer>
				setTimer(3, 50);
 80008c0:	2132      	movs	r1, #50	; 0x32
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 fcb4 	bl	8001230 <setTimer>
				uart_communication_fsm();
 80008c8:	f000 ffee 	bl	80018a8 <uart_communication_fsm>
			if (isButtonPressed(2) == 1) {
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fc3d 	bl	800014c <isButtonPressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	f040 80de 	bne.w	8000a96 <fsm_tuning_run+0x262>
				realRedTime = currentLed13;
 80008da:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <fsm_tuning_run+0x280>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a77      	ldr	r2, [pc, #476]	; (8000abc <fsm_tuning_run+0x288>)
 80008e0:	6013      	str	r3, [r2, #0]
				currentLed13 = 0;
 80008e2:	4b74      	ldr	r3, [pc, #464]	; (8000ab4 <fsm_tuning_run+0x280>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
			break;
 80008e8:	e0d5      	b.n	8000a96 <fsm_tuning_run+0x262>
			if (timerFlag[3] == 1) {
 80008ea:	4b6f      	ldr	r3, [pc, #444]	; (8000aa8 <fsm_tuning_run+0x274>)
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d13a      	bne.n	8000968 <fsm_tuning_run+0x134>
				setTimer(3, 50);
 80008f2:	2132      	movs	r1, #50	; 0x32
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 fc9b 	bl	8001230 <setTimer>
				clearled();
 80008fa:	f000 fc13 	bl	8001124 <clearled>
				if (amber_on == 0) {
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <fsm_tuning_run+0x28c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d118      	bne.n	8000938 <fsm_tuning_run+0x104>
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //toggle amber 1
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090c:	4867      	ldr	r0, [pc, #412]	; (8000aac <fsm_tuning_run+0x278>)
 800090e:	f001 fbe6 	bl	80020de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	4866      	ldr	r0, [pc, #408]	; (8000ab0 <fsm_tuning_run+0x27c>)
 8000918:	f001 fbe1 	bl	80020de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //toggle amber 2
 800091c:	2201      	movs	r2, #1
 800091e:	2120      	movs	r1, #32
 8000920:	4863      	ldr	r0, [pc, #396]	; (8000ab0 <fsm_tuning_run+0x27c>)
 8000922:	f001 fbdc 	bl	80020de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	4861      	ldr	r0, [pc, #388]	; (8000ab0 <fsm_tuning_run+0x27c>)
 800092c:	f001 fbd7 	bl	80020de <HAL_GPIO_WritePin>
					amber_on = 1;
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <fsm_tuning_run+0x28c>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	e017      	b.n	8000968 <fsm_tuning_run+0x134>
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //toggle amber 1
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	485b      	ldr	r0, [pc, #364]	; (8000aac <fsm_tuning_run+0x278>)
 8000940:	f001 fbcd 	bl	80020de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2108      	movs	r1, #8
 8000948:	4859      	ldr	r0, [pc, #356]	; (8000ab0 <fsm_tuning_run+0x27c>)
 800094a:	f001 fbc8 	bl	80020de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //toggle amber 2
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4857      	ldr	r0, [pc, #348]	; (8000ab0 <fsm_tuning_run+0x27c>)
 8000954:	f001 fbc3 	bl	80020de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2110      	movs	r1, #16
 800095c:	4854      	ldr	r0, [pc, #336]	; (8000ab0 <fsm_tuning_run+0x27c>)
 800095e:	f001 fbbe 	bl	80020de <HAL_GPIO_WritePin>
					amber_on = 0;
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <fsm_tuning_run+0x28c>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(1) == 1) {
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fbef 	bl	800014c <isButtonPressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10f      	bne.n	8000994 <fsm_tuning_run+0x160>
				currentLed13++;
 8000974:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a4e      	ldr	r2, [pc, #312]	; (8000ab4 <fsm_tuning_run+0x280>)
 800097c:	6013      	str	r3, [r2, #0]
				if (currentLed13 > 99)
 800097e:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b63      	cmp	r3, #99	; 0x63
 8000984:	dd02      	ble.n	800098c <fsm_tuning_run+0x158>
					currentLed13 = 0;
 8000986:	4b4b      	ldr	r3, [pc, #300]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 800098c:	f000 fac4 	bl	8000f18 <updateLedBuffer>
				uart_communication_fsm();
 8000990:	f000 ff8a 	bl	80018a8 <uart_communication_fsm>
			if(isButtonPressed(0) == 1) {
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff fbd9 	bl	800014c <isButtonPressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d111      	bne.n	80009c4 <fsm_tuning_run+0x190>
				clearled();
 80009a0:	f000 fbc0 	bl	8001124 <clearled>
				status = TUNING_GREEN;
 80009a4:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <fsm_tuning_run+0x270>)
 80009a6:	2217      	movs	r2, #23
 80009a8:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80009aa:	f000 faf5 	bl	8000f98 <clearTrafficLight>
				currentLed24 = 4; //mode
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <fsm_tuning_run+0x284>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 80009b4:	f000 fab0 	bl	8000f18 <updateLedBuffer>
				setTimer(3, 50);
 80009b8:	2132      	movs	r1, #50	; 0x32
 80009ba:	2003      	movs	r0, #3
 80009bc:	f000 fc38 	bl	8001230 <setTimer>
				uart_communication_fsm();
 80009c0:	f000 ff72 	bl	80018a8 <uart_communication_fsm>
			if (isButtonPressed(2) == 1) {
 80009c4:	2002      	movs	r0, #2
 80009c6:	f7ff fbc1 	bl	800014c <isButtonPressed>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d164      	bne.n	8000a9a <fsm_tuning_run+0x266>
				realAmberTime = currentLed13;
 80009d0:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <fsm_tuning_run+0x280>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a3b      	ldr	r2, [pc, #236]	; (8000ac4 <fsm_tuning_run+0x290>)
 80009d6:	6013      	str	r3, [r2, #0]
				currentLed13 = 0;
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <fsm_tuning_run+0x280>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
			break;
 80009de:	e05c      	b.n	8000a9a <fsm_tuning_run+0x266>
			if (timerFlag[3] == 1) {
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <fsm_tuning_run+0x274>)
 80009e2:	78db      	ldrb	r3, [r3, #3]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <fsm_tuning_run+0x1cc>
				setTimer(3, 50);
 80009e8:	2132      	movs	r1, #50	; 0x32
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 fc20 	bl	8001230 <setTimer>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin); //toggle green led 1
 80009f0:	2108      	movs	r1, #8
 80009f2:	482f      	ldr	r0, [pc, #188]	; (8000ab0 <fsm_tuning_run+0x27c>)
 80009f4:	f001 fb8b 	bl	800210e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin); //toggle green led 2
 80009f8:	2110      	movs	r1, #16
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <fsm_tuning_run+0x27c>)
 80009fc:	f001 fb87 	bl	800210e <HAL_GPIO_TogglePin>
			if (isButtonPressed(1) == 1) {
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fba3 	bl	800014c <isButtonPressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10f      	bne.n	8000a2c <fsm_tuning_run+0x1f8>
				currentLed13++;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000a14:	6013      	str	r3, [r2, #0]
				if (currentLed13 > 99)
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b63      	cmp	r3, #99	; 0x63
 8000a1c:	dd02      	ble.n	8000a24 <fsm_tuning_run+0x1f0>
					currentLed13 = 0;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 8000a24:	f000 fa78 	bl	8000f18 <updateLedBuffer>
				uart_communication_fsm();
 8000a28:	f000 ff3e 	bl	80018a8 <uart_communication_fsm>
			if(isButtonPressed(0) == 1) {
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fb8d 	bl	800014c <isButtonPressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11e      	bne.n	8000a76 <fsm_tuning_run+0x242>
				clearled();
 8000a38:	f000 fb74 	bl	8001124 <clearled>
				status = INIT;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <fsm_tuning_run+0x270>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 8000a42:	f000 faa9 	bl	8000f98 <clearTrafficLight>
				currentLed24 = 1; //mode
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <fsm_tuning_run+0x284>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 8000a4c:	f000 fa64 	bl	8000f18 <updateLedBuffer>
				setTimer(0, realAmberTime * 100);
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <fsm_tuning_run+0x290>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	0091      	lsls	r1, r2, #2
 8000a60:	461a      	mov	r2, r3
 8000a62:	460b      	mov	r3, r1
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fbdf 	bl	8001230 <setTimer>
				uart_communication_fsm();
 8000a72:	f000 ff19 	bl	80018a8 <uart_communication_fsm>
			if (isButtonPressed(2) == 1) {
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff fb68 	bl	800014c <isButtonPressed>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10d      	bne.n	8000a9e <fsm_tuning_run+0x26a>
				realGreenTime = currentLed13;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <fsm_tuning_run+0x294>)
 8000a88:	6013      	str	r3, [r2, #0]
				currentLed13 = 0;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <fsm_tuning_run+0x280>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
			break;
 8000a90:	e005      	b.n	8000a9e <fsm_tuning_run+0x26a>
			break;
 8000a92:	bf00      	nop
 8000a94:	e004      	b.n	8000aa0 <fsm_tuning_run+0x26c>
			break;
 8000a96:	bf00      	nop
 8000a98:	e002      	b.n	8000aa0 <fsm_tuning_run+0x26c>
			break;
 8000a9a:	bf00      	nop
 8000a9c:	e000      	b.n	8000aa0 <fsm_tuning_run+0x26c>
			break;
 8000a9e:	bf00      	nop
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000070 	.word	0x20000070
 8000aa8:	20000174 	.word	0x20000174
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	20000154 	.word	0x20000154
 8000ab8:	20000158 	.word	0x20000158
 8000abc:	20000080 	.word	0x20000080
 8000ac0:	20000138 	.word	0x20000138
 8000ac4:	20000078 	.word	0x20000078
 8000ac8:	2000007c 	.word	0x2000007c

08000acc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if (huart->Instance==USART2) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d11f      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0x52>
	  HAL_UART_Transmit (&huart2 , &temp , 1 , 50) ;
 8000ade:	2332      	movs	r3, #50	; 0x32
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4912      	ldr	r1, [pc, #72]	; (8000b2c <HAL_UART_RxCpltCallback+0x60>)
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <HAL_UART_RxCpltCallback+0x64>)
 8000ae6:	f002 feef 	bl	80038c8 <HAL_UART_Transmit>
	  uart_buffer[index_buffer++]=temp;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_UART_RxCpltCallback+0x68>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	b2d1      	uxtb	r1, r2
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_UART_RxCpltCallback+0x68>)
 8000af4:	7011      	strb	r1, [r2, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_UART_RxCpltCallback+0x60>)
 8000afa:	7819      	ldrb	r1, [r3, #0]
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_RxCpltCallback+0x6c>)
 8000afe:	5499      	strb	r1, [r3, r2]
	  if (index_buffer >= MAX_BUFFER_SIZE)
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_UART_RxCpltCallback+0x68>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b1d      	cmp	r3, #29
 8000b06:	d902      	bls.n	8000b0e <HAL_UART_RxCpltCallback+0x42>
		  index_buffer=0;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_UART_RxCpltCallback+0x68>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
	  buffer_flag=1;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_UART_RxCpltCallback+0x70>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	4905      	ldr	r1, [pc, #20]	; (8000b2c <HAL_UART_RxCpltCallback+0x60>)
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_RxCpltCallback+0x64>)
 8000b1a:	f002 ff58 	bl	80039ce <HAL_UART_Receive_IT>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	2000018c 	.word	0x2000018c
 8000b30:	2000022c 	.word	0x2000022c
 8000b34:	2000018d 	.word	0x2000018d
 8000b38:	20000298 	.word	0x20000298
 8000b3c:	2000018e 	.word	0x2000018e

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f000 ff0e 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f830 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 f95a 	bl	8000e04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b50:	f000 f868 	bl	8000c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b54:	f000 f8b6 	bl	8000cc4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b58:	f000 f92a 	bl	8000db0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8000b5c:	f000 f952 	bl	8000e04 <MX_GPIO_Init>
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000b60:	480e      	ldr	r0, [pc, #56]	; (8000b9c <main+0x5c>)
 8000b62:	f001 ff4b 	bl	80029fc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <main+0x60>)
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <main+0x64>)
 8000b6c:	f002 ff2f 	bl	80039ce <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <main+0x68>)
 8000b74:	f001 ffec 	bl	8002b50 <HAL_TIM_PWM_Start>
  setTimer(1, 1);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 fb58 	bl	8001230 <setTimer>
  setTimer(9, 1);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2009      	movs	r0, #9
 8000b84:	f000 fb54 	bl	8001230 <setTimer>
  while (1)
  {
  	fsm_automatic_run();
 8000b88:	f7ff fbdc 	bl	8000344 <fsm_automatic_run>
  	fsm_tuning_run();
 8000b8c:	f7ff fe52 	bl	8000834 <fsm_tuning_run>
  	manual_fsm_run();
 8000b90:	f7ff fd3a 	bl	8000608 <manual_fsm_run>
  	fsm_pedestrian();
 8000b94:	f7ff fde6 	bl	8000764 <fsm_pedestrian>
  	fsm_automatic_run();
 8000b98:	e7f6      	b.n	8000b88 <main+0x48>
 8000b9a:	bf00      	nop
 8000b9c:	200001e4 	.word	0x200001e4
 8000ba0:	2000018c 	.word	0x2000018c
 8000ba4:	2000022c 	.word	0x2000022c
 8000ba8:	2000019c 	.word	0x2000019c

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	; 0x40
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fcd6 	bl	800456c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 faac 	bl	8002140 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bee:	f000 f98d 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000bfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd17 	bl	8002640 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000c18:	f000 f978 	bl	8000f0c <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3740      	adds	r7, #64	; 0x40
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c4a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c58:	2209      	movs	r2, #9
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c6a:	f001 fe77 	bl	800295c <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c74:	f000 f94a 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000c86:	f002 f9cf 	bl	8003028 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 f93c 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000ca2:	f002 fd51 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f92e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM2_Init+0x9c>)
 8000cb2:	f001 fea3 	bl	80029fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001e4 	.word	0x200001e4

08000cc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <MX_TIM3_Init+0xe8>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000cfc:	224f      	movs	r2, #79	; 0x4f
 8000cfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d08:	2263      	movs	r2, #99	; 0x63
 8000d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d18:	4823      	ldr	r0, [pc, #140]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d1a:	f001 fe1f 	bl	800295c <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d24:	f000 f8f2 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	481c      	ldr	r0, [pc, #112]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d36:	f002 f977 	bl	8003028 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000d40:	f000 f8e4 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d46:	f001 feab 	bl	8002aa0 <HAL_TIM_PWM_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000d50:	f000 f8dc 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4619      	mov	r1, r3
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d64:	f002 fcf0 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000d6e:	f000 f8cd 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d72:	2360      	movs	r3, #96	; 0x60
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d8a:	f002 f88b 	bl	8002ea4 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000d94:	f000 f8ba 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_TIM3_Init+0xe4>)
 8000d9a:	f000 fb19 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000019c 	.word	0x2000019c
 8000dac:	40000400 	.word	0x40000400

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_USART2_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de8:	f002 fd1e 	bl	8003828 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f000 f88b 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000022c 	.word	0x2000022c
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <MX_GPIO_Init+0xd0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e4e:	4822      	ldr	r0, [pc, #136]	; (8000ed8 <MX_GPIO_Init+0xd4>)
 8000e50:	f001 f945 	bl	80020de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e5a:	4820      	ldr	r0, [pc, #128]	; (8000edc <MX_GPIO_Init+0xd8>)
 8000e5c:	f001 f93f 	bl	80020de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000e60:	2313      	movs	r3, #19
 8000e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <MX_GPIO_Init+0xd8>)
 8000e74:	f000 ff98 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_GPIO_Init+0xd4>)
 8000e8c:	f000 ff8c 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e90:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <MX_GPIO_Init+0xd4>)
 8000eaa:	f000 ff7d 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000eae:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_GPIO_Init+0xd8>)
 8000ec8:	f000 ff6e 	bl	8001da8 <HAL_GPIO_Init>

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40010800 	.word	0x40010800

08000ee0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	timer_run();
 8000ee8:	f000 f9e4 	bl	80012b4 <timer_run>
	getKeyInput(0);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff f957 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff f954 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f7ff f951 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f7ff f94e 	bl	80001a0 <getKeyInput>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <updateLedBuffer>:
//void update7SEGLed(int index) {
//	enState(index);
//	display7SEG(led_buffer[index]);
//}
//
void updateLedBuffer() {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	led_buffer[0] = currentLed13 / 10;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <updateLedBuffer+0x70>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <updateLedBuffer+0x74>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1092      	asrs	r2, r2, #2
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <updateLedBuffer+0x78>)
 8000f2e:	6013      	str	r3, [r2, #0]
	led_buffer[2] = currentLed13 % 10;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <updateLedBuffer+0x70>)
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <updateLedBuffer+0x74>)
 8000f36:	fb83 2301 	smull	r2, r3, r3, r1
 8000f3a:	109a      	asrs	r2, r3, #2
 8000f3c:	17cb      	asrs	r3, r1, #31
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	1aca      	subs	r2, r1, r3
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <updateLedBuffer+0x78>)
 8000f4c:	609a      	str	r2, [r3, #8]

	led_buffer[1] = currentLed24 / 10;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <updateLedBuffer+0x7c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <updateLedBuffer+0x74>)
 8000f54:	fb82 1203 	smull	r1, r2, r2, r3
 8000f58:	1092      	asrs	r2, r2, #2
 8000f5a:	17db      	asrs	r3, r3, #31
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <updateLedBuffer+0x78>)
 8000f60:	6053      	str	r3, [r2, #4]
	led_buffer[3] = currentLed24 % 10;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <updateLedBuffer+0x7c>)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <updateLedBuffer+0x74>)
 8000f68:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6c:	109a      	asrs	r2, r3, #2
 8000f6e:	17cb      	asrs	r3, r1, #31
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	1aca      	subs	r2, r1, r3
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <updateLedBuffer+0x78>)
 8000f7e:	60da      	str	r2, [r3, #12]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000154 	.word	0x20000154
 8000f8c:	66666667 	.word	0x66666667
 8000f90:	20000144 	.word	0x20000144
 8000f94:	20000158 	.word	0x20000158

08000f98 <clearTrafficLight>:
//  		  	HAL_GPIO_WritePin(SegF_GPIO_Port, SegF_Pin, RESET);
//  		  	HAL_GPIO_WritePin(SegG_GPIO_Port, SegG_Pin, RESET);
//  	  }
//    }
//
  void clearTrafficLight() {
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
//  	HAL_GPIO_WritePin(GPIOA, Yellow1_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Green2_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Red2_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Yellow2_Pin, SET);

  	led_buffer[0] = 0;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <clearTrafficLight+0x30>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
  	led_buffer[1] = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <clearTrafficLight+0x30>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  	led_buffer[2] = 0;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <clearTrafficLight+0x30>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  	led_buffer[3] = 0;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <clearTrafficLight+0x30>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]

  	currentLed13 = 0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <clearTrafficLight+0x34>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
  	currentLed24 = 0;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <clearTrafficLight+0x38>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
//  	clear7SEG();
  }
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	20000144 	.word	0x20000144
 8000fcc:	20000154 	.word	0x20000154
 8000fd0:	20000158 	.word	0x20000158

08000fd4 <onAmber1>:

  void onAmber1() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <onAmber1+0x20>)
 8000fe0:	f001 f87d 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <onAmber1+0x24>)
 8000fea:	f001 f878 	bl	80020de <HAL_GPIO_WritePin>
  }
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40010c00 	.word	0x40010c00

08000ffc <onRed1>:

  void onRed1() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <onRed1+0x20>)
 8001008:	f001 f869 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2108      	movs	r1, #8
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <onRed1+0x24>)
 8001012:	f001 f864 	bl	80020de <HAL_GPIO_WritePin>
  }
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010800 	.word	0x40010800
 8001020:	40010c00 	.word	0x40010c00

08001024 <onGreen1>:

  void onGreen1() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <onGreen1+0x20>)
 8001030:	f001 f855 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <onGreen1+0x24>)
 800103a:	f001 f850 	bl	80020de <HAL_GPIO_WritePin>
  }
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800
 8001048:	40010c00 	.word	0x40010c00

0800104c <onAmber2>:

  void onAmber2() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2120      	movs	r1, #32
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <onAmber2+0x1c>)
 8001056:	f001 f842 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	4802      	ldr	r0, [pc, #8]	; (8001068 <onAmber2+0x1c>)
 8001060:	f001 f83d 	bl	80020de <HAL_GPIO_WritePin>
  }
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40010c00 	.word	0x40010c00

0800106c <onRed2>:

  void onRed2() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2120      	movs	r1, #32
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <onRed2+0x1c>)
 8001076:	f001 f832 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2110      	movs	r1, #16
 800107e:	4802      	ldr	r0, [pc, #8]	; (8001088 <onRed2+0x1c>)
 8001080:	f001 f82d 	bl	80020de <HAL_GPIO_WritePin>
  }
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010c00 	.word	0x40010c00

0800108c <onGreen2>:

  void onGreen2() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2120      	movs	r1, #32
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <onGreen2+0x1c>)
 8001096:	f001 f822 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2110      	movs	r1, #16
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <onGreen2+0x1c>)
 80010a0:	f001 f81d 	bl	80020de <HAL_GPIO_WritePin>
  }
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010c00 	.word	0x40010c00

080010ac <onGreenPedes>:

  void onAmberPedes() {
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
  }
  void onGreenPedes() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <onGreenPedes+0x20>)
 80010b8:	f001 f811 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <onGreenPedes+0x24>)
 80010c4:	f001 f80b 	bl	80020de <HAL_GPIO_WritePin>
  }
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40010800 	.word	0x40010800

080010d4 <onRedPedes>:
  void onRedPedes() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <onRedPedes+0x20>)
 80010e0:	f000 fffd 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <onRedPedes+0x24>)
 80010ec:	f000 fff7 	bl	80020de <HAL_GPIO_WritePin>
  }
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40010800 	.word	0x40010800

080010fc <clearPedesLed>:
  void clearPedesLed() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <clearPedesLed+0x20>)
 8001108:	f000 ffe9 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <clearPedesLed+0x24>)
 8001114:	f000 ffe3 	bl	80020de <HAL_GPIO_WritePin>
  }
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40010800 	.word	0x40010800

08001124 <clearled>:


  void clearled() {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <clearled+0x34>)
 8001130:	f000 ffd5 	bl	80020de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2108      	movs	r1, #8
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <clearled+0x38>)
 800113a:	f000 ffd0 	bl	80020de <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <clearled+0x38>)
 8001144:	f000 ffcb 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <clearled+0x38>)
 800114e:	f000 ffc6 	bl	80020de <HAL_GPIO_WritePin>
  }
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00

08001160 <buzzer_on>:

  int time_buzzer;
  TIM_HandleTypeDef htim3;
  int duty=0;

  void buzzer_on() {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  		  if (buzzer_flag==1) {
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <buzzer_on+0x94>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d11e      	bne.n	80011aa <buzzer_on+0x4a>
  //			  } else {
  //				  setTimer(3, (currentLed24+1)*100);
  //				  time_buzzer=(currentLed24+1)*100;
  ////				  onAmberPedes();
  //			  }
  			  if (b==1) {
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <buzzer_on+0x98>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10a      	bne.n	800118a <buzzer_on+0x2a>
  				  time_buzzer=realGreenTime*100;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <buzzer_on+0x9c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2264      	movs	r2, #100	; 0x64
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <buzzer_on+0xa0>)
 8001180:	6013      	str	r3, [r2, #0]
  				  b=0;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <buzzer_on+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e006      	b.n	8001198 <buzzer_on+0x38>
  			  } else {
  				  time_buzzer=currentLed13*100;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <buzzer_on+0xa4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2264      	movs	r2, #100	; 0x64
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <buzzer_on+0xa0>)
 8001196:	6013      	str	r3, [r2, #0]
  			  }
  			  buzzer_flag=0;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <buzzer_on+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
  			  duty=0;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <buzzer_on+0xa8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
  			  timerFlag[6]=1;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <buzzer_on+0xac>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	719a      	strb	r2, [r3, #6]
  		  }
  		  if (duty>=100) {
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <buzzer_on+0xa8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b63      	cmp	r3, #99	; 0x63
 80011b0:	dd02      	ble.n	80011b8 <buzzer_on+0x58>
  			  duty=0;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <buzzer_on+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
  		  }
  		  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,duty);
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <buzzer_on+0xa8>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <buzzer_on+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
  		  if (timerFlag[6]==1) {
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <buzzer_on+0xac>)
 80011c4:	799b      	ldrb	r3, [r3, #6]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d111      	bne.n	80011ee <buzzer_on+0x8e>
  			  duty+=1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <buzzer_on+0xa8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <buzzer_on+0xa8>)
 80011d2:	6013      	str	r3, [r2, #0]
  			  setTimer(6, time_buzzer/100);
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <buzzer_on+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <buzzer_on+0xb4>)
 80011da:	fb82 1203 	smull	r1, r2, r2, r3
 80011de:	1152      	asrs	r2, r2, #5
 80011e0:	17db      	asrs	r3, r3, #31
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	2006      	movs	r0, #6
 80011ea:	f000 f821 	bl	8001230 <setTimer>
  		  }
    }
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000013c 	.word	0x2000013c
 80011f8:	20000140 	.word	0x20000140
 80011fc:	2000007c 	.word	0x2000007c
 8001200:	20000274 	.word	0x20000274
 8001204:	20000154 	.word	0x20000154
 8001208:	2000015c 	.word	0x2000015c
 800120c:	20000174 	.word	0x20000174
 8001210:	2000019c 	.word	0x2000019c
 8001214:	51eb851f 	.word	0x51eb851f

08001218 <buzzer_off>:

  void buzzer_off() {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <buzzer_off+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000019c 	.word	0x2000019c

08001230 <setTimer>:
#include "software_timer.h"

uint16_t timerCounter[MAX_TIMER] = {0};
uint8_t timerFlag[MAX_TIMER] = {0};

void setTimer(uint8_t index, uint16_t duration) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	80bb      	strh	r3, [r7, #4]
	timerCounter[index] = duration;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4906      	ldr	r1, [pc, #24]	; (800125c <setTimer+0x2c>)
 8001244:	88ba      	ldrh	r2, [r7, #4]
 8001246:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timerFlag[index] = 0;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <setTimer+0x30>)
 800124e:	2100      	movs	r1, #0
 8001250:	54d1      	strb	r1, [r2, r3]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000160 	.word	0x20000160
 8001260:	20000174 	.word	0x20000174

08001264 <timerRun>:

void timerRun(uint8_t index){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	if(timerCounter[index] > 0){
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <timerRun+0x48>)
 8001272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d012      	beq.n	80012a0 <timerRun+0x3c>
		timerCounter[index]--;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <timerRun+0x48>)
 800127e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001282:	3a01      	subs	r2, #1
 8001284:	b291      	uxth	r1, r2
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <timerRun+0x48>)
 8001288:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (timerCounter[index] <= 0){
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <timerRun+0x48>)
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <timerRun+0x3c>
			timerFlag[index] = 1;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <timerRun+0x4c>)
 800129c:	2101      	movs	r1, #1
 800129e:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000160 	.word	0x20000160
 80012b0:	20000174 	.word	0x20000174

080012b4 <timer_run>:

void timer_run() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	timerRun(0);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ffd3 	bl	8001264 <timerRun>
	timerRun(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff ffd0 	bl	8001264 <timerRun>
	timerRun(2);
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff ffcd 	bl	8001264 <timerRun>
	timerRun(3);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff ffca 	bl	8001264 <timerRun>
	timerRun(4);
 80012d0:	2004      	movs	r0, #4
 80012d2:	f7ff ffc7 	bl	8001264 <timerRun>
	timerRun(5);
 80012d6:	2005      	movs	r0, #5
 80012d8:	f7ff ffc4 	bl	8001264 <timerRun>
	timerRun(6);
 80012dc:	2006      	movs	r0, #6
 80012de:	f7ff ffc1 	bl	8001264 <timerRun>
	timerRun(9);
 80012e2:	2009      	movs	r0, #9
 80012e4:	f7ff ffbe 	bl	8001264 <timerRun>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_MspInit+0x5c>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_MspInit+0x5c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6193      	str	r3, [r2, #24]
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_MspInit+0x5c>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x5c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x5c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x5c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_MspInit+0x60>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_MspInit+0x60>)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000

08001350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001360:	d114      	bne.n	800138c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_TIM_Base_MspInit+0x78>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_TIM_Base_MspInit+0x78>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_TIM_Base_MspInit+0x78>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201c      	movs	r0, #28
 8001380:	f000 fc29 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001384:	201c      	movs	r0, #28
 8001386:	f000 fc42 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800138a:	e018      	b.n	80013be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_TIM_Base_MspInit+0x7c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d113      	bne.n	80013be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x78>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_Base_MspInit+0x78>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_TIM_Base_MspInit+0x78>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201d      	movs	r0, #29
 80013b4:	f000 fc0f 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b8:	201d      	movs	r0, #29
 80013ba:	f000 fc28 	bl	8001c0e <HAL_NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40000400 	.word	0x40000400

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_TIM_MspPostInit+0x58>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d117      	bne.n	8001420 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_TIM_MspPostInit+0x5c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <HAL_TIM_MspPostInit+0x5c>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_TIM_MspPostInit+0x5c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_TIM_MspPostInit+0x60>)
 800141c:	f000 fcc4 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40000400 	.word	0x40000400
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d137      	bne.n	80014c4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 800145a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145e:	61d3      	str	r3, [r2, #28]
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001484:	2304      	movs	r3, #4
 8001486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <HAL_UART_MspInit+0xa0>)
 8001498:	f000 fc86 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800149c:	2308      	movs	r3, #8
 800149e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_UART_MspInit+0xa0>)
 80014b0:	f000 fc7a 	bl	8001da8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2026      	movs	r0, #38	; 0x26
 80014ba:	f000 fb8c 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014be:	2026      	movs	r0, #38	; 0x26
 80014c0:	f000 fba5 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40004400 	.word	0x40004400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010800 	.word	0x40010800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151e:	f000 fa67 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM2_IRQHandler+0x10>)
 800152e:	f001 fbb1 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001e4 	.word	0x200001e4

0800153c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM3_IRQHandler+0x10>)
 8001542:	f001 fba7 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000019c 	.word	0x2000019c

08001550 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <USART2_IRQHandler+0x10>)
 8001556:	f002 fa5f 	bl	8003a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000022c 	.word	0x2000022c

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f002 ffc0 	bl	8004518 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20005000 	.word	0x20005000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000180 	.word	0x20000180
 80015cc:	20000330 	.word	0x20000330

080015d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <clear_buffer>:
char str[100];


UART_HandleTypeDef huart2;

void clear_buffer() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	memset(uart_buffer,0,sizeof(uart_buffer));
 80015e0:	221e      	movs	r2, #30
 80015e2:	2100      	movs	r1, #0
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <clear_buffer+0x18>)
 80015e6:	f002 ffc1 	bl	800456c <memset>
	index_buffer=0;
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <clear_buffer+0x1c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000298 	.word	0x20000298
 80015f8:	2000018d 	.word	0x2000018d

080015fc <isOKreceived>:
	if(command_data[0] == 'R' && command_data[1] == 'S' && command_data[2] == 'T' && command_data[3] == '#')
		return 1;
	return 0;
}

int isOKreceived(){
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	if(command_data[0] == 'O' && command_data[1] == 'K' && command_data[2] == '#')
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <isOKreceived+0x2c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b4f      	cmp	r3, #79	; 0x4f
 8001606:	d109      	bne.n	800161c <isOKreceived+0x20>
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <isOKreceived+0x2c>)
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	2b4b      	cmp	r3, #75	; 0x4b
 800160e:	d105      	bne.n	800161c <isOKreceived+0x20>
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <isOKreceived+0x2c>)
 8001612:	789b      	ldrb	r3, [r3, #2]
 8001614:	2b23      	cmp	r3, #35	; 0x23
 8001616:	d101      	bne.n	800161c <isOKreceived+0x20>
		return 1;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <isOKreceived+0x22>
	return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000278 	.word	0x20000278

0800162c <uart_transmit>:

void uart_transmit(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	switch(status){
 8001630:	4b90      	ldr	r3, [pc, #576]	; (8001874 <uart_transmit+0x248>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3b15      	subs	r3, #21
 8001636:	2b08      	cmp	r3, #8
 8001638:	f200 8119 	bhi.w	800186e <uart_transmit+0x242>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <uart_transmit+0x18>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	080016dd 	.word	0x080016dd
 8001648:	08001669 	.word	0x08001669
 800164c:	080016a3 	.word	0x080016a3
 8001650:	0800186f 	.word	0x0800186f
 8001654:	0800186f 	.word	0x0800186f
 8001658:	08001819 	.word	0x08001819
 800165c:	080017c3 	.word	0x080017c3
 8001660:	0800176d 	.word	0x0800176d
 8001664:	08001717 	.word	0x08001717
	case TUNING_AMBER:
		ADC_value = led_buffer[0] * 10 + led_buffer[1];
 8001668:	4b83      	ldr	r3, [pc, #524]	; (8001878 <uart_transmit+0x24c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	461a      	mov	r2, r3
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <uart_transmit+0x24c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4413      	add	r3, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4b7f      	ldr	r3, [pc, #508]	; (800187c <uart_transmit+0x250>)
 8001680:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TUNING AMBER: %d# \r\n", ADC_value), 1000);
 8001682:	4b7e      	ldr	r3, [pc, #504]	; (800187c <uart_transmit+0x250>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	497d      	ldr	r1, [pc, #500]	; (8001880 <uart_transmit+0x254>)
 800168a:	487e      	ldr	r0, [pc, #504]	; (8001884 <uart_transmit+0x258>)
 800168c:	f002 ff76 	bl	800457c <siprintf>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	497a      	ldr	r1, [pc, #488]	; (8001884 <uart_transmit+0x258>)
 800169a:	487b      	ldr	r0, [pc, #492]	; (8001888 <uart_transmit+0x25c>)
 800169c:	f002 f914 	bl	80038c8 <HAL_UART_Transmit>
		break;
 80016a0:	e0e6      	b.n	8001870 <uart_transmit+0x244>
	case TUNING_GREEN:
		ADC_value = led_buffer[0] * 10 + led_buffer[1];
 80016a2:	4b75      	ldr	r3, [pc, #468]	; (8001878 <uart_transmit+0x24c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b71      	ldr	r3, [pc, #452]	; (8001878 <uart_transmit+0x24c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <uart_transmit+0x250>)
 80016ba:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TUNING GREEN: %d# \r\n", ADC_value), 1000);
 80016bc:	4b6f      	ldr	r3, [pc, #444]	; (800187c <uart_transmit+0x250>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4972      	ldr	r1, [pc, #456]	; (800188c <uart_transmit+0x260>)
 80016c4:	486f      	ldr	r0, [pc, #444]	; (8001884 <uart_transmit+0x258>)
 80016c6:	f002 ff59 	bl	800457c <siprintf>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	496c      	ldr	r1, [pc, #432]	; (8001884 <uart_transmit+0x258>)
 80016d4:	486c      	ldr	r0, [pc, #432]	; (8001888 <uart_transmit+0x25c>)
 80016d6:	f002 f8f7 	bl	80038c8 <HAL_UART_Transmit>
		break;
 80016da:	e0c9      	b.n	8001870 <uart_transmit+0x244>
	case TUNING_RED:
		ADC_value = led_buffer[0] * 10 + led_buffer[1];
 80016dc:	4b66      	ldr	r3, [pc, #408]	; (8001878 <uart_transmit+0x24c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <uart_transmit+0x24c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b62      	ldr	r3, [pc, #392]	; (800187c <uart_transmit+0x250>)
 80016f4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TUNING RED: %d# \r\n", ADC_value), 1000);
 80016f6:	4b61      	ldr	r3, [pc, #388]	; (800187c <uart_transmit+0x250>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4964      	ldr	r1, [pc, #400]	; (8001890 <uart_transmit+0x264>)
 80016fe:	4861      	ldr	r0, [pc, #388]	; (8001884 <uart_transmit+0x258>)
 8001700:	f002 ff3c 	bl	800457c <siprintf>
 8001704:	4603      	mov	r3, r0
 8001706:	b29a      	uxth	r2, r3
 8001708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170c:	495d      	ldr	r1, [pc, #372]	; (8001884 <uart_transmit+0x258>)
 800170e:	485e      	ldr	r0, [pc, #376]	; (8001888 <uart_transmit+0x25c>)
 8001710:	f002 f8da 	bl	80038c8 <HAL_UART_Transmit>
		break;
 8001714:	e0ac      	b.n	8001870 <uart_transmit+0x244>
	case MANUAL_AMBER_RED:
		ADC_value = led_buffer[0] * 10 + led_buffer[2];
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <uart_transmit+0x24c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	461a      	mov	r2, r3
 8001724:	4b54      	ldr	r3, [pc, #336]	; (8001878 <uart_transmit+0x24c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4413      	add	r3, r2
 800172a:	461a      	mov	r2, r3
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <uart_transmit+0x250>)
 800172e:	601a      	str	r2, [r3, #0]
		ADC_value2 = led_buffer[1] * 10 + led_buffer[3];
 8001730:	4b51      	ldr	r3, [pc, #324]	; (8001878 <uart_transmit+0x24c>)
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	461a      	mov	r2, r3
 800173e:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <uart_transmit+0x24c>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	4413      	add	r3, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <uart_transmit+0x268>)
 8001748:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!MANUAL AMBER: %d\t RED %d# \r\n", ADC_value, ADC_value2), 1000);
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <uart_transmit+0x250>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <uart_transmit+0x268>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4951      	ldr	r1, [pc, #324]	; (8001898 <uart_transmit+0x26c>)
 8001754:	484b      	ldr	r0, [pc, #300]	; (8001884 <uart_transmit+0x258>)
 8001756:	f002 ff11 	bl	800457c <siprintf>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	4948      	ldr	r1, [pc, #288]	; (8001884 <uart_transmit+0x258>)
 8001764:	4848      	ldr	r0, [pc, #288]	; (8001888 <uart_transmit+0x25c>)
 8001766:	f002 f8af 	bl	80038c8 <HAL_UART_Transmit>
		break;
 800176a:	e081      	b.n	8001870 <uart_transmit+0x244>
	case MANUAL_GREEN_RED:
		ADC_value = led_buffer[0] * 10 + led_buffer[2];
 800176c:	4b42      	ldr	r3, [pc, #264]	; (8001878 <uart_transmit+0x24c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	461a      	mov	r2, r3
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <uart_transmit+0x24c>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <uart_transmit+0x250>)
 8001784:	601a      	str	r2, [r3, #0]
		ADC_value2 = led_buffer[1] * 10 + led_buffer[3];
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <uart_transmit+0x24c>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	461a      	mov	r2, r3
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <uart_transmit+0x24c>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4413      	add	r3, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <uart_transmit+0x268>)
 800179e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!MANUAL GREEN: %d\t RED %d# \r\n", ADC_value, ADC_value2), 1000);
 80017a0:	4b36      	ldr	r3, [pc, #216]	; (800187c <uart_transmit+0x250>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <uart_transmit+0x268>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	493c      	ldr	r1, [pc, #240]	; (800189c <uart_transmit+0x270>)
 80017aa:	4836      	ldr	r0, [pc, #216]	; (8001884 <uart_transmit+0x258>)
 80017ac:	f002 fee6 	bl	800457c <siprintf>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b8:	4932      	ldr	r1, [pc, #200]	; (8001884 <uart_transmit+0x258>)
 80017ba:	4833      	ldr	r0, [pc, #204]	; (8001888 <uart_transmit+0x25c>)
 80017bc:	f002 f884 	bl	80038c8 <HAL_UART_Transmit>
		break;
 80017c0:	e056      	b.n	8001870 <uart_transmit+0x244>
	case MANUAL_RED_AMBER:
		ADC_value = led_buffer[0] * 10 + led_buffer[2];
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <uart_transmit+0x24c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <uart_transmit+0x24c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <uart_transmit+0x250>)
 80017da:	601a      	str	r2, [r3, #0]
		ADC_value2 = led_buffer[1] * 10 + led_buffer[3];
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <uart_transmit+0x24c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <uart_transmit+0x24c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <uart_transmit+0x268>)
 80017f4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!MANUAL RED: %d\t AMBER %d# \r\n", ADC_value, ADC_value2), 1000);
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <uart_transmit+0x250>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <uart_transmit+0x268>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4928      	ldr	r1, [pc, #160]	; (80018a0 <uart_transmit+0x274>)
 8001800:	4820      	ldr	r0, [pc, #128]	; (8001884 <uart_transmit+0x258>)
 8001802:	f002 febb 	bl	800457c <siprintf>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	491d      	ldr	r1, [pc, #116]	; (8001884 <uart_transmit+0x258>)
 8001810:	481d      	ldr	r0, [pc, #116]	; (8001888 <uart_transmit+0x25c>)
 8001812:	f002 f859 	bl	80038c8 <HAL_UART_Transmit>
		break;
 8001816:	e02b      	b.n	8001870 <uart_transmit+0x244>
	case MANUAL_RED_GREEN:
		ADC_value = led_buffer[0] * 10 + led_buffer[2];
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <uart_transmit+0x24c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	461a      	mov	r2, r3
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <uart_transmit+0x24c>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4413      	add	r3, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <uart_transmit+0x250>)
 8001830:	601a      	str	r2, [r3, #0]
		ADC_value2 = led_buffer[1] * 10 + led_buffer[3];
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <uart_transmit+0x24c>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	461a      	mov	r2, r3
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <uart_transmit+0x24c>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4413      	add	r3, r2
 8001846:	461a      	mov	r2, r3
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <uart_transmit+0x268>)
 800184a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!MANUAL RED: %d\t GREEN %d# \r\n", ADC_value, ADC_value2), 1000);
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <uart_transmit+0x250>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <uart_transmit+0x268>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4913      	ldr	r1, [pc, #76]	; (80018a4 <uart_transmit+0x278>)
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <uart_transmit+0x258>)
 8001858:	f002 fe90 	bl	800457c <siprintf>
 800185c:	4603      	mov	r3, r0
 800185e:	b29a      	uxth	r2, r3
 8001860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <uart_transmit+0x258>)
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <uart_transmit+0x25c>)
 8001868:	f002 f82e 	bl	80038c8 <HAL_UART_Transmit>
		break;
 800186c:	e000      	b.n	8001870 <uart_transmit+0x244>
	default:
		break;
 800186e:	bf00      	nop
	}
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000070 	.word	0x20000070
 8001878:	20000144 	.word	0x20000144
 800187c:	20000184 	.word	0x20000184
 8001880:	08004e08 	.word	0x08004e08
 8001884:	200002b8 	.word	0x200002b8
 8001888:	2000022c 	.word	0x2000022c
 800188c:	08004e20 	.word	0x08004e20
 8001890:	08004e38 	.word	0x08004e38
 8001894:	20000188 	.word	0x20000188
 8001898:	08004e4c 	.word	0x08004e4c
 800189c:	08004e6c 	.word	0x08004e6c
 80018a0:	08004e8c 	.word	0x08004e8c
 80018a4:	08004eac 	.word	0x08004eac

080018a8 <uart_communication_fsm>:

void uart_communication_fsm() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	switch(cm_state){
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <uart_communication_fsm+0x5c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d122      	bne.n	80018fa <uart_communication_fsm+0x52>
//			cm_state = SENDING;
//
//		}
//		break;
	case SENDING:
		if(timerFlag[9] == 1){
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <uart_communication_fsm+0x60>)
 80018b6:	7a5b      	ldrb	r3, [r3, #9]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d120      	bne.n	80018fe <uart_communication_fsm+0x56>
			if(isOKreceived()){
 80018bc:	f7ff fe9e 	bl	80015fc <isOKreceived>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <uart_communication_fsm+0x36>
					clear_buffer();
 80018c6:	f7ff fe89 	bl	80015dc <clear_buffer>
					command_flag = 0;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <uart_communication_fsm+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
					cp_state = WAIT;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <uart_communication_fsm+0x68>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
					cm_state = RST_WAITING;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <uart_communication_fsm+0x5c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e008      	b.n	80018f0 <uart_communication_fsm+0x48>
			}
			else{
					clear_buffer();
 80018de:	f7ff fe7d 	bl	80015dc <clear_buffer>
					memset(command_data, 0, sizeof(command_data));
 80018e2:	221e      	movs	r2, #30
 80018e4:	2100      	movs	r1, #0
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <uart_communication_fsm+0x6c>)
 80018e8:	f002 fe40 	bl	800456c <memset>
					uart_transmit();
 80018ec:	f7ff fe9e 	bl	800162c <uart_transmit>
			}
			setTimer(9, 100);
 80018f0:	2164      	movs	r1, #100	; 0x64
 80018f2:	2009      	movs	r0, #9
 80018f4:	f7ff fc9c 	bl	8001230 <setTimer>
		}

		break;
 80018f8:	e001      	b.n	80018fe <uart_communication_fsm+0x56>
	default:
		break;
 80018fa:	bf00      	nop
 80018fc:	e000      	b.n	8001900 <uart_communication_fsm+0x58>
		break;
 80018fe:	bf00      	nop
	}
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000008c 	.word	0x2000008c
 8001908:	20000174 	.word	0x20000174
 800190c:	20000190 	.word	0x20000190
 8001910:	20000088 	.word	0x20000088
 8001914:	20000278 	.word	0x20000278

08001918 <Reset_Handler>:
 8001918:	f7ff fe5a 	bl	80015d0 <SystemInit>
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <LoopFillZerobss+0xe>)
 800191e:	490c      	ldr	r1, [pc, #48]	; (8001950 <LoopFillZerobss+0x12>)
 8001920:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <LoopFillZerobss+0x16>)
 8001922:	2300      	movs	r3, #0
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:
 8001926:	58d4      	ldr	r4, [r2, r3]
 8001928:	50c4      	str	r4, [r0, r3]
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:
 800192c:	18c4      	adds	r4, r0, r3
 800192e:	428c      	cmp	r4, r1
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <LoopFillZerobss+0x1a>)
 8001934:	4c09      	ldr	r4, [pc, #36]	; (800195c <LoopFillZerobss+0x1e>)
 8001936:	2300      	movs	r3, #0
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:
 800193e:	42a2      	cmp	r2, r4
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>
 8001942:	f002 fdef 	bl	8004524 <__libc_init_array>
 8001946:	f7ff f8fb 	bl	8000b40 <main>
 800194a:	4770      	bx	lr
 800194c:	20000000 	.word	0x20000000
 8001950:	200000fc 	.word	0x200000fc
 8001954:	08004f34 	.word	0x08004f34
 8001958:	200000fc 	.word	0x200000fc
 800195c:	20000330 	.word	0x20000330

08001960 <ADC1_2_IRQHandler>:
 8001960:	e7fe      	b.n	8001960 <ADC1_2_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_Init+0x28>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x28>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f923 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	200f      	movs	r0, #15
 800197c:	f000 f808 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fcb4 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f93b 	bl	8001c2a <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f000 f903 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000084 	.word	0x20000084
 80019e8:	20000094 	.word	0x20000094
 80019ec:	20000090 	.word	0x20000090

080019f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x1c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x20>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_IncTick+0x20>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000094 	.word	0x20000094
 8001a10:	2000031c 	.word	0x2000031c

08001a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <HAL_GetTick+0x10>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	2000031c 	.word	0x2000031c

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <__NVIC_EnableIRQ+0x34>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff90 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff2d 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff42 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff90 	bl	8001b18 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5f 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff35 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d008      	beq.n	8001c6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e020      	b.n	8001cae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020e 	bic.w	r2, r2, #14
 8001c7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d005      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	e051      	b.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 020e 	bic.w	r2, r2, #14
 8001cea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_DMA_Abort_IT+0xd4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d029      	beq.n	8001d5a <HAL_DMA_Abort_IT+0xa2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_DMA_Abort_IT+0xd8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <HAL_DMA_Abort_IT+0x9e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_DMA_Abort_IT+0xdc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01a      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x98>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <HAL_DMA_Abort_IT+0xe0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d012      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x92>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_DMA_Abort_IT+0xe4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00a      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x8c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_DMA_Abort_IT+0xe8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d102      	bne.n	8001d3e <HAL_DMA_Abort_IT+0x86>
 8001d38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d3c:	e00e      	b.n	8001d5c <HAL_DMA_Abort_IT+0xa4>
 8001d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d42:	e00b      	b.n	8001d5c <HAL_DMA_Abort_IT+0xa4>
 8001d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d48:	e008      	b.n	8001d5c <HAL_DMA_Abort_IT+0xa4>
 8001d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4e:	e005      	b.n	8001d5c <HAL_DMA_Abort_IT+0xa4>
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	e002      	b.n	8001d5c <HAL_DMA_Abort_IT+0xa4>
 8001d56:	2310      	movs	r3, #16
 8001d58:	e000      	b.n	8001d5c <HAL_DMA_Abort_IT+0xa4>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_DMA_Abort_IT+0xec>)
 8001d5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
    } 
  }
  return status;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40020008 	.word	0x40020008
 8001d90:	4002001c 	.word	0x4002001c
 8001d94:	40020030 	.word	0x40020030
 8001d98:	40020044 	.word	0x40020044
 8001d9c:	40020058 	.word	0x40020058
 8001da0:	4002006c 	.word	0x4002006c
 8001da4:	40020000 	.word	0x40020000

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b08b      	sub	sp, #44	; 0x2c
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e169      	b.n	8002090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8158 	bne.w	800208a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a9a      	ldr	r2, [pc, #616]	; (8002048 <HAL_GPIO_Init+0x2a0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d05e      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001de4:	4a98      	ldr	r2, [pc, #608]	; (8002048 <HAL_GPIO_Init+0x2a0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d875      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001dea:	4a98      	ldr	r2, [pc, #608]	; (800204c <HAL_GPIO_Init+0x2a4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d058      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001df0:	4a96      	ldr	r2, [pc, #600]	; (800204c <HAL_GPIO_Init+0x2a4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d86f      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001df6:	4a96      	ldr	r2, [pc, #600]	; (8002050 <HAL_GPIO_Init+0x2a8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d052      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a94      	ldr	r2, [pc, #592]	; (8002050 <HAL_GPIO_Init+0x2a8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d869      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e02:	4a94      	ldr	r2, [pc, #592]	; (8002054 <HAL_GPIO_Init+0x2ac>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d04c      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001e08:	4a92      	ldr	r2, [pc, #584]	; (8002054 <HAL_GPIO_Init+0x2ac>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d863      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a92      	ldr	r2, [pc, #584]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d046      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001e14:	4a90      	ldr	r2, [pc, #576]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d85d      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d82a      	bhi.n	8001e74 <HAL_GPIO_Init+0xcc>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d859      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <HAL_GPIO_Init+0x80>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001e7d 	.word	0x08001e7d
 8001e30:	08001e8f 	.word	0x08001e8f
 8001e34:	08001ed1 	.word	0x08001ed1
 8001e38:	08001ed7 	.word	0x08001ed7
 8001e3c:	08001ed7 	.word	0x08001ed7
 8001e40:	08001ed7 	.word	0x08001ed7
 8001e44:	08001ed7 	.word	0x08001ed7
 8001e48:	08001ed7 	.word	0x08001ed7
 8001e4c:	08001ed7 	.word	0x08001ed7
 8001e50:	08001ed7 	.word	0x08001ed7
 8001e54:	08001ed7 	.word	0x08001ed7
 8001e58:	08001ed7 	.word	0x08001ed7
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001ed7 	.word	0x08001ed7
 8001e64:	08001ed7 	.word	0x08001ed7
 8001e68:	08001ed7 	.word	0x08001ed7
 8001e6c:	08001e85 	.word	0x08001e85
 8001e70:	08001e99 	.word	0x08001e99
 8001e74:	4a79      	ldr	r2, [pc, #484]	; (800205c <HAL_GPIO_Init+0x2b4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7a:	e02c      	b.n	8001ed6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e029      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e024      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	3308      	adds	r3, #8
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e01f      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e01a      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e013      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	611a      	str	r2, [r3, #16]
          break;
 8001ec2:	e009      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	615a      	str	r2, [r3, #20]
          break;
 8001ece:	e003      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          break;
 8001ed6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d801      	bhi.n	8001ee2 <HAL_GPIO_Init+0x13a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_Init+0x13e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2bff      	cmp	r3, #255	; 0xff
 8001eec:	d802      	bhi.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x152>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3b08      	subs	r3, #8
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	210f      	movs	r1, #15
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80b1 	beq.w	800208a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f28:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <HAL_GPIO_Init+0x2b8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_GPIO_Init+0x2b8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f40:	4a48      	ldr	r2, [pc, #288]	; (8002064 <HAL_GPIO_Init+0x2bc>)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <HAL_GPIO_Init+0x2c0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_GPIO_Init+0x1ec>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3f      	ldr	r2, [pc, #252]	; (800206c <HAL_GPIO_Init+0x2c4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00d      	beq.n	8001f90 <HAL_GPIO_Init+0x1e8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3e      	ldr	r2, [pc, #248]	; (8002070 <HAL_GPIO_Init+0x2c8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <HAL_GPIO_Init+0x1e4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3d      	ldr	r2, [pc, #244]	; (8002074 <HAL_GPIO_Init+0x2cc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_GPIO_Init+0x1e0>
 8001f84:	2303      	movs	r3, #3
 8001f86:	e006      	b.n	8001f96 <HAL_GPIO_Init+0x1ee>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e004      	b.n	8001f96 <HAL_GPIO_Init+0x1ee>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e002      	b.n	8001f96 <HAL_GPIO_Init+0x1ee>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_GPIO_Init+0x1ee>
 8001f94:	2300      	movs	r3, #0
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	f002 0203 	and.w	r2, r2, #3
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	4093      	lsls	r3, r2
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa6:	492f      	ldr	r1, [pc, #188]	; (8002064 <HAL_GPIO_Init+0x2bc>)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	492c      	ldr	r1, [pc, #176]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4928      	ldr	r1, [pc, #160]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4922      	ldr	r1, [pc, #136]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	491e      	ldr	r1, [pc, #120]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8002000:	4013      	ands	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4918      	ldr	r1, [pc, #96]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	43db      	mvns	r3, r3
 8002026:	4914      	ldr	r1, [pc, #80]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8002028:	4013      	ands	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d021      	beq.n	800207c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	490e      	ldr	r1, [pc, #56]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e021      	b.n	800208a <HAL_GPIO_Init+0x2e2>
 8002046:	bf00      	nop
 8002048:	10320000 	.word	0x10320000
 800204c:	10310000 	.word	0x10310000
 8002050:	10220000 	.word	0x10220000
 8002054:	10210000 	.word	0x10210000
 8002058:	10120000 	.word	0x10120000
 800205c:	10110000 	.word	0x10110000
 8002060:	40021000 	.word	0x40021000
 8002064:	40010000 	.word	0x40010000
 8002068:	40010800 	.word	0x40010800
 800206c:	40010c00 	.word	0x40010c00
 8002070:	40011000 	.word	0x40011000
 8002074:	40011400 	.word	0x40011400
 8002078:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_GPIO_Init+0x304>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	43db      	mvns	r3, r3
 8002084:	4909      	ldr	r1, [pc, #36]	; (80020ac <HAL_GPIO_Init+0x304>)
 8002086:	4013      	ands	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3301      	adds	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	f47f ae8e 	bne.w	8001dbc <HAL_GPIO_Init+0x14>
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	372c      	adds	r7, #44	; 0x2c
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e001      	b.n	80020d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	807b      	strh	r3, [r7, #2]
 80020ea:	4613      	mov	r3, r2
 80020ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ee:	787b      	ldrb	r3, [r7, #1]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020fa:	e003      	b.n	8002104 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	041a      	lsls	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43d9      	mvns	r1, r3
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e26c      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002160:	4b92      	ldr	r3, [pc, #584]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00c      	beq.n	8002186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800216c:	4b8f      	ldr	r3, [pc, #572]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d112      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
 8002178:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d10b      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002186:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06c      	beq.n	800226c <HAL_RCC_OscConfig+0x12c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d168      	bne.n	800226c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e246      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x76>
 80021a8:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a7f      	ldr	r2, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e02e      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b78      	ldr	r3, [pc, #480]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xbc>
 80021e2:	4b72      	ldr	r3, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a71      	ldr	r2, [pc, #452]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a67      	ldr	r2, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fbfa 	bl	8001a14 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fbf6 	bl	8001a14 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1fa      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xe4>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fbe6 	bl	8001a14 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fbe2 	bl	8001a14 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1e6      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x10c>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
 8002292:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1ba      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4939      	ldr	r1, [pc, #228]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fb9b 	bl	8001a14 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fb97 	bl	8001a14 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e19b      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4927      	ldr	r1, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fb7a 	bl	8001a14 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fb76 	bl	8001a14 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e17a      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d03a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d019      	beq.n	800238a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7ff fb5a 	bl	8001a14 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fb56 	bl	8001a14 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e15a      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 facc 	bl	8002920 <RCC_Delay>
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7ff fb40 	bl	8001a14 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002396:	e00f      	b.n	80023b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff fb3c 	bl	8001a14 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d908      	bls.n	80023b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e140      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	42420000 	.word	0x42420000
 80023b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e9      	bne.n	8002398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a6 	beq.w	800251e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b97      	ldr	r3, [pc, #604]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b94      	ldr	r3, [pc, #592]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a93      	ldr	r2, [pc, #588]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b91      	ldr	r3, [pc, #580]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b8e      	ldr	r3, [pc, #568]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240a:	4b8b      	ldr	r3, [pc, #556]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a8a      	ldr	r2, [pc, #552]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7ff fafd 	bl	8001a14 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff faf9 	bl	8001a14 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0fd      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x312>
 8002444:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e02d      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x334>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a72      	ldr	r2, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x356>
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002496:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b64      	ldr	r3, [pc, #400]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a63      	ldr	r2, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff faad 	bl	8001a14 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff faa9 	bl	8001a14 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0ab      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x37e>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fa97 	bl	8001a14 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7ff fa93 	bl	8001a14 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e095      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b48      	ldr	r3, [pc, #288]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a47      	ldr	r2, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8081 	beq.w	800262a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d061      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d146      	bne.n	80025ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x4fc>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff fa67 	bl	8001a14 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff fa63 	bl	8001a14 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e067      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	492d      	ldr	r1, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a19      	ldr	r1, [r3, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	430b      	orrs	r3, r1
 8002596:	4927      	ldr	r1, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x4fc>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff fa37 	bl	8001a14 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7ff fa33 	bl	8001a14 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e037      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x46a>
 80025c8:	e02f      	b.n	800262a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_RCC_OscConfig+0x4fc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fa20 	bl	8001a14 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fa1c 	bl	8001a14 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e020      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x498>
 80025f6:	e018      	b.n	800262a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e013      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	429a      	cmp	r2, r3
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	42420060 	.word	0x42420060

08002640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0d0      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4965      	ldr	r1, [pc, #404]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b8      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	494d      	ldr	r1, [pc, #308]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d040      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d115      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e073      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06b      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4936      	ldr	r1, [pc, #216]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff f970 	bl	8001a14 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7ff f96c 	bl	8001a14 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e053      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d210      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4922      	ldr	r1, [pc, #136]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4916      	ldr	r1, [pc, #88]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 f821 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	5ccb      	ldrb	r3, [r1, r3]
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1cc>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1d0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8ce 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40022000 	.word	0x40022000
 8002804:	40021000 	.word	0x40021000
 8002808:	08004ecc 	.word	0x08004ecc
 800280c:	20000084 	.word	0x20000084
 8002810:	20000090 	.word	0x20000090

08002814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x30>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x36>
 8002842:	e027      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002846:	613b      	str	r3, [r7, #16]
      break;
 8002848:	e027      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	0c5b      	lsrs	r3, r3, #17
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002876:	fb02 f203 	mul.w	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e004      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	613b      	str	r3, [r7, #16]
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002896:	613b      	str	r3, [r7, #16]
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	693b      	ldr	r3, [r7, #16]
}
 800289c:	4618      	mov	r0, r3
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	007a1200 	.word	0x007a1200
 80028b0:	08004ee4 	.word	0x08004ee4
 80028b4:	08004ef4 	.word	0x08004ef4
 80028b8:	003d0900 	.word	0x003d0900

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b02      	ldr	r3, [pc, #8]	; (80028cc <HAL_RCC_GetHCLKFreq+0x10>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000084 	.word	0x20000084

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d4:	f7ff fff2 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004edc 	.word	0x08004edc

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028fc:	f7ff ffde 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0adb      	lsrs	r3, r3, #11
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08004edc 	.word	0x08004edc

08002920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <RCC_Delay+0x34>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <RCC_Delay+0x38>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0a5b      	lsrs	r3, r3, #9
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800293c:	bf00      	nop
  }
  while (Delay --);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	60fa      	str	r2, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <RCC_Delay+0x1c>
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	20000084 	.word	0x20000084
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e041      	b.n	80029f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fce4 	bl	8001350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 fc30 	bl	8003200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e03a      	b.n	8002a8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_TIM_Base_Start_IT+0x98>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x58>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d009      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x58>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x58>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_TIM_Base_Start_IT+0xa0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d010      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	e007      	b.n	8002a88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800

08002aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e041      	b.n	8002b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f839 	bl	8002b3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 fb8e 	bl	8003200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_TIM_PWM_Start+0x24>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e022      	b.n	8002bba <HAL_TIM_PWM_Start+0x6a>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d109      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x3e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e015      	b.n	8002bba <HAL_TIM_PWM_Start+0x6a>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d109      	bne.n	8002ba8 <HAL_TIM_PWM_Start+0x58>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e008      	b.n	8002bba <HAL_TIM_PWM_Start+0x6a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e05e      	b.n	8002c80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0x82>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd0:	e013      	b.n	8002bfa <HAL_TIM_PWM_Start+0xaa>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x92>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be0:	e00b      	b.n	8002bfa <HAL_TIM_PWM_Start+0xaa>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0xa2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf0:	e003      	b.n	8002bfa <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fd7c 	bl	8003700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <HAL_TIM_PWM_Start+0x138>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_PWM_Start+0x138>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_TIM_PWM_Start+0xfa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d009      	beq.n	8002c4a <HAL_TIM_PWM_Start+0xfa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <HAL_TIM_PWM_Start+0x13c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_TIM_PWM_Start+0xfa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <HAL_TIM_PWM_Start+0x140>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d111      	bne.n	8002c6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d010      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	e007      	b.n	8002c7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800

08002c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0202 	mvn.w	r2, #2
 8002cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa76 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa69 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa78 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0204 	mvn.w	r2, #4
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa4c 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa3f 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa4e 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0208 	mvn.w	r2, #8
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa22 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa15 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fa24 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d122      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d11b      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9f8 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9eb 	bl	80031b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f9fa 	bl	80031da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f864 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fce9 	bl	8003816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f9be 	bl	80031ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0220 	mvn.w	r2, #32
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fcb4 	bl	8003804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0ae      	b.n	8003020 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	f200 809f 	bhi.w	8003010 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08003011 	.word	0x08003011
 8002ee0:	08003011 	.word	0x08003011
 8002ee4:	08003011 	.word	0x08003011
 8002ee8:	08002f4d 	.word	0x08002f4d
 8002eec:	08003011 	.word	0x08003011
 8002ef0:	08003011 	.word	0x08003011
 8002ef4:	08003011 	.word	0x08003011
 8002ef8:	08002f8f 	.word	0x08002f8f
 8002efc:	08003011 	.word	0x08003011
 8002f00:	08003011 	.word	0x08003011
 8002f04:	08003011 	.word	0x08003011
 8002f08:	08002fcf 	.word	0x08002fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f9d6 	bl	80032c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	619a      	str	r2, [r3, #24]
      break;
 8002f4a:	e064      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fa1c 	bl	8003390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6999      	ldr	r1, [r3, #24]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	619a      	str	r2, [r3, #24]
      break;
 8002f8c:	e043      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fa65 	bl	8003464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0208 	orr.w	r2, r2, #8
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	61da      	str	r2, [r3, #28]
      break;
 8002fcc:	e023      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 faaf 	bl	8003538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69d9      	ldr	r1, [r3, #28]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	61da      	str	r2, [r3, #28]
      break;
 800300e:	e002      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
      break;
 8003014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_TIM_ConfigClockSource+0x1c>
 8003040:	2302      	movs	r3, #2
 8003042:	e0b4      	b.n	80031ae <HAL_TIM_ConfigClockSource+0x186>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307c:	d03e      	beq.n	80030fc <HAL_TIM_ConfigClockSource+0xd4>
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	f200 8087 	bhi.w	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308a:	f000 8086 	beq.w	800319a <HAL_TIM_ConfigClockSource+0x172>
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	d87f      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b70      	cmp	r3, #112	; 0x70
 8003096:	d01a      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xa6>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d87b      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b60      	cmp	r3, #96	; 0x60
 800309e:	d050      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x11a>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d877      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b50      	cmp	r3, #80	; 0x50
 80030a6:	d03c      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0xfa>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d873      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d058      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x13a>
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d86f      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b30      	cmp	r3, #48	; 0x30
 80030b6:	d064      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x15a>
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d86b      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d060      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x15a>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d867      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05c      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d05a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	e062      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f000 faf0 	bl	80036c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	609a      	str	r2, [r3, #8]
      break;
 80030fa:	e04f      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f000 fad9 	bl	80036c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311e:	609a      	str	r2, [r3, #8]
      break;
 8003120:	e03c      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	461a      	mov	r2, r3
 8003130:	f000 fa50 	bl	80035d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2150      	movs	r1, #80	; 0x50
 800313a:	4618      	mov	r0, r3
 800313c:	f000 faa7 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003140:	e02c      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	461a      	mov	r2, r3
 8003150:	f000 fa6e 	bl	8003630 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2160      	movs	r1, #96	; 0x60
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fa97 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003160:	e01c      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	461a      	mov	r2, r3
 8003170:	f000 fa30 	bl	80035d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2140      	movs	r1, #64	; 0x40
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fa87 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003180:	e00c      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f000 fa7e 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003192:	e003      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      break;
 8003198:	e000      	b.n	800319c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800319a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
	...

08003200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a26      	ldr	r2, [pc, #152]	; (80032bc <TIM_Base_SetConfig+0xbc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <TIM_Base_SetConfig+0xc0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <TIM_Base_SetConfig+0xbc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <TIM_Base_SetConfig+0xc0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d108      	bne.n	8003274 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d103      	bne.n	80032a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800

080032c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 0201 	bic.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 0302 	bic.w	r3, r3, #2
 800330c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <TIM_OC1_SetConfig+0xc8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10c      	bne.n	800333a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0308 	bic.w	r3, r3, #8
 8003326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <TIM_OC1_SetConfig+0xc8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00

08003390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f023 0210 	bic.w	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_OC2_SetConfig+0xd0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10d      	bne.n	800340c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <TIM_OC2_SetConfig+0xd0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d113      	bne.n	800343c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <TIM_OC3_SetConfig+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10d      	bne.n	80034de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <TIM_OC3_SetConfig+0xd0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d113      	bne.n	800350e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40012c00 	.word	0x40012c00

08003538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <TIM_OC4_SetConfig+0x98>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d109      	bne.n	80035ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	031b      	lsls	r3, r3, #12
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f043 0307 	orr.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	021a      	lsls	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	609a      	str	r2, [r3, #8]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e046      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e042      	b.n	80038c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fdf0 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fdc5 	bl	80043fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d16d      	bne.n	80039c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Transmit+0x2c>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e066      	b.n	80039c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003906:	f7fe f885 	bl	8001a14 <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d108      	bne.n	8003934 <HAL_UART_Transmit+0x6c>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e003      	b.n	800393c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800393c:	e02a      	b.n	8003994 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fb14 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e036      	b.n	80039c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	3302      	adds	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e007      	b.n	8003986 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3301      	adds	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1cf      	bne.n	800393e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2140      	movs	r1, #64	; 0x40
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fae4 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e006      	b.n	80039c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	4613      	mov	r3, r2
 80039da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d112      	bne.n	8003a0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Receive_IT+0x26>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00b      	b.n	8003a10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	461a      	mov	r2, r3
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fb24 	bl	8004052 <UART_Start_Receive_IT>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	e000      	b.n	8003a10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0ba      	sub	sp, #232	; 0xe8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_UART_IRQHandler+0x66>
 8003a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fc01 	bl	800427e <UART_Receive_IT>
      return;
 8003a7c:	e25b      	b.n	8003f36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80de 	beq.w	8003c44 <HAL_UART_IRQHandler+0x22c>
 8003a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80d1 	beq.w	8003c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xae>
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_UART_IRQHandler+0xd2>
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f043 0202 	orr.w	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_UART_IRQHandler+0xf6>
 8003af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0204 	orr.w	r2, r3, #4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d011      	beq.n	8003b3e <HAL_UART_IRQHandler+0x126>
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f043 0208 	orr.w	r2, r3, #8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 81f2 	beq.w	8003f2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_UART_IRQHandler+0x14e>
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb8c 	bl	800427e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_UART_IRQHandler+0x17a>
 8003b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04f      	beq.n	8003c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fa96 	bl	80040c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d041      	beq.n	8003c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d9      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d013      	beq.n	8003c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_UART_IRQHandler+0x3e0>)
 8003c00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f856 	bl	8001cb8 <HAL_DMA_Abort_IT>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	e00e      	b.n	8003c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f993 	bl	8003f4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00a      	b.n	8003c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f98f 	bl	8003f4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e006      	b.n	8003c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f98b 	bl	8003f4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c3e:	e175      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	bf00      	nop
    return;
 8003c42:	e173      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	f040 814f 	bne.w	8003eec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8148 	beq.w	8003eec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8141 	beq.w	8003eec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80b6 	beq.w	8003dfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8145 	beq.w	8003f30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	f080 813e 	bcs.w	8003f30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	f000 8088 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cf4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1d9      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3314      	adds	r3, #20
 8003d1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e1      	bne.n	8003d14 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e3      	bne.n	8003d50 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da8:	f023 0310 	bic.w	r3, r3, #16
 8003dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dba:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e3      	bne.n	8003d96 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd ff35 	bl	8001c42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8b6 	bl	8003f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df4:	e09c      	b.n	8003f30 <HAL_UART_IRQHandler+0x518>
 8003df6:	bf00      	nop
 8003df8:	08004189 	.word	0x08004189
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 808e 	beq.w	8003f34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8089 	beq.w	8003f34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e46:	647a      	str	r2, [r7, #68]	; 0x44
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e3      	bne.n	8003e5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ec4:	61fa      	str	r2, [r7, #28]
 8003ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e3      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f83b 	bl	8003f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eea:	e023      	b.n	8003f34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_UART_IRQHandler+0x4f4>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f953 	bl	80041b0 <UART_Transmit_IT>
    return;
 8003f0a:	e014      	b.n	8003f36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <HAL_UART_IRQHandler+0x51e>
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f992 	bl	800424e <UART_EndTransmit_IT>
    return;
 8003f2a:	e004      	b.n	8003f36 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f34:	bf00      	nop
  }
}
 8003f36:	37e8      	adds	r7, #232	; 0xe8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b090      	sub	sp, #64	; 0x40
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f86:	e050      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d04c      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f96:	f7fd fd3d 	bl	8001a14 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d241      	bcs.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ffa:	623a      	str	r2, [r7, #32]
 8003ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	69f9      	ldr	r1, [r7, #28]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	61bb      	str	r3, [r7, #24]
   return(result);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e00f      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d09f      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3740      	adds	r7, #64	; 0x40
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	4613      	mov	r3, r2
 800405e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2222      	movs	r2, #34	; 0x22
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004096:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0220 	orr.w	r2, r2, #32
 80040b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b095      	sub	sp, #84	; 0x54
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ec:	643a      	str	r2, [r7, #64]	; 0x40
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3314      	adds	r3, #20
 8004106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b01      	cmp	r3, #1
 800413a:	d119      	bne.n	8004170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	60bb      	str	r3, [r7, #8]
   return(result);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	647b      	str	r3, [r7, #68]	; 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415c:	61ba      	str	r2, [r7, #24]
 800415e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6979      	ldr	r1, [r7, #20]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	613b      	str	r3, [r7, #16]
   return(result);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800417e:	bf00      	nop
 8004180:	3754      	adds	r7, #84	; 0x54
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff fed3 	bl	8003f4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b21      	cmp	r3, #33	; 0x21
 80041c2:	d13e      	bne.n	8004242 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d114      	bne.n	80041f8 <UART_Transmit_IT+0x48>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d110      	bne.n	80041f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]
 80041f6:	e008      	b.n	800420a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	1c59      	adds	r1, r3, #1
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6211      	str	r1, [r2, #32]
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4619      	mov	r1, r3
 8004218:	84d1      	strh	r1, [r2, #38]	; 0x26
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800422c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fe64 	bl	8003f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b08c      	sub	sp, #48	; 0x30
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b22      	cmp	r3, #34	; 0x22
 8004290:	f040 80ae 	bne.w	80043f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429c:	d117      	bne.n	80042ce <UART_Receive_IT+0x50>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d113      	bne.n	80042ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	1c9a      	adds	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
 80042cc:	e026      	b.n	800431c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d007      	beq.n	80042f2 <UART_Receive_IT+0x74>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <UART_Receive_IT+0x82>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e008      	b.n	8004312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430c:	b2da      	uxtb	r2, r3
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800432c:	2b00      	cmp	r3, #0
 800432e:	d15d      	bne.n	80043ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0220 	bic.w	r2, r2, #32
 800433e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800434e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	2b01      	cmp	r3, #1
 8004374:	d135      	bne.n	80043e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	613b      	str	r3, [r7, #16]
   return(result);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 0310 	bic.w	r3, r3, #16
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439c:	623a      	str	r2, [r7, #32]
 800439e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	69f9      	ldr	r1, [r7, #28]
 80043a2:	6a3a      	ldr	r2, [r7, #32]
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d10a      	bne.n	80043d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fdc0 	bl	8003f60 <HAL_UARTEx_RxEventCallback>
 80043e0:	e002      	b.n	80043e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc fb72 	bl	8000acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e002      	b.n	80043f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004436:	f023 030c 	bic.w	r3, r3, #12
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	430b      	orrs	r3, r1
 8004442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <UART_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe fa48 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	e002      	b.n	8004472 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe fa30 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8004470:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	0119      	lsls	r1, r3, #4
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <UART_SetConfig+0x118>)
 80044aa:	fba3 0302 	umull	r0, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2064      	movs	r0, #100	; 0x64
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <UART_SetConfig+0x118>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	4419      	add	r1, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <UART_SetConfig+0x118>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2064      	movs	r0, #100	; 0x64
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	440a      	add	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40013800 	.word	0x40013800
 8004514:	51eb851f 	.word	0x51eb851f

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000098 	.word	0x20000098

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	2600      	movs	r6, #0
 8004528:	4d0c      	ldr	r5, [pc, #48]	; (800455c <__libc_init_array+0x38>)
 800452a:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452c:	1b64      	subs	r4, r4, r5
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	f000 fc5c 	bl	8004df0 <_init>
 8004538:	2600      	movs	r6, #0
 800453a:	4d0a      	ldr	r5, [pc, #40]	; (8004564 <__libc_init_array+0x40>)
 800453c:	4c0a      	ldr	r4, [pc, #40]	; (8004568 <__libc_init_array+0x44>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	08004f2c 	.word	0x08004f2c
 8004560:	08004f2c 	.word	0x08004f2c
 8004564:	08004f2c 	.word	0x08004f2c
 8004568:	08004f30 	.word	0x08004f30

0800456c <memset>:
 800456c:	4603      	mov	r3, r0
 800456e:	4402      	add	r2, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <siprintf>:
 800457c:	b40e      	push	{r1, r2, r3}
 800457e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004582:	b500      	push	{lr}
 8004584:	b09c      	sub	sp, #112	; 0x70
 8004586:	ab1d      	add	r3, sp, #116	; 0x74
 8004588:	9002      	str	r0, [sp, #8]
 800458a:	9006      	str	r0, [sp, #24]
 800458c:	9107      	str	r1, [sp, #28]
 800458e:	9104      	str	r1, [sp, #16]
 8004590:	4808      	ldr	r0, [pc, #32]	; (80045b4 <siprintf+0x38>)
 8004592:	4909      	ldr	r1, [pc, #36]	; (80045b8 <siprintf+0x3c>)
 8004594:	f853 2b04 	ldr.w	r2, [r3], #4
 8004598:	9105      	str	r1, [sp, #20]
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	a902      	add	r1, sp, #8
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	f000 f868 	bl	8004674 <_svfiprintf_r>
 80045a4:	2200      	movs	r2, #0
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	b01c      	add	sp, #112	; 0x70
 80045ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b0:	b003      	add	sp, #12
 80045b2:	4770      	bx	lr
 80045b4:	20000098 	.word	0x20000098
 80045b8:	ffff0208 	.word	0xffff0208

080045bc <__ssputs_r>:
 80045bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	688e      	ldr	r6, [r1, #8]
 80045c2:	4682      	mov	sl, r0
 80045c4:	429e      	cmp	r6, r3
 80045c6:	460c      	mov	r4, r1
 80045c8:	4690      	mov	r8, r2
 80045ca:	461f      	mov	r7, r3
 80045cc:	d838      	bhi.n	8004640 <__ssputs_r+0x84>
 80045ce:	898a      	ldrh	r2, [r1, #12]
 80045d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045d4:	d032      	beq.n	800463c <__ssputs_r+0x80>
 80045d6:	6825      	ldr	r5, [r4, #0]
 80045d8:	6909      	ldr	r1, [r1, #16]
 80045da:	3301      	adds	r3, #1
 80045dc:	eba5 0901 	sub.w	r9, r5, r1
 80045e0:	6965      	ldr	r5, [r4, #20]
 80045e2:	444b      	add	r3, r9
 80045e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045ec:	106d      	asrs	r5, r5, #1
 80045ee:	429d      	cmp	r5, r3
 80045f0:	bf38      	it	cc
 80045f2:	461d      	movcc	r5, r3
 80045f4:	0553      	lsls	r3, r2, #21
 80045f6:	d531      	bpl.n	800465c <__ssputs_r+0xa0>
 80045f8:	4629      	mov	r1, r5
 80045fa:	f000 fb53 	bl	8004ca4 <_malloc_r>
 80045fe:	4606      	mov	r6, r0
 8004600:	b950      	cbnz	r0, 8004618 <__ssputs_r+0x5c>
 8004602:	230c      	movs	r3, #12
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	f8ca 3000 	str.w	r3, [sl]
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004618:	464a      	mov	r2, r9
 800461a:	6921      	ldr	r1, [r4, #16]
 800461c:	f000 face 	bl	8004bbc <memcpy>
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462a:	81a3      	strh	r3, [r4, #12]
 800462c:	6126      	str	r6, [r4, #16]
 800462e:	444e      	add	r6, r9
 8004630:	6026      	str	r6, [r4, #0]
 8004632:	463e      	mov	r6, r7
 8004634:	6165      	str	r5, [r4, #20]
 8004636:	eba5 0509 	sub.w	r5, r5, r9
 800463a:	60a5      	str	r5, [r4, #8]
 800463c:	42be      	cmp	r6, r7
 800463e:	d900      	bls.n	8004642 <__ssputs_r+0x86>
 8004640:	463e      	mov	r6, r7
 8004642:	4632      	mov	r2, r6
 8004644:	4641      	mov	r1, r8
 8004646:	6820      	ldr	r0, [r4, #0]
 8004648:	f000 fac6 	bl	8004bd8 <memmove>
 800464c:	68a3      	ldr	r3, [r4, #8]
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	1b9b      	subs	r3, r3, r6
 8004652:	4432      	add	r2, r6
 8004654:	2000      	movs	r0, #0
 8004656:	60a3      	str	r3, [r4, #8]
 8004658:	6022      	str	r2, [r4, #0]
 800465a:	e7db      	b.n	8004614 <__ssputs_r+0x58>
 800465c:	462a      	mov	r2, r5
 800465e:	f000 fb7b 	bl	8004d58 <_realloc_r>
 8004662:	4606      	mov	r6, r0
 8004664:	2800      	cmp	r0, #0
 8004666:	d1e1      	bne.n	800462c <__ssputs_r+0x70>
 8004668:	4650      	mov	r0, sl
 800466a:	6921      	ldr	r1, [r4, #16]
 800466c:	f000 face 	bl	8004c0c <_free_r>
 8004670:	e7c7      	b.n	8004602 <__ssputs_r+0x46>
	...

08004674 <_svfiprintf_r>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	4698      	mov	r8, r3
 800467a:	898b      	ldrh	r3, [r1, #12]
 800467c:	4607      	mov	r7, r0
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	460d      	mov	r5, r1
 8004682:	4614      	mov	r4, r2
 8004684:	b09d      	sub	sp, #116	; 0x74
 8004686:	d50e      	bpl.n	80046a6 <_svfiprintf_r+0x32>
 8004688:	690b      	ldr	r3, [r1, #16]
 800468a:	b963      	cbnz	r3, 80046a6 <_svfiprintf_r+0x32>
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	f000 fb09 	bl	8004ca4 <_malloc_r>
 8004692:	6028      	str	r0, [r5, #0]
 8004694:	6128      	str	r0, [r5, #16]
 8004696:	b920      	cbnz	r0, 80046a2 <_svfiprintf_r+0x2e>
 8004698:	230c      	movs	r3, #12
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e0d1      	b.n	8004846 <_svfiprintf_r+0x1d2>
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	616b      	str	r3, [r5, #20]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9309      	str	r3, [sp, #36]	; 0x24
 80046aa:	2320      	movs	r3, #32
 80046ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046b0:	2330      	movs	r3, #48	; 0x30
 80046b2:	f04f 0901 	mov.w	r9, #1
 80046b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004860 <_svfiprintf_r+0x1ec>
 80046be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046c2:	4623      	mov	r3, r4
 80046c4:	469a      	mov	sl, r3
 80046c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ca:	b10a      	cbz	r2, 80046d0 <_svfiprintf_r+0x5c>
 80046cc:	2a25      	cmp	r2, #37	; 0x25
 80046ce:	d1f9      	bne.n	80046c4 <_svfiprintf_r+0x50>
 80046d0:	ebba 0b04 	subs.w	fp, sl, r4
 80046d4:	d00b      	beq.n	80046ee <_svfiprintf_r+0x7a>
 80046d6:	465b      	mov	r3, fp
 80046d8:	4622      	mov	r2, r4
 80046da:	4629      	mov	r1, r5
 80046dc:	4638      	mov	r0, r7
 80046de:	f7ff ff6d 	bl	80045bc <__ssputs_r>
 80046e2:	3001      	adds	r0, #1
 80046e4:	f000 80aa 	beq.w	800483c <_svfiprintf_r+0x1c8>
 80046e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ea:	445a      	add	r2, fp
 80046ec:	9209      	str	r2, [sp, #36]	; 0x24
 80046ee:	f89a 3000 	ldrb.w	r3, [sl]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a2 	beq.w	800483c <_svfiprintf_r+0x1c8>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004702:	f10a 0a01 	add.w	sl, sl, #1
 8004706:	9304      	str	r3, [sp, #16]
 8004708:	9307      	str	r3, [sp, #28]
 800470a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800470e:	931a      	str	r3, [sp, #104]	; 0x68
 8004710:	4654      	mov	r4, sl
 8004712:	2205      	movs	r2, #5
 8004714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004718:	4851      	ldr	r0, [pc, #324]	; (8004860 <_svfiprintf_r+0x1ec>)
 800471a:	f000 fa41 	bl	8004ba0 <memchr>
 800471e:	9a04      	ldr	r2, [sp, #16]
 8004720:	b9d8      	cbnz	r0, 800475a <_svfiprintf_r+0xe6>
 8004722:	06d0      	lsls	r0, r2, #27
 8004724:	bf44      	itt	mi
 8004726:	2320      	movmi	r3, #32
 8004728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800472c:	0711      	lsls	r1, r2, #28
 800472e:	bf44      	itt	mi
 8004730:	232b      	movmi	r3, #43	; 0x2b
 8004732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004736:	f89a 3000 	ldrb.w	r3, [sl]
 800473a:	2b2a      	cmp	r3, #42	; 0x2a
 800473c:	d015      	beq.n	800476a <_svfiprintf_r+0xf6>
 800473e:	4654      	mov	r4, sl
 8004740:	2000      	movs	r0, #0
 8004742:	f04f 0c0a 	mov.w	ip, #10
 8004746:	9a07      	ldr	r2, [sp, #28]
 8004748:	4621      	mov	r1, r4
 800474a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800474e:	3b30      	subs	r3, #48	; 0x30
 8004750:	2b09      	cmp	r3, #9
 8004752:	d94e      	bls.n	80047f2 <_svfiprintf_r+0x17e>
 8004754:	b1b0      	cbz	r0, 8004784 <_svfiprintf_r+0x110>
 8004756:	9207      	str	r2, [sp, #28]
 8004758:	e014      	b.n	8004784 <_svfiprintf_r+0x110>
 800475a:	eba0 0308 	sub.w	r3, r0, r8
 800475e:	fa09 f303 	lsl.w	r3, r9, r3
 8004762:	4313      	orrs	r3, r2
 8004764:	46a2      	mov	sl, r4
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	e7d2      	b.n	8004710 <_svfiprintf_r+0x9c>
 800476a:	9b03      	ldr	r3, [sp, #12]
 800476c:	1d19      	adds	r1, r3, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	9103      	str	r1, [sp, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	bfbb      	ittet	lt
 8004776:	425b      	neglt	r3, r3
 8004778:	f042 0202 	orrlt.w	r2, r2, #2
 800477c:	9307      	strge	r3, [sp, #28]
 800477e:	9307      	strlt	r3, [sp, #28]
 8004780:	bfb8      	it	lt
 8004782:	9204      	strlt	r2, [sp, #16]
 8004784:	7823      	ldrb	r3, [r4, #0]
 8004786:	2b2e      	cmp	r3, #46	; 0x2e
 8004788:	d10c      	bne.n	80047a4 <_svfiprintf_r+0x130>
 800478a:	7863      	ldrb	r3, [r4, #1]
 800478c:	2b2a      	cmp	r3, #42	; 0x2a
 800478e:	d135      	bne.n	80047fc <_svfiprintf_r+0x188>
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	3402      	adds	r4, #2
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	9203      	str	r2, [sp, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	bfb8      	it	lt
 800479e:	f04f 33ff 	movlt.w	r3, #4294967295
 80047a2:	9305      	str	r3, [sp, #20]
 80047a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004870 <_svfiprintf_r+0x1fc>
 80047a8:	2203      	movs	r2, #3
 80047aa:	4650      	mov	r0, sl
 80047ac:	7821      	ldrb	r1, [r4, #0]
 80047ae:	f000 f9f7 	bl	8004ba0 <memchr>
 80047b2:	b140      	cbz	r0, 80047c6 <_svfiprintf_r+0x152>
 80047b4:	2340      	movs	r3, #64	; 0x40
 80047b6:	eba0 000a 	sub.w	r0, r0, sl
 80047ba:	fa03 f000 	lsl.w	r0, r3, r0
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	3401      	adds	r4, #1
 80047c2:	4303      	orrs	r3, r0
 80047c4:	9304      	str	r3, [sp, #16]
 80047c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ca:	2206      	movs	r2, #6
 80047cc:	4825      	ldr	r0, [pc, #148]	; (8004864 <_svfiprintf_r+0x1f0>)
 80047ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047d2:	f000 f9e5 	bl	8004ba0 <memchr>
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d038      	beq.n	800484c <_svfiprintf_r+0x1d8>
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <_svfiprintf_r+0x1f4>)
 80047dc:	bb1b      	cbnz	r3, 8004826 <_svfiprintf_r+0x1b2>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	3307      	adds	r3, #7
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	3308      	adds	r3, #8
 80047e8:	9303      	str	r3, [sp, #12]
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	4433      	add	r3, r6
 80047ee:	9309      	str	r3, [sp, #36]	; 0x24
 80047f0:	e767      	b.n	80046c2 <_svfiprintf_r+0x4e>
 80047f2:	460c      	mov	r4, r1
 80047f4:	2001      	movs	r0, #1
 80047f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80047fa:	e7a5      	b.n	8004748 <_svfiprintf_r+0xd4>
 80047fc:	2300      	movs	r3, #0
 80047fe:	f04f 0c0a 	mov.w	ip, #10
 8004802:	4619      	mov	r1, r3
 8004804:	3401      	adds	r4, #1
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	4620      	mov	r0, r4
 800480a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800480e:	3a30      	subs	r2, #48	; 0x30
 8004810:	2a09      	cmp	r2, #9
 8004812:	d903      	bls.n	800481c <_svfiprintf_r+0x1a8>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0c5      	beq.n	80047a4 <_svfiprintf_r+0x130>
 8004818:	9105      	str	r1, [sp, #20]
 800481a:	e7c3      	b.n	80047a4 <_svfiprintf_r+0x130>
 800481c:	4604      	mov	r4, r0
 800481e:	2301      	movs	r3, #1
 8004820:	fb0c 2101 	mla	r1, ip, r1, r2
 8004824:	e7f0      	b.n	8004808 <_svfiprintf_r+0x194>
 8004826:	ab03      	add	r3, sp, #12
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	462a      	mov	r2, r5
 800482c:	4638      	mov	r0, r7
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <_svfiprintf_r+0x1f8>)
 8004830:	a904      	add	r1, sp, #16
 8004832:	f3af 8000 	nop.w
 8004836:	1c42      	adds	r2, r0, #1
 8004838:	4606      	mov	r6, r0
 800483a:	d1d6      	bne.n	80047ea <_svfiprintf_r+0x176>
 800483c:	89ab      	ldrh	r3, [r5, #12]
 800483e:	065b      	lsls	r3, r3, #25
 8004840:	f53f af2c 	bmi.w	800469c <_svfiprintf_r+0x28>
 8004844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004846:	b01d      	add	sp, #116	; 0x74
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	ab03      	add	r3, sp, #12
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	462a      	mov	r2, r5
 8004852:	4638      	mov	r0, r7
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <_svfiprintf_r+0x1f8>)
 8004856:	a904      	add	r1, sp, #16
 8004858:	f000 f87c 	bl	8004954 <_printf_i>
 800485c:	e7eb      	b.n	8004836 <_svfiprintf_r+0x1c2>
 800485e:	bf00      	nop
 8004860:	08004ef6 	.word	0x08004ef6
 8004864:	08004f00 	.word	0x08004f00
 8004868:	00000000 	.word	0x00000000
 800486c:	080045bd 	.word	0x080045bd
 8004870:	08004efc 	.word	0x08004efc

08004874 <_printf_common>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	4616      	mov	r6, r2
 800487a:	4699      	mov	r9, r3
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	690b      	ldr	r3, [r1, #16]
 8004880:	4607      	mov	r7, r0
 8004882:	4293      	cmp	r3, r2
 8004884:	bfb8      	it	lt
 8004886:	4613      	movlt	r3, r2
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800488e:	460c      	mov	r4, r1
 8004890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004894:	b10a      	cbz	r2, 800489a <_printf_common+0x26>
 8004896:	3301      	adds	r3, #1
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	6833      	ldrmi	r3, [r6, #0]
 80048a2:	3302      	addmi	r3, #2
 80048a4:	6033      	strmi	r3, [r6, #0]
 80048a6:	6825      	ldr	r5, [r4, #0]
 80048a8:	f015 0506 	ands.w	r5, r5, #6
 80048ac:	d106      	bne.n	80048bc <_printf_common+0x48>
 80048ae:	f104 0a19 	add.w	sl, r4, #25
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	6832      	ldr	r2, [r6, #0]
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dc28      	bgt.n	800490e <_printf_common+0x9a>
 80048bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048c0:	1e13      	subs	r3, r2, #0
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	bf18      	it	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	0692      	lsls	r2, r2, #26
 80048ca:	d42d      	bmi.n	8004928 <_printf_common+0xb4>
 80048cc:	4649      	mov	r1, r9
 80048ce:	4638      	mov	r0, r7
 80048d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d4:	47c0      	blx	r8
 80048d6:	3001      	adds	r0, #1
 80048d8:	d020      	beq.n	800491c <_printf_common+0xa8>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	68e5      	ldr	r5, [r4, #12]
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf18      	it	ne
 80048e6:	2500      	movne	r5, #0
 80048e8:	6832      	ldr	r2, [r6, #0]
 80048ea:	f04f 0600 	mov.w	r6, #0
 80048ee:	68a3      	ldr	r3, [r4, #8]
 80048f0:	bf08      	it	eq
 80048f2:	1aad      	subeq	r5, r5, r2
 80048f4:	6922      	ldr	r2, [r4, #16]
 80048f6:	bf08      	it	eq
 80048f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048fc:	4293      	cmp	r3, r2
 80048fe:	bfc4      	itt	gt
 8004900:	1a9b      	subgt	r3, r3, r2
 8004902:	18ed      	addgt	r5, r5, r3
 8004904:	341a      	adds	r4, #26
 8004906:	42b5      	cmp	r5, r6
 8004908:	d11a      	bne.n	8004940 <_printf_common+0xcc>
 800490a:	2000      	movs	r0, #0
 800490c:	e008      	b.n	8004920 <_printf_common+0xac>
 800490e:	2301      	movs	r3, #1
 8004910:	4652      	mov	r2, sl
 8004912:	4649      	mov	r1, r9
 8004914:	4638      	mov	r0, r7
 8004916:	47c0      	blx	r8
 8004918:	3001      	adds	r0, #1
 800491a:	d103      	bne.n	8004924 <_printf_common+0xb0>
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004924:	3501      	adds	r5, #1
 8004926:	e7c4      	b.n	80048b2 <_printf_common+0x3e>
 8004928:	2030      	movs	r0, #48	; 0x30
 800492a:	18e1      	adds	r1, r4, r3
 800492c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004936:	4422      	add	r2, r4
 8004938:	3302      	adds	r3, #2
 800493a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800493e:	e7c5      	b.n	80048cc <_printf_common+0x58>
 8004940:	2301      	movs	r3, #1
 8004942:	4622      	mov	r2, r4
 8004944:	4649      	mov	r1, r9
 8004946:	4638      	mov	r0, r7
 8004948:	47c0      	blx	r8
 800494a:	3001      	adds	r0, #1
 800494c:	d0e6      	beq.n	800491c <_printf_common+0xa8>
 800494e:	3601      	adds	r6, #1
 8004950:	e7d9      	b.n	8004906 <_printf_common+0x92>
	...

08004954 <_printf_i>:
 8004954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	460c      	mov	r4, r1
 800495a:	7e27      	ldrb	r7, [r4, #24]
 800495c:	4691      	mov	r9, r2
 800495e:	2f78      	cmp	r7, #120	; 0x78
 8004960:	4680      	mov	r8, r0
 8004962:	469a      	mov	sl, r3
 8004964:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800496a:	d807      	bhi.n	800497c <_printf_i+0x28>
 800496c:	2f62      	cmp	r7, #98	; 0x62
 800496e:	d80a      	bhi.n	8004986 <_printf_i+0x32>
 8004970:	2f00      	cmp	r7, #0
 8004972:	f000 80d9 	beq.w	8004b28 <_printf_i+0x1d4>
 8004976:	2f58      	cmp	r7, #88	; 0x58
 8004978:	f000 80a4 	beq.w	8004ac4 <_printf_i+0x170>
 800497c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004984:	e03a      	b.n	80049fc <_printf_i+0xa8>
 8004986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800498a:	2b15      	cmp	r3, #21
 800498c:	d8f6      	bhi.n	800497c <_printf_i+0x28>
 800498e:	a001      	add	r0, pc, #4	; (adr r0, 8004994 <_printf_i+0x40>)
 8004990:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004994:	080049ed 	.word	0x080049ed
 8004998:	08004a01 	.word	0x08004a01
 800499c:	0800497d 	.word	0x0800497d
 80049a0:	0800497d 	.word	0x0800497d
 80049a4:	0800497d 	.word	0x0800497d
 80049a8:	0800497d 	.word	0x0800497d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800497d 	.word	0x0800497d
 80049b4:	0800497d 	.word	0x0800497d
 80049b8:	0800497d 	.word	0x0800497d
 80049bc:	0800497d 	.word	0x0800497d
 80049c0:	08004b0f 	.word	0x08004b0f
 80049c4:	08004a31 	.word	0x08004a31
 80049c8:	08004af1 	.word	0x08004af1
 80049cc:	0800497d 	.word	0x0800497d
 80049d0:	0800497d 	.word	0x0800497d
 80049d4:	08004b31 	.word	0x08004b31
 80049d8:	0800497d 	.word	0x0800497d
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	0800497d 	.word	0x0800497d
 80049e4:	0800497d 	.word	0x0800497d
 80049e8:	08004af9 	.word	0x08004af9
 80049ec:	680b      	ldr	r3, [r1, #0]
 80049ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	600a      	str	r2, [r1, #0]
 80049f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0a4      	b.n	8004b4a <_printf_i+0x1f6>
 8004a00:	6825      	ldr	r5, [r4, #0]
 8004a02:	6808      	ldr	r0, [r1, #0]
 8004a04:	062e      	lsls	r6, r5, #24
 8004a06:	f100 0304 	add.w	r3, r0, #4
 8004a0a:	d50a      	bpl.n	8004a22 <_printf_i+0xce>
 8004a0c:	6805      	ldr	r5, [r0, #0]
 8004a0e:	600b      	str	r3, [r1, #0]
 8004a10:	2d00      	cmp	r5, #0
 8004a12:	da03      	bge.n	8004a1c <_printf_i+0xc8>
 8004a14:	232d      	movs	r3, #45	; 0x2d
 8004a16:	426d      	negs	r5, r5
 8004a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a1c:	230a      	movs	r3, #10
 8004a1e:	485e      	ldr	r0, [pc, #376]	; (8004b98 <_printf_i+0x244>)
 8004a20:	e019      	b.n	8004a56 <_printf_i+0x102>
 8004a22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a26:	6805      	ldr	r5, [r0, #0]
 8004a28:	600b      	str	r3, [r1, #0]
 8004a2a:	bf18      	it	ne
 8004a2c:	b22d      	sxthne	r5, r5
 8004a2e:	e7ef      	b.n	8004a10 <_printf_i+0xbc>
 8004a30:	680b      	ldr	r3, [r1, #0]
 8004a32:	6825      	ldr	r5, [r4, #0]
 8004a34:	1d18      	adds	r0, r3, #4
 8004a36:	6008      	str	r0, [r1, #0]
 8004a38:	0628      	lsls	r0, r5, #24
 8004a3a:	d501      	bpl.n	8004a40 <_printf_i+0xec>
 8004a3c:	681d      	ldr	r5, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <_printf_i+0xf2>
 8004a40:	0669      	lsls	r1, r5, #25
 8004a42:	d5fb      	bpl.n	8004a3c <_printf_i+0xe8>
 8004a44:	881d      	ldrh	r5, [r3, #0]
 8004a46:	2f6f      	cmp	r7, #111	; 0x6f
 8004a48:	bf0c      	ite	eq
 8004a4a:	2308      	moveq	r3, #8
 8004a4c:	230a      	movne	r3, #10
 8004a4e:	4852      	ldr	r0, [pc, #328]	; (8004b98 <_printf_i+0x244>)
 8004a50:	2100      	movs	r1, #0
 8004a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a56:	6866      	ldr	r6, [r4, #4]
 8004a58:	2e00      	cmp	r6, #0
 8004a5a:	bfa8      	it	ge
 8004a5c:	6821      	ldrge	r1, [r4, #0]
 8004a5e:	60a6      	str	r6, [r4, #8]
 8004a60:	bfa4      	itt	ge
 8004a62:	f021 0104 	bicge.w	r1, r1, #4
 8004a66:	6021      	strge	r1, [r4, #0]
 8004a68:	b90d      	cbnz	r5, 8004a6e <_printf_i+0x11a>
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	d04d      	beq.n	8004b0a <_printf_i+0x1b6>
 8004a6e:	4616      	mov	r6, r2
 8004a70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a74:	fb03 5711 	mls	r7, r3, r1, r5
 8004a78:	5dc7      	ldrb	r7, [r0, r7]
 8004a7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a7e:	462f      	mov	r7, r5
 8004a80:	42bb      	cmp	r3, r7
 8004a82:	460d      	mov	r5, r1
 8004a84:	d9f4      	bls.n	8004a70 <_printf_i+0x11c>
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d10b      	bne.n	8004aa2 <_printf_i+0x14e>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	07df      	lsls	r7, r3, #31
 8004a8e:	d508      	bpl.n	8004aa2 <_printf_i+0x14e>
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	6861      	ldr	r1, [r4, #4]
 8004a94:	4299      	cmp	r1, r3
 8004a96:	bfde      	ittt	le
 8004a98:	2330      	movle	r3, #48	; 0x30
 8004a9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aa2:	1b92      	subs	r2, r2, r6
 8004aa4:	6122      	str	r2, [r4, #16]
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f8cd a000 	str.w	sl, [sp]
 8004ab0:	aa03      	add	r2, sp, #12
 8004ab2:	f7ff fedf 	bl	8004874 <_printf_common>
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d14c      	bne.n	8004b54 <_printf_i+0x200>
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295
 8004abe:	b004      	add	sp, #16
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	4834      	ldr	r0, [pc, #208]	; (8004b98 <_printf_i+0x244>)
 8004ac6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aca:	680e      	ldr	r6, [r1, #0]
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ad2:	061f      	lsls	r7, r3, #24
 8004ad4:	600e      	str	r6, [r1, #0]
 8004ad6:	d514      	bpl.n	8004b02 <_printf_i+0x1ae>
 8004ad8:	07d9      	lsls	r1, r3, #31
 8004ada:	bf44      	itt	mi
 8004adc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae0:	6023      	strmi	r3, [r4, #0]
 8004ae2:	b91d      	cbnz	r5, 8004aec <_printf_i+0x198>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	f023 0320 	bic.w	r3, r3, #32
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	2310      	movs	r3, #16
 8004aee:	e7af      	b.n	8004a50 <_printf_i+0xfc>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	f043 0320 	orr.w	r3, r3, #32
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	2378      	movs	r3, #120	; 0x78
 8004afa:	4828      	ldr	r0, [pc, #160]	; (8004b9c <_printf_i+0x248>)
 8004afc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b00:	e7e3      	b.n	8004aca <_printf_i+0x176>
 8004b02:	065e      	lsls	r6, r3, #25
 8004b04:	bf48      	it	mi
 8004b06:	b2ad      	uxthmi	r5, r5
 8004b08:	e7e6      	b.n	8004ad8 <_printf_i+0x184>
 8004b0a:	4616      	mov	r6, r2
 8004b0c:	e7bb      	b.n	8004a86 <_printf_i+0x132>
 8004b0e:	680b      	ldr	r3, [r1, #0]
 8004b10:	6826      	ldr	r6, [r4, #0]
 8004b12:	1d1d      	adds	r5, r3, #4
 8004b14:	6960      	ldr	r0, [r4, #20]
 8004b16:	600d      	str	r5, [r1, #0]
 8004b18:	0635      	lsls	r5, r6, #24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	d501      	bpl.n	8004b22 <_printf_i+0x1ce>
 8004b1e:	6018      	str	r0, [r3, #0]
 8004b20:	e002      	b.n	8004b28 <_printf_i+0x1d4>
 8004b22:	0671      	lsls	r1, r6, #25
 8004b24:	d5fb      	bpl.n	8004b1e <_printf_i+0x1ca>
 8004b26:	8018      	strh	r0, [r3, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4616      	mov	r6, r2
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	e7ba      	b.n	8004aa6 <_printf_i+0x152>
 8004b30:	680b      	ldr	r3, [r1, #0]
 8004b32:	1d1a      	adds	r2, r3, #4
 8004b34:	600a      	str	r2, [r1, #0]
 8004b36:	681e      	ldr	r6, [r3, #0]
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	6862      	ldr	r2, [r4, #4]
 8004b3e:	f000 f82f 	bl	8004ba0 <memchr>
 8004b42:	b108      	cbz	r0, 8004b48 <_printf_i+0x1f4>
 8004b44:	1b80      	subs	r0, r0, r6
 8004b46:	6060      	str	r0, [r4, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b52:	e7a8      	b.n	8004aa6 <_printf_i+0x152>
 8004b54:	4632      	mov	r2, r6
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	47d0      	blx	sl
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d0ab      	beq.n	8004aba <_printf_i+0x166>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	079b      	lsls	r3, r3, #30
 8004b66:	d413      	bmi.n	8004b90 <_printf_i+0x23c>
 8004b68:	68e0      	ldr	r0, [r4, #12]
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	4298      	cmp	r0, r3
 8004b6e:	bfb8      	it	lt
 8004b70:	4618      	movlt	r0, r3
 8004b72:	e7a4      	b.n	8004abe <_printf_i+0x16a>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4632      	mov	r2, r6
 8004b78:	4649      	mov	r1, r9
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	47d0      	blx	sl
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d09b      	beq.n	8004aba <_printf_i+0x166>
 8004b82:	3501      	adds	r5, #1
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	9903      	ldr	r1, [sp, #12]
 8004b88:	1a5b      	subs	r3, r3, r1
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	dcf2      	bgt.n	8004b74 <_printf_i+0x220>
 8004b8e:	e7eb      	b.n	8004b68 <_printf_i+0x214>
 8004b90:	2500      	movs	r5, #0
 8004b92:	f104 0619 	add.w	r6, r4, #25
 8004b96:	e7f5      	b.n	8004b84 <_printf_i+0x230>
 8004b98:	08004f07 	.word	0x08004f07
 8004b9c:	08004f18 	.word	0x08004f18

08004ba0 <memchr>:
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	b2c9      	uxtb	r1, r1
 8004ba6:	4402      	add	r2, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	d101      	bne.n	8004bb2 <memchr+0x12>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e003      	b.n	8004bba <memchr+0x1a>
 8004bb2:	7804      	ldrb	r4, [r0, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	428c      	cmp	r4, r1
 8004bb8:	d1f6      	bne.n	8004ba8 <memchr+0x8>
 8004bba:	bd10      	pop	{r4, pc}

08004bbc <memcpy>:
 8004bbc:	440a      	add	r2, r1
 8004bbe:	4291      	cmp	r1, r2
 8004bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bc4:	d100      	bne.n	8004bc8 <memcpy+0xc>
 8004bc6:	4770      	bx	lr
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bce:	4291      	cmp	r1, r2
 8004bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd4:	d1f9      	bne.n	8004bca <memcpy+0xe>
 8004bd6:	bd10      	pop	{r4, pc}

08004bd8 <memmove>:
 8004bd8:	4288      	cmp	r0, r1
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	eb01 0402 	add.w	r4, r1, r2
 8004be0:	d902      	bls.n	8004be8 <memmove+0x10>
 8004be2:	4284      	cmp	r4, r0
 8004be4:	4623      	mov	r3, r4
 8004be6:	d807      	bhi.n	8004bf8 <memmove+0x20>
 8004be8:	1e43      	subs	r3, r0, #1
 8004bea:	42a1      	cmp	r1, r4
 8004bec:	d008      	beq.n	8004c00 <memmove+0x28>
 8004bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bf6:	e7f8      	b.n	8004bea <memmove+0x12>
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	4402      	add	r2, r0
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	d100      	bne.n	8004c02 <memmove+0x2a>
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c0a:	e7f7      	b.n	8004bfc <memmove+0x24>

08004c0c <_free_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4605      	mov	r5, r0
 8004c10:	2900      	cmp	r1, #0
 8004c12:	d043      	beq.n	8004c9c <_free_r+0x90>
 8004c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c18:	1f0c      	subs	r4, r1, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfb8      	it	lt
 8004c1e:	18e4      	addlt	r4, r4, r3
 8004c20:	f000 f8d0 	bl	8004dc4 <__malloc_lock>
 8004c24:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <_free_r+0x94>)
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	4610      	mov	r0, r2
 8004c2a:	b933      	cbnz	r3, 8004c3a <_free_r+0x2e>
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	6014      	str	r4, [r2, #0]
 8004c30:	4628      	mov	r0, r5
 8004c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c36:	f000 b8cb 	b.w	8004dd0 <__malloc_unlock>
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	d90a      	bls.n	8004c54 <_free_r+0x48>
 8004c3e:	6821      	ldr	r1, [r4, #0]
 8004c40:	1862      	adds	r2, r4, r1
 8004c42:	4293      	cmp	r3, r2
 8004c44:	bf01      	itttt	eq
 8004c46:	681a      	ldreq	r2, [r3, #0]
 8004c48:	685b      	ldreq	r3, [r3, #4]
 8004c4a:	1852      	addeq	r2, r2, r1
 8004c4c:	6022      	streq	r2, [r4, #0]
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	6004      	str	r4, [r0, #0]
 8004c52:	e7ed      	b.n	8004c30 <_free_r+0x24>
 8004c54:	461a      	mov	r2, r3
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	b10b      	cbz	r3, 8004c5e <_free_r+0x52>
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	d9fa      	bls.n	8004c54 <_free_r+0x48>
 8004c5e:	6811      	ldr	r1, [r2, #0]
 8004c60:	1850      	adds	r0, r2, r1
 8004c62:	42a0      	cmp	r0, r4
 8004c64:	d10b      	bne.n	8004c7e <_free_r+0x72>
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	4401      	add	r1, r0
 8004c6a:	1850      	adds	r0, r2, r1
 8004c6c:	4283      	cmp	r3, r0
 8004c6e:	6011      	str	r1, [r2, #0]
 8004c70:	d1de      	bne.n	8004c30 <_free_r+0x24>
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4401      	add	r1, r0
 8004c78:	6011      	str	r1, [r2, #0]
 8004c7a:	6053      	str	r3, [r2, #4]
 8004c7c:	e7d8      	b.n	8004c30 <_free_r+0x24>
 8004c7e:	d902      	bls.n	8004c86 <_free_r+0x7a>
 8004c80:	230c      	movs	r3, #12
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	e7d4      	b.n	8004c30 <_free_r+0x24>
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1821      	adds	r1, r4, r0
 8004c8a:	428b      	cmp	r3, r1
 8004c8c:	bf01      	itttt	eq
 8004c8e:	6819      	ldreq	r1, [r3, #0]
 8004c90:	685b      	ldreq	r3, [r3, #4]
 8004c92:	1809      	addeq	r1, r1, r0
 8004c94:	6021      	streq	r1, [r4, #0]
 8004c96:	6063      	str	r3, [r4, #4]
 8004c98:	6054      	str	r4, [r2, #4]
 8004c9a:	e7c9      	b.n	8004c30 <_free_r+0x24>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000194 	.word	0x20000194

08004ca4 <_malloc_r>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	1ccd      	adds	r5, r1, #3
 8004ca8:	f025 0503 	bic.w	r5, r5, #3
 8004cac:	3508      	adds	r5, #8
 8004cae:	2d0c      	cmp	r5, #12
 8004cb0:	bf38      	it	cc
 8004cb2:	250c      	movcc	r5, #12
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	db01      	blt.n	8004cbe <_malloc_r+0x1a>
 8004cba:	42a9      	cmp	r1, r5
 8004cbc:	d903      	bls.n	8004cc6 <_malloc_r+0x22>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc6:	f000 f87d 	bl	8004dc4 <__malloc_lock>
 8004cca:	4921      	ldr	r1, [pc, #132]	; (8004d50 <_malloc_r+0xac>)
 8004ccc:	680a      	ldr	r2, [r1, #0]
 8004cce:	4614      	mov	r4, r2
 8004cd0:	b99c      	cbnz	r4, 8004cfa <_malloc_r+0x56>
 8004cd2:	4f20      	ldr	r7, [pc, #128]	; (8004d54 <_malloc_r+0xb0>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b923      	cbnz	r3, 8004ce2 <_malloc_r+0x3e>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f000 f862 	bl	8004da4 <_sbrk_r>
 8004ce0:	6038      	str	r0, [r7, #0]
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f000 f85d 	bl	8004da4 <_sbrk_r>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	d123      	bne.n	8004d36 <_malloc_r+0x92>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	f000 f86c 	bl	8004dd0 <__malloc_unlock>
 8004cf8:	e7e3      	b.n	8004cc2 <_malloc_r+0x1e>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	1b5b      	subs	r3, r3, r5
 8004cfe:	d417      	bmi.n	8004d30 <_malloc_r+0x8c>
 8004d00:	2b0b      	cmp	r3, #11
 8004d02:	d903      	bls.n	8004d0c <_malloc_r+0x68>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	441c      	add	r4, r3
 8004d08:	6025      	str	r5, [r4, #0]
 8004d0a:	e004      	b.n	8004d16 <_malloc_r+0x72>
 8004d0c:	6863      	ldr	r3, [r4, #4]
 8004d0e:	42a2      	cmp	r2, r4
 8004d10:	bf0c      	ite	eq
 8004d12:	600b      	streq	r3, [r1, #0]
 8004d14:	6053      	strne	r3, [r2, #4]
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 f85a 	bl	8004dd0 <__malloc_unlock>
 8004d1c:	f104 000b 	add.w	r0, r4, #11
 8004d20:	1d23      	adds	r3, r4, #4
 8004d22:	f020 0007 	bic.w	r0, r0, #7
 8004d26:	1ac2      	subs	r2, r0, r3
 8004d28:	d0cc      	beq.n	8004cc4 <_malloc_r+0x20>
 8004d2a:	1a1b      	subs	r3, r3, r0
 8004d2c:	50a3      	str	r3, [r4, r2]
 8004d2e:	e7c9      	b.n	8004cc4 <_malloc_r+0x20>
 8004d30:	4622      	mov	r2, r4
 8004d32:	6864      	ldr	r4, [r4, #4]
 8004d34:	e7cc      	b.n	8004cd0 <_malloc_r+0x2c>
 8004d36:	1cc4      	adds	r4, r0, #3
 8004d38:	f024 0403 	bic.w	r4, r4, #3
 8004d3c:	42a0      	cmp	r0, r4
 8004d3e:	d0e3      	beq.n	8004d08 <_malloc_r+0x64>
 8004d40:	1a21      	subs	r1, r4, r0
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 f82e 	bl	8004da4 <_sbrk_r>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d1dd      	bne.n	8004d08 <_malloc_r+0x64>
 8004d4c:	e7cf      	b.n	8004cee <_malloc_r+0x4a>
 8004d4e:	bf00      	nop
 8004d50:	20000194 	.word	0x20000194
 8004d54:	20000198 	.word	0x20000198

08004d58 <_realloc_r>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	4607      	mov	r7, r0
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	460e      	mov	r6, r1
 8004d60:	b921      	cbnz	r1, 8004d6c <_realloc_r+0x14>
 8004d62:	4611      	mov	r1, r2
 8004d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d68:	f7ff bf9c 	b.w	8004ca4 <_malloc_r>
 8004d6c:	b922      	cbnz	r2, 8004d78 <_realloc_r+0x20>
 8004d6e:	f7ff ff4d 	bl	8004c0c <_free_r>
 8004d72:	4625      	mov	r5, r4
 8004d74:	4628      	mov	r0, r5
 8004d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d78:	f000 f830 	bl	8004ddc <_malloc_usable_size_r>
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d20f      	bcs.n	8004da0 <_realloc_r+0x48>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4638      	mov	r0, r7
 8004d84:	f7ff ff8e 	bl	8004ca4 <_malloc_r>
 8004d88:	4605      	mov	r5, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0f2      	beq.n	8004d74 <_realloc_r+0x1c>
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4622      	mov	r2, r4
 8004d92:	f7ff ff13 	bl	8004bbc <memcpy>
 8004d96:	4631      	mov	r1, r6
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f7ff ff37 	bl	8004c0c <_free_r>
 8004d9e:	e7e9      	b.n	8004d74 <_realloc_r+0x1c>
 8004da0:	4635      	mov	r5, r6
 8004da2:	e7e7      	b.n	8004d74 <_realloc_r+0x1c>

08004da4 <_sbrk_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	2300      	movs	r3, #0
 8004da8:	4d05      	ldr	r5, [pc, #20]	; (8004dc0 <_sbrk_r+0x1c>)
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc fbd8 	bl	8001564 <_sbrk>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_sbrk_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_sbrk_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000320 	.word	0x20000320

08004dc4 <__malloc_lock>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__malloc_lock+0x8>)
 8004dc6:	f000 b811 	b.w	8004dec <__retarget_lock_acquire_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20000328 	.word	0x20000328

08004dd0 <__malloc_unlock>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__malloc_unlock+0x8>)
 8004dd2:	f000 b80c 	b.w	8004dee <__retarget_lock_release_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	20000328 	.word	0x20000328

08004ddc <_malloc_usable_size_r>:
 8004ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de0:	1f18      	subs	r0, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfbc      	itt	lt
 8004de6:	580b      	ldrlt	r3, [r1, r0]
 8004de8:	18c0      	addlt	r0, r0, r3
 8004dea:	4770      	bx	lr

08004dec <__retarget_lock_acquire_recursive>:
 8004dec:	4770      	bx	lr

08004dee <__retarget_lock_release_recursive>:
 8004dee:	4770      	bx	lr

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
