
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08004eb0  08004eb0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eb0  08004eb0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08004eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200000fc  08004fb4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004fb4  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c78  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270b  00000000  00000000  00030d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000334a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000342b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e38  00000000  00000000  00034f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ee  00000000  00000000  0004ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b486  00000000  00000000  0005f69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eab24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000eab78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df4 	.word	0x08004df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08004df4 	.word	0x08004df4

0800014c <isButtonPressed>:

int keyReg3[MAX_BUTTON] = {NORMAL_STATE};
int timerForKeyPress[MAX_BUTTON] = {200};
int button_flag[MAX_BUTTON] = {0};

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000118 	.word	0x20000118

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000118 	.word	0x20000118

080001a0 <getKeyInput>:


void getKeyInput(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	keyReg0[index] = keyReg1[index];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[index] = keyReg2[index];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	keyReg2[index] = HAL_GPIO_ReadPin(button_pin[index].GPIOtype, button_pin[index].buttonPin);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80001d0:	4930      	ldr	r1, [pc, #192]	; (8000294 <getKeyInput+0xf4>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	00db      	lsls	r3, r3, #3
 80001d6:	440b      	add	r3, r1
 80001d8:	889b      	ldrh	r3, [r3, #4]
 80001da:	4619      	mov	r1, r3
 80001dc:	4610      	mov	r0, r2
 80001de:	f001 ff69 	bl	80020b4 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4619      	mov	r1, r3
 80001e6:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//keyReg2[index] = HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
	if ((keyReg0[index] == keyReg1[index]) && (keyReg1[index] == keyReg2[index])) {
 80001ee:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d13e      	bne.n	8000280 <getKeyInput+0xe0>
 8000202:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d134      	bne.n	8000280 <getKeyInput+0xe0>
		if (keyReg3[index] != keyReg2[index]) {
 8000216:	4a20      	ldr	r2, [pc, #128]	; (8000298 <getKeyInput+0xf8>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d016      	beq.n	8000258 <getKeyInput+0xb8>
			keyReg3[index] = keyReg2[index];
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4919      	ldr	r1, [pc, #100]	; (8000298 <getKeyInput+0xf8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (keyReg2[index] == PRESSED_STATE) {
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d11c      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(index);
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f7ff ff9a 	bl	8000180 <subKeyProcess>
				timerForKeyPress[index] = 200;
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <getKeyInput+0xfc>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	21c8      	movs	r1, #200	; 0xc8
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (timerForKeyPress[index] == 0) {
				keyReg3[index] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			timerForKeyPress[index]--;
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490e      	ldr	r1, [pc, #56]	; (800029c <getKeyInput+0xfc>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timerForKeyPress[index] == 0) {
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <getKeyInput+0xfc>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d104      	bne.n	8000280 <getKeyInput+0xe0>
				keyReg3[index] = NORMAL_STATE;
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <getKeyInput+0xf8>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000030 	.word	0x20000030
 800028c:	20000020 	.word	0x20000020
 8000290:	20000040 	.word	0x20000040
 8000294:	20000000 	.word	0x20000000
 8000298:	20000050 	.word	0x20000050
 800029c:	20000060 	.word	0x20000060

080002a0 <redGreenLed>:
int	greenTime = 0;

int led13 = 0; //initial time for that state
int led24 = 0;

void redGreenLed() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	onRed1();
 80002a4:	f000 feba 	bl	800101c <onRed1>
	onGreen2();
 80002a8:	f000 ff00 	bl	80010ac <onGreen2>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <redAmberLed>:

void redAmberLed() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	onRed1();
 80002b4:	f000 feb2 	bl	800101c <onRed1>
	onAmber2();
 80002b8:	f000 fed8 	bl	800106c <onAmber2>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <greenRedLed>:

void greenRedLed() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	onGreen1();
 80002c4:	f000 febe 	bl	8001044 <onGreen1>
	onRed2();
 80002c8:	f000 fee0 	bl	800108c <onRed2>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <amberRedLed>:

void amberRedLed() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	onAmber1();
 80002d4:	f000 fe8e 	bl	8000ff4 <onAmber1>
	onRed2();
 80002d8:	f000 fed8 	bl	800108c <onRed2>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <countDown>:

void countDown() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (timerFlag[1] == 1) { //for 7 seg leds buffer
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <countDown+0x4c>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d11d      	bne.n	8000328 <countDown+0x48>
		currentLed13--;
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <countDown+0x50>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <countDown+0x50>)
 80002f4:	6013      	str	r3, [r2, #0]
		currentLed24--;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <countDown+0x54>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <countDown+0x54>)
 80002fe:	6013      	str	r3, [r2, #0]
		if (currentLed13 < 0)
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <countDown+0x50>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	da03      	bge.n	8000310 <countDown+0x30>
			currentLed13 = led13;
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <countDown+0x58>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a08      	ldr	r2, [pc, #32]	; (8000330 <countDown+0x50>)
 800030e:	6013      	str	r3, [r2, #0]
		if (currentLed24 < 0)
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <countDown+0x54>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	da03      	bge.n	8000320 <countDown+0x40>
			currentLed24 = led24;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <countDown+0x5c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <countDown+0x54>)
 800031e:	6013      	str	r3, [r2, #0]
		//updateLedBuffer();
		setTimer(1, 100);
 8000320:	2164      	movs	r1, #100	; 0x64
 8000322:	2001      	movs	r0, #1
 8000324:	f000 ffbc 	bl	80012a0 <setTimer>
	}
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000170 	.word	0x20000170
 8000330:	20000150 	.word	0x20000150
 8000334:	20000154 	.word	0x20000154
 8000338:	20000130 	.word	0x20000130
 800033c:	20000134 	.word	0x20000134

08000340 <fsm_automatic_run>:
void fsm_automatic_run() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	amberTime = realAmberTime * 100;
 8000344:	4b8c      	ldr	r3, [pc, #560]	; (8000578 <fsm_automatic_run+0x238>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2264      	movs	r2, #100	; 0x64
 800034a:	fb02 f303 	mul.w	r3, r2, r3
 800034e:	4a8b      	ldr	r2, [pc, #556]	; (800057c <fsm_automatic_run+0x23c>)
 8000350:	6013      	str	r3, [r2, #0]
	greenTime = realGreenTime * 100;
 8000352:	4b8b      	ldr	r3, [pc, #556]	; (8000580 <fsm_automatic_run+0x240>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2264      	movs	r2, #100	; 0x64
 8000358:	fb02 f303 	mul.w	r3, r2, r3
 800035c:	4a89      	ldr	r2, [pc, #548]	; (8000584 <fsm_automatic_run+0x244>)
 800035e:	6013      	str	r3, [r2, #0]
	switch (status) {
 8000360:	4b89      	ldr	r3, [pc, #548]	; (8000588 <fsm_automatic_run+0x248>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	2b04      	cmp	r3, #4
 8000368:	f200 8103 	bhi.w	8000572 <fsm_automatic_run+0x232>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <fsm_automatic_run+0x34>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000389 	.word	0x08000389
 8000378:	080003b9 	.word	0x080003b9
 800037c:	08000435 	.word	0x08000435
 8000380:	0800049f 	.word	0x0800049f
 8000384:	08000509 	.word	0x08000509
	case INIT:
		clearTrafficLight();
 8000388:	f000 fe16 	bl	8000fb8 <clearTrafficLight>
		status = AUTO_RED_GREEN;
 800038c:	4b7e      	ldr	r3, [pc, #504]	; (8000588 <fsm_automatic_run+0x248>)
 800038e:	2202      	movs	r2, #2
 8000390:	601a      	str	r2, [r3, #0]
		setTimer(0, greenTime);
 8000392:	4b7c      	ldr	r3, [pc, #496]	; (8000584 <fsm_automatic_run+0x244>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	b29b      	uxth	r3, r3
 8000398:	4619      	mov	r1, r3
 800039a:	2000      	movs	r0, #0
 800039c:	f000 ff80 	bl	80012a0 <setTimer>

		led13 = realAmberTime + realGreenTime;
 80003a0:	4b75      	ldr	r3, [pc, #468]	; (8000578 <fsm_automatic_run+0x238>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b76      	ldr	r3, [pc, #472]	; (8000580 <fsm_automatic_run+0x240>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4413      	add	r3, r2
 80003aa:	4a78      	ldr	r2, [pc, #480]	; (800058c <fsm_automatic_run+0x24c>)
 80003ac:	6013      	str	r3, [r2, #0]
		led24 = realGreenTime;
 80003ae:	4b74      	ldr	r3, [pc, #464]	; (8000580 <fsm_automatic_run+0x240>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a77      	ldr	r2, [pc, #476]	; (8000590 <fsm_automatic_run+0x250>)
 80003b4:	6013      	str	r3, [r2, #0]
		break;
 80003b6:	e0dd      	b.n	8000574 <fsm_automatic_run+0x234>
	case AUTO_RED_GREEN:
		redGreenLed();
 80003b8:	f7ff ff72 	bl	80002a0 <redGreenLed>
		if (isButtonPressed(0) == 1) {
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff fec5 	bl	800014c <isButtonPressed>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d10d      	bne.n	80003e4 <fsm_automatic_run+0xa4>
			status = MANUAL_RED_GREEN;
 80003c8:	4b6f      	ldr	r3, [pc, #444]	; (8000588 <fsm_automatic_run+0x248>)
 80003ca:	221a      	movs	r2, #26
 80003cc:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 80003ce:	f000 fdf3 	bl	8000fb8 <clearTrafficLight>
			currentLed24 = 2; //mode
 80003d2:	4b70      	ldr	r3, [pc, #448]	; (8000594 <fsm_automatic_run+0x254>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 80003d8:	f000 fdae 	bl	8000f38 <updateLedBuffer>
			setTimer(2, 10); //update leds
 80003dc:	210a      	movs	r1, #10
 80003de:	2002      	movs	r0, #2
 80003e0:	f000 ff5e 	bl	80012a0 <setTimer>
		}
		if (isButtonPressed(3)) { // pedestrian nho' check cac state khac khi bam nut
 80003e4:	2003      	movs	r0, #3
 80003e6:	f7ff feb1 	bl	800014c <isButtonPressed>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d005      	beq.n	80003fc <fsm_automatic_run+0xbc>
			buzzer_flag=1;
 80003f0:	4b69      	ldr	r3, [pc, #420]	; (8000598 <fsm_automatic_run+0x258>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	601a      	str	r2, [r3, #0]
			status_pedestrian=PEDESTRIAN;
 80003f6:	4b69      	ldr	r3, [pc, #420]	; (800059c <fsm_automatic_run+0x25c>)
 80003f8:	220a      	movs	r2, #10
 80003fa:	601a      	str	r2, [r3, #0]
		}
		if (timerFlag[0] == 1){
 80003fc:	4b68      	ldr	r3, [pc, #416]	; (80005a0 <fsm_automatic_run+0x260>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d114      	bne.n	800042e <fsm_automatic_run+0xee>
			status = AUTO_RED_AMBER;
 8000404:	4b60      	ldr	r3, [pc, #384]	; (8000588 <fsm_automatic_run+0x248>)
 8000406:	2203      	movs	r2, #3
 8000408:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime + realGreenTime;
 800040a:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <fsm_automatic_run+0x238>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b5c      	ldr	r3, [pc, #368]	; (8000580 <fsm_automatic_run+0x240>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4413      	add	r3, r2
 8000414:	4a5d      	ldr	r2, [pc, #372]	; (800058c <fsm_automatic_run+0x24c>)
 8000416:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime;
 8000418:	4b57      	ldr	r3, [pc, #348]	; (8000578 <fsm_automatic_run+0x238>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a5c      	ldr	r2, [pc, #368]	; (8000590 <fsm_automatic_run+0x250>)
 800041e:	6013      	str	r3, [r2, #0]

			setTimer(0, amberTime);
 8000420:	4b56      	ldr	r3, [pc, #344]	; (800057c <fsm_automatic_run+0x23c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	b29b      	uxth	r3, r3
 8000426:	4619      	mov	r1, r3
 8000428:	2000      	movs	r0, #0
 800042a:	f000 ff39 	bl	80012a0 <setTimer>
		}
		countDown();
 800042e:	f7ff ff57 	bl	80002e0 <countDown>
		break;
 8000432:	e09f      	b.n	8000574 <fsm_automatic_run+0x234>
	case AUTO_RED_AMBER:
		redAmberLed();
 8000434:	f7ff ff3c 	bl	80002b0 <redAmberLed>

		if (isButtonPressed(0) == 1) {
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff fe87 	bl	800014c <isButtonPressed>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d10d      	bne.n	8000460 <fsm_automatic_run+0x120>
			status = MANUAL_RED_AMBER;
 8000444:	4b50      	ldr	r3, [pc, #320]	; (8000588 <fsm_automatic_run+0x248>)
 8000446:	221b      	movs	r2, #27
 8000448:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 800044a:	f000 fdb5 	bl	8000fb8 <clearTrafficLight>
			currentLed24 = 2; //mode
 800044e:	4b51      	ldr	r3, [pc, #324]	; (8000594 <fsm_automatic_run+0x254>)
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 8000454:	f000 fd70 	bl	8000f38 <updateLedBuffer>
			setTimer(2, 10); //update leds
 8000458:	210a      	movs	r1, #10
 800045a:	2002      	movs	r0, #2
 800045c:	f000 ff20 	bl	80012a0 <setTimer>
		}

		if (timerFlag[0] == 1) {
 8000460:	4b4f      	ldr	r3, [pc, #316]	; (80005a0 <fsm_automatic_run+0x260>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d114      	bne.n	8000492 <fsm_automatic_run+0x152>
			status = AUTO_GREEN_RED;
 8000468:	4b47      	ldr	r3, [pc, #284]	; (8000588 <fsm_automatic_run+0x248>)
 800046a:	2204      	movs	r2, #4
 800046c:	601a      	str	r2, [r3, #0]

			led13 = realGreenTime;
 800046e:	4b44      	ldr	r3, [pc, #272]	; (8000580 <fsm_automatic_run+0x240>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a46      	ldr	r2, [pc, #280]	; (800058c <fsm_automatic_run+0x24c>)
 8000474:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime + realGreenTime;
 8000476:	4b40      	ldr	r3, [pc, #256]	; (8000578 <fsm_automatic_run+0x238>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b41      	ldr	r3, [pc, #260]	; (8000580 <fsm_automatic_run+0x240>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	4a43      	ldr	r2, [pc, #268]	; (8000590 <fsm_automatic_run+0x250>)
 8000482:	6013      	str	r3, [r2, #0]

			setTimer(0, greenTime);
 8000484:	4b3f      	ldr	r3, [pc, #252]	; (8000584 <fsm_automatic_run+0x244>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	b29b      	uxth	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	2000      	movs	r0, #0
 800048e:	f000 ff07 	bl	80012a0 <setTimer>
		}
		countDown();
 8000492:	f7ff ff25 	bl	80002e0 <countDown>
		isButtonPressed(0);
 8000496:	2000      	movs	r0, #0
 8000498:	f7ff fe58 	bl	800014c <isButtonPressed>
		break;
 800049c:	e06a      	b.n	8000574 <fsm_automatic_run+0x234>
	case AUTO_GREEN_RED:
		greenRedLed();
 800049e:	f7ff ff0f 	bl	80002c0 <greenRedLed>

		if (isButtonPressed(0) == 1) {
 80004a2:	2000      	movs	r0, #0
 80004a4:	f7ff fe52 	bl	800014c <isButtonPressed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d10d      	bne.n	80004ca <fsm_automatic_run+0x18a>
			status = MANUAL_GREEN_RED;
 80004ae:	4b36      	ldr	r3, [pc, #216]	; (8000588 <fsm_automatic_run+0x248>)
 80004b0:	221c      	movs	r2, #28
 80004b2:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 80004b4:	f000 fd80 	bl	8000fb8 <clearTrafficLight>
			currentLed24 = 2; //mode
 80004b8:	4b36      	ldr	r3, [pc, #216]	; (8000594 <fsm_automatic_run+0x254>)
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 80004be:	f000 fd3b 	bl	8000f38 <updateLedBuffer>
			setTimer(2, 10); //update leds
 80004c2:	210a      	movs	r1, #10
 80004c4:	2002      	movs	r0, #2
 80004c6:	f000 feeb 	bl	80012a0 <setTimer>
		}

		if (timerFlag[0] == 1) {
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <fsm_automatic_run+0x260>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d114      	bne.n	80004fc <fsm_automatic_run+0x1bc>
			status = AUTO_AMBER_RED;
 80004d2:	4b2d      	ldr	r3, [pc, #180]	; (8000588 <fsm_automatic_run+0x248>)
 80004d4:	2205      	movs	r2, #5
 80004d6:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime;
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <fsm_automatic_run+0x238>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a2b      	ldr	r2, [pc, #172]	; (800058c <fsm_automatic_run+0x24c>)
 80004de:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime + realGreenTime;
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <fsm_automatic_run+0x238>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b26      	ldr	r3, [pc, #152]	; (8000580 <fsm_automatic_run+0x240>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4413      	add	r3, r2
 80004ea:	4a29      	ldr	r2, [pc, #164]	; (8000590 <fsm_automatic_run+0x250>)
 80004ec:	6013      	str	r3, [r2, #0]

			setTimer(0, amberTime);
 80004ee:	4b23      	ldr	r3, [pc, #140]	; (800057c <fsm_automatic_run+0x23c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fed2 	bl	80012a0 <setTimer>
		}
		countDown();
 80004fc:	f7ff fef0 	bl	80002e0 <countDown>
		isButtonPressed(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fe23 	bl	800014c <isButtonPressed>
		break;
 8000506:	e035      	b.n	8000574 <fsm_automatic_run+0x234>
	case AUTO_AMBER_RED:
		amberRedLed();
 8000508:	f7ff fee2 	bl	80002d0 <amberRedLed>

		if (isButtonPressed(0) == 1) {
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fe1d 	bl	800014c <isButtonPressed>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10d      	bne.n	8000534 <fsm_automatic_run+0x1f4>
			status = MANUAL_AMBER_RED;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <fsm_automatic_run+0x248>)
 800051a:	221d      	movs	r2, #29
 800051c:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 800051e:	f000 fd4b 	bl	8000fb8 <clearTrafficLight>
			currentLed24 = 2; //mode
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <fsm_automatic_run+0x254>)
 8000524:	2202      	movs	r2, #2
 8000526:	601a      	str	r2, [r3, #0]
			updateLedBuffer();
 8000528:	f000 fd06 	bl	8000f38 <updateLedBuffer>
			setTimer(2, 10); //update leds
 800052c:	210a      	movs	r1, #10
 800052e:	2002      	movs	r0, #2
 8000530:	f000 feb6 	bl	80012a0 <setTimer>
		}

		if (timerFlag[0] == 1) {
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <fsm_automatic_run+0x260>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d114      	bne.n	8000566 <fsm_automatic_run+0x226>
			status = AUTO_RED_GREEN;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <fsm_automatic_run+0x248>)
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime + realGreenTime;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <fsm_automatic_run+0x238>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <fsm_automatic_run+0x240>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a0f      	ldr	r2, [pc, #60]	; (800058c <fsm_automatic_run+0x24c>)
 800054e:	6013      	str	r3, [r2, #0]
			led24 = realGreenTime;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <fsm_automatic_run+0x240>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <fsm_automatic_run+0x250>)
 8000556:	6013      	str	r3, [r2, #0]

			setTimer(0, greenTime);
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <fsm_automatic_run+0x244>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fe9d 	bl	80012a0 <setTimer>
		}
		countDown();
 8000566:	f7ff febb 	bl	80002e0 <countDown>
		isButtonPressed(0);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fdee 	bl	800014c <isButtonPressed>
		break;
 8000570:	e000      	b.n	8000574 <fsm_automatic_run+0x234>
	default:
		break;
 8000572:	bf00      	nop
	}
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000078 	.word	0x20000078
 800057c:	20000128 	.word	0x20000128
 8000580:	2000007c 	.word	0x2000007c
 8000584:	2000012c 	.word	0x2000012c
 8000588:	20000070 	.word	0x20000070
 800058c:	20000130 	.word	0x20000130
 8000590:	20000134 	.word	0x20000134
 8000594:	20000154 	.word	0x20000154
 8000598:	2000013c 	.word	0x2000013c
 800059c:	20000074 	.word	0x20000074
 80005a0:	20000170 	.word	0x20000170

080005a4 <manual_fsm_run>:
 *      Author: PC
 */

#include "fsm_manual.h"

void manual_fsm_run(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	switch(status){
 80005a8:	4b4c      	ldr	r3, [pc, #304]	; (80006dc <manual_fsm_run+0x138>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3b1a      	subs	r3, #26
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	f200 8088 	bhi.w	80006c4 <manual_fsm_run+0x120>
 80005b4:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <manual_fsm_run+0x18>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	08000649 	.word	0x08000649
 80005c0:	08000687 	.word	0x08000687
 80005c4:	080005cd 	.word	0x080005cd
 80005c8:	0800060b 	.word	0x0800060b
	case MANUAL_GREEN_RED:
		onGreen1();
 80005cc:	f000 fd3a 	bl	8001044 <onGreen1>
		onRed2();
 80005d0:	f000 fd5c 	bl	800108c <onRed2>
		if(isButtonPressed(0)){
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff fdb9 	bl	800014c <isButtonPressed>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <manual_fsm_run+0x4e>
			status = TUNING_RED;
 80005e0:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <manual_fsm_run+0x138>)
 80005e2:	2215      	movs	r2, #21
 80005e4:	601a      	str	r2, [r3, #0]
			clearled();
 80005e6:	f000 fdc1 	bl	800116c <clearled>
			setTimer(3, 50);
 80005ea:	2132      	movs	r1, #50	; 0x32
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 fe57 	bl	80012a0 <setTimer>
		}
		if(isButtonPressed(1)){
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff fdaa 	bl	800014c <isButtonPressed>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d064      	beq.n	80006c8 <manual_fsm_run+0x124>
			status = MANUAL_AMBER_RED;
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <manual_fsm_run+0x138>)
 8000600:	221d      	movs	r2, #29
 8000602:	601a      	str	r2, [r3, #0]
			clearled();
 8000604:	f000 fdb2 	bl	800116c <clearled>
		}

		break;
 8000608:	e05e      	b.n	80006c8 <manual_fsm_run+0x124>
	case MANUAL_AMBER_RED:
		onAmber1();
 800060a:	f000 fcf3 	bl	8000ff4 <onAmber1>
		onRed2();
 800060e:	f000 fd3d 	bl	800108c <onRed2>
		if(isButtonPressed(0)){
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fd9a 	bl	800014c <isButtonPressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <manual_fsm_run+0x8c>
			status = TUNING_RED;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <manual_fsm_run+0x138>)
 8000620:	2215      	movs	r2, #21
 8000622:	601a      	str	r2, [r3, #0]
			clearled();
 8000624:	f000 fda2 	bl	800116c <clearled>
			setTimer(3, 50);
 8000628:	2132      	movs	r1, #50	; 0x32
 800062a:	2003      	movs	r0, #3
 800062c:	f000 fe38 	bl	80012a0 <setTimer>
		}
		if(isButtonPressed(1)){
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff fd8b 	bl	800014c <isButtonPressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d047      	beq.n	80006cc <manual_fsm_run+0x128>
			status = MANUAL_RED_GREEN;
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <manual_fsm_run+0x138>)
 800063e:	221a      	movs	r2, #26
 8000640:	601a      	str	r2, [r3, #0]
			clearled();
 8000642:	f000 fd93 	bl	800116c <clearled>
		}
		break;
 8000646:	e041      	b.n	80006cc <manual_fsm_run+0x128>
	case MANUAL_RED_GREEN:
		onRed1();
 8000648:	f000 fce8 	bl	800101c <onRed1>
		onGreen2();
 800064c:	f000 fd2e 	bl	80010ac <onGreen2>
		if(isButtonPressed(0)){
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff fd7b 	bl	800014c <isButtonPressed>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <manual_fsm_run+0xca>
			status = TUNING_RED;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <manual_fsm_run+0x138>)
 800065e:	2215      	movs	r2, #21
 8000660:	601a      	str	r2, [r3, #0]
			clearled();
 8000662:	f000 fd83 	bl	800116c <clearled>
			setTimer(3, 50);
 8000666:	2132      	movs	r1, #50	; 0x32
 8000668:	2003      	movs	r0, #3
 800066a:	f000 fe19 	bl	80012a0 <setTimer>
		}
		if(isButtonPressed(1)){
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fd6c 	bl	800014c <isButtonPressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d02a      	beq.n	80006d0 <manual_fsm_run+0x12c>
			status = MANUAL_RED_AMBER;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <manual_fsm_run+0x138>)
 800067c:	221b      	movs	r2, #27
 800067e:	601a      	str	r2, [r3, #0]
			clearled();
 8000680:	f000 fd74 	bl	800116c <clearled>
		}
		break;
 8000684:	e024      	b.n	80006d0 <manual_fsm_run+0x12c>
	case MANUAL_RED_AMBER:
		onRed1();
 8000686:	f000 fcc9 	bl	800101c <onRed1>
		onAmber2();
 800068a:	f000 fcef 	bl	800106c <onAmber2>
		if(isButtonPressed(0)){
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fd5c 	bl	800014c <isButtonPressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d008      	beq.n	80006ac <manual_fsm_run+0x108>
			status = TUNING_RED;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <manual_fsm_run+0x138>)
 800069c:	2215      	movs	r2, #21
 800069e:	601a      	str	r2, [r3, #0]
			clearled();
 80006a0:	f000 fd64 	bl	800116c <clearled>
			setTimer(3, 50);
 80006a4:	2132      	movs	r1, #50	; 0x32
 80006a6:	2003      	movs	r0, #3
 80006a8:	f000 fdfa 	bl	80012a0 <setTimer>
		}
		if(isButtonPressed(1)){
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff fd4d 	bl	800014c <isButtonPressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00d      	beq.n	80006d4 <manual_fsm_run+0x130>
			status = MANUAL_GREEN_RED;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <manual_fsm_run+0x138>)
 80006ba:	221c      	movs	r2, #28
 80006bc:	601a      	str	r2, [r3, #0]
			clearled();
 80006be:	f000 fd55 	bl	800116c <clearled>
		}
		break;
 80006c2:	e007      	b.n	80006d4 <manual_fsm_run+0x130>
	default:
		break;
 80006c4:	bf00      	nop
 80006c6:	e006      	b.n	80006d6 <manual_fsm_run+0x132>
		break;
 80006c8:	bf00      	nop
 80006ca:	e004      	b.n	80006d6 <manual_fsm_run+0x132>
		break;
 80006cc:	bf00      	nop
 80006ce:	e002      	b.n	80006d6 <manual_fsm_run+0x132>
		break;
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <manual_fsm_run+0x132>
		break;
 80006d4:	bf00      	nop
	}
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000070 	.word	0x20000070

080006e0 <fsm_pedestrian>:
 *      Author: Vostro
 */

#include "global.h"
#include "software_timer.h"
void fsm_pedestrian() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	if (timerFlag[3]==1) {
 80006e4:	4b53      	ldr	r3, [pc, #332]	; (8000834 <fsm_pedestrian+0x154>)
 80006e6:	78db      	ldrb	r3, [r3, #3]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d137      	bne.n	800075c <fsm_pedestrian+0x7c>
		buzzer_off();
 80006ec:	f000 fdcc 	bl	8001288 <buzzer_off>
		status_pedestrian=PEDESTRIAN_GREEN;
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <fsm_pedestrian+0x158>)
 80006f2:	220d      	movs	r2, #13
 80006f4:	601a      	str	r2, [r3, #0]


		// change to green red
		status=AUTO_GREEN_RED;
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <fsm_pedestrian+0x15c>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	601a      	str	r2, [r3, #0]

		led13=realGreenTime;
 80006fc:	4b50      	ldr	r3, [pc, #320]	; (8000840 <fsm_pedestrian+0x160>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a50      	ldr	r2, [pc, #320]	; (8000844 <fsm_pedestrian+0x164>)
 8000702:	6013      	str	r3, [r2, #0]
		led24=realAmberTime+realGreenTime;
 8000704:	4b50      	ldr	r3, [pc, #320]	; (8000848 <fsm_pedestrian+0x168>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <fsm_pedestrian+0x160>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4413      	add	r3, r2
 800070e:	4a4f      	ldr	r2, [pc, #316]	; (800084c <fsm_pedestrian+0x16c>)
 8000710:	6013      	str	r3, [r2, #0]

		setTimer(0,realGreenTime*100);
 8000712:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <fsm_pedestrian+0x160>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	4413      	add	r3, r2
 800071e:	461a      	mov	r2, r3
 8000720:	0091      	lsls	r1, r2, #2
 8000722:	461a      	mov	r2, r3
 8000724:	460b      	mov	r3, r1
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	b29b      	uxth	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fdb6 	bl	80012a0 <setTimer>
		///////////////////////

		setTimer(5, realGreenTime*100);
 8000734:	4b42      	ldr	r3, [pc, #264]	; (8000840 <fsm_pedestrian+0x160>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	4413      	add	r3, r2
 8000740:	461a      	mov	r2, r3
 8000742:	0091      	lsls	r1, r2, #2
 8000744:	461a      	mov	r2, r3
 8000746:	460b      	mov	r3, r1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	b29b      	uxth	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2005      	movs	r0, #5
 8000752:	f000 fda5 	bl	80012a0 <setTimer>
		timerFlag[3]=0;
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <fsm_pedestrian+0x154>)
 8000758:	2200      	movs	r2, #0
 800075a:	70da      	strb	r2, [r3, #3]
	}
	switch(status_pedestrian) {
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <fsm_pedestrian+0x158>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3b0a      	subs	r3, #10
 8000762:	2b03      	cmp	r3, #3
 8000764:	d85a      	bhi.n	800081c <fsm_pedestrian+0x13c>
 8000766:	a201      	add	r2, pc, #4	; (adr r2, 800076c <fsm_pedestrian+0x8c>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	0800077d 	.word	0x0800077d
 8000770:	080007fd 	.word	0x080007fd
 8000774:	080007c7 	.word	0x080007c7
 8000778:	08000791 	.word	0x08000791
	case PEDESTRIAN:
		buzzer_on();
 800077c:	f000 fd14 	bl	80011a8 <buzzer_on>
		if (status!=AUTO_RED_GREEN) {
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <fsm_pedestrian+0x15c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d04b      	beq.n	8000820 <fsm_pedestrian+0x140>
			timerFlag[3]=1;
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <fsm_pedestrian+0x154>)
 800078a:	2201      	movs	r2, #1
 800078c:	70da      	strb	r2, [r3, #3]
		}
		break;
 800078e:	e047      	b.n	8000820 <fsm_pedestrian+0x140>
	case PEDESTRIAN_GREEN:
		onGreenPedes();
 8000790:	f000 fcb0 	bl	80010f4 <onGreenPedes>
		if (timerFlag[5]==1) {
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <fsm_pedestrian+0x154>)
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d143      	bne.n	8000824 <fsm_pedestrian+0x144>
			status_pedestrian=PEDESTRIAN_AMBER;
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <fsm_pedestrian+0x158>)
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
			setTimer(5, realAmberTime*100);
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <fsm_pedestrian+0x168>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	0092      	lsls	r2, r2, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	461a      	mov	r2, r3
 80007b0:	0091      	lsls	r1, r2, #2
 80007b2:	461a      	mov	r2, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	4413      	add	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	2005      	movs	r0, #5
 80007c0:	f000 fd6e 	bl	80012a0 <setTimer>
		}
		break;
 80007c4:	e02e      	b.n	8000824 <fsm_pedestrian+0x144>
	case PEDESTRIAN_AMBER:
		onAmberPedes();
 80007c6:	f000 fc81 	bl	80010cc <onAmberPedes>
		if (timerFlag[5]==1) {
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <fsm_pedestrian+0x154>)
 80007cc:	795b      	ldrb	r3, [r3, #5]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d12a      	bne.n	8000828 <fsm_pedestrian+0x148>
			status_pedestrian=PEDESTRIAN_RED;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <fsm_pedestrian+0x158>)
 80007d4:	220b      	movs	r2, #11
 80007d6:	601a      	str	r2, [r3, #0]
			setTimer(5, realRedTime*100);
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <fsm_pedestrian+0x170>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	461a      	mov	r2, r3
 80007e6:	0091      	lsls	r1, r2, #2
 80007e8:	461a      	mov	r2, r3
 80007ea:	460b      	mov	r3, r1
 80007ec:	4413      	add	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	2005      	movs	r0, #5
 80007f6:	f000 fd53 	bl	80012a0 <setTimer>
		}
		break;
 80007fa:	e015      	b.n	8000828 <fsm_pedestrian+0x148>
	case PEDESTRIAN_RED:
		onRedPedes();
 80007fc:	f000 fc8e 	bl	800111c <onRedPedes>
		if (timerFlag[5]==1) {
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <fsm_pedestrian+0x154>)
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d111      	bne.n	800082c <fsm_pedestrian+0x14c>
			clearPedesLed();
 8000808:	f000 fc9c 	bl	8001144 <clearPedesLed>
			status_pedestrian=1000;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <fsm_pedestrian+0x158>)
 800080e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000812:	601a      	str	r2, [r3, #0]
			timerFlag[5]=0;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <fsm_pedestrian+0x154>)
 8000816:	2200      	movs	r2, #0
 8000818:	715a      	strb	r2, [r3, #5]
		}
		break;
 800081a:	e007      	b.n	800082c <fsm_pedestrian+0x14c>
	default:
		break;
 800081c:	bf00      	nop
 800081e:	e006      	b.n	800082e <fsm_pedestrian+0x14e>
		break;
 8000820:	bf00      	nop
 8000822:	e004      	b.n	800082e <fsm_pedestrian+0x14e>
		break;
 8000824:	bf00      	nop
 8000826:	e002      	b.n	800082e <fsm_pedestrian+0x14e>
		break;
 8000828:	bf00      	nop
 800082a:	e000      	b.n	800082e <fsm_pedestrian+0x14e>
		break;
 800082c:	bf00      	nop
	}
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000170 	.word	0x20000170
 8000838:	20000074 	.word	0x20000074
 800083c:	20000070 	.word	0x20000070
 8000840:	2000007c 	.word	0x2000007c
 8000844:	20000130 	.word	0x20000130
 8000848:	20000078 	.word	0x20000078
 800084c:	20000134 	.word	0x20000134
 8000850:	20000080 	.word	0x20000080

08000854 <fsm_tuning_run>:
 */
#include "fsm_tuning.h"

int amber_on = 0;

void fsm_tuning_run() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	switch (status) {
 8000858:	4b90      	ldr	r3, [pc, #576]	; (8000a9c <fsm_tuning_run+0x248>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b17      	cmp	r3, #23
 800085e:	f000 80c1 	beq.w	80009e4 <fsm_tuning_run+0x190>
 8000862:	2b17      	cmp	r3, #23
 8000864:	f300 8110 	bgt.w	8000a88 <fsm_tuning_run+0x234>
 8000868:	2b15      	cmp	r3, #21
 800086a:	d002      	beq.n	8000872 <fsm_tuning_run+0x1e>
 800086c:	2b16      	cmp	r3, #22
 800086e:	d045      	beq.n	80008fc <fsm_tuning_run+0xa8>
			if (isButtonPressed(2) == 1) {
				realGreenTime = currentLed13;
			}
			break;
		default:
			break;
 8000870:	e10a      	b.n	8000a88 <fsm_tuning_run+0x234>
			if (timerFlag[3] == 1) {
 8000872:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <fsm_tuning_run+0x24c>)
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d10c      	bne.n	8000894 <fsm_tuning_run+0x40>
				setTimer(3, 50); //blinky 2 Hz
 800087a:	2132      	movs	r1, #50	; 0x32
 800087c:	2003      	movs	r0, #3
 800087e:	f000 fd0f 	bl	80012a0 <setTimer>
				HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin); //toggle red 1
 8000882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000886:	4887      	ldr	r0, [pc, #540]	; (8000aa4 <fsm_tuning_run+0x250>)
 8000888:	f001 fc43 	bl	8002112 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin); //toggle red 2
 800088c:	2120      	movs	r1, #32
 800088e:	4886      	ldr	r0, [pc, #536]	; (8000aa8 <fsm_tuning_run+0x254>)
 8000890:	f001 fc3f 	bl	8002112 <HAL_GPIO_TogglePin>
			if (isButtonPressed(1) == 1) {
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff fc59 	bl	800014c <isButtonPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10d      	bne.n	80008bc <fsm_tuning_run+0x68>
				currentLed13++;
 80008a0:	4b82      	ldr	r3, [pc, #520]	; (8000aac <fsm_tuning_run+0x258>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a81      	ldr	r2, [pc, #516]	; (8000aac <fsm_tuning_run+0x258>)
 80008a8:	6013      	str	r3, [r2, #0]
				if (currentLed13 > 99)
 80008aa:	4b80      	ldr	r3, [pc, #512]	; (8000aac <fsm_tuning_run+0x258>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b63      	cmp	r3, #99	; 0x63
 80008b0:	dd02      	ble.n	80008b8 <fsm_tuning_run+0x64>
					currentLed13 = 0;
 80008b2:	4b7e      	ldr	r3, [pc, #504]	; (8000aac <fsm_tuning_run+0x258>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 80008b8:	f000 fb3e 	bl	8000f38 <updateLedBuffer>
			if(isButtonPressed(0) == 1) {
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fc45 	bl	800014c <isButtonPressed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d10d      	bne.n	80008e4 <fsm_tuning_run+0x90>
				clearled();
 80008c8:	f000 fc50 	bl	800116c <clearled>
				status = TUNING_AMBER;
 80008cc:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <fsm_tuning_run+0x248>)
 80008ce:	2216      	movs	r2, #22
 80008d0:	601a      	str	r2, [r3, #0]
				currentLed24 = 3; //mode
 80008d2:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <fsm_tuning_run+0x25c>)
 80008d4:	2203      	movs	r2, #3
 80008d6:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 80008d8:	f000 fb2e 	bl	8000f38 <updateLedBuffer>
				setTimer(3, 50);
 80008dc:	2132      	movs	r1, #50	; 0x32
 80008de:	2003      	movs	r0, #3
 80008e0:	f000 fcde 	bl	80012a0 <setTimer>
			if (isButtonPressed(2) == 1) {
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fc31 	bl	800014c <isButtonPressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	f040 80cd 	bne.w	8000a8c <fsm_tuning_run+0x238>
				realRedTime = currentLed13;
 80008f2:	4b6e      	ldr	r3, [pc, #440]	; (8000aac <fsm_tuning_run+0x258>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a6f      	ldr	r2, [pc, #444]	; (8000ab4 <fsm_tuning_run+0x260>)
 80008f8:	6013      	str	r3, [r2, #0]
			break;
 80008fa:	e0c7      	b.n	8000a8c <fsm_tuning_run+0x238>
			if (timerFlag[3] == 1) {
 80008fc:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <fsm_tuning_run+0x24c>)
 80008fe:	78db      	ldrb	r3, [r3, #3]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d13a      	bne.n	800097a <fsm_tuning_run+0x126>
				setTimer(3, 50);
 8000904:	2132      	movs	r1, #50	; 0x32
 8000906:	2003      	movs	r0, #3
 8000908:	f000 fcca 	bl	80012a0 <setTimer>
				clearled();
 800090c:	f000 fc2e 	bl	800116c <clearled>
				if (amber_on == 0) {
 8000910:	4b69      	ldr	r3, [pc, #420]	; (8000ab8 <fsm_tuning_run+0x264>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d118      	bne.n	800094a <fsm_tuning_run+0xf6>
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //toggle amber 1
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	4861      	ldr	r0, [pc, #388]	; (8000aa4 <fsm_tuning_run+0x250>)
 8000920:	f001 fbdf 	bl	80020e2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2108      	movs	r1, #8
 8000928:	485f      	ldr	r0, [pc, #380]	; (8000aa8 <fsm_tuning_run+0x254>)
 800092a:	f001 fbda 	bl	80020e2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //toggle amber 2
 800092e:	2201      	movs	r2, #1
 8000930:	2120      	movs	r1, #32
 8000932:	485d      	ldr	r0, [pc, #372]	; (8000aa8 <fsm_tuning_run+0x254>)
 8000934:	f001 fbd5 	bl	80020e2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	485a      	ldr	r0, [pc, #360]	; (8000aa8 <fsm_tuning_run+0x254>)
 800093e:	f001 fbd0 	bl	80020e2 <HAL_GPIO_WritePin>
					amber_on = 1;
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <fsm_tuning_run+0x264>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e017      	b.n	800097a <fsm_tuning_run+0x126>
					HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //toggle amber 1
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	4854      	ldr	r0, [pc, #336]	; (8000aa4 <fsm_tuning_run+0x250>)
 8000952:	f001 fbc6 	bl	80020e2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2108      	movs	r1, #8
 800095a:	4853      	ldr	r0, [pc, #332]	; (8000aa8 <fsm_tuning_run+0x254>)
 800095c:	f001 fbc1 	bl	80020e2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //toggle amber 2
 8000960:	2200      	movs	r2, #0
 8000962:	2120      	movs	r1, #32
 8000964:	4850      	ldr	r0, [pc, #320]	; (8000aa8 <fsm_tuning_run+0x254>)
 8000966:	f001 fbbc 	bl	80020e2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	484e      	ldr	r0, [pc, #312]	; (8000aa8 <fsm_tuning_run+0x254>)
 8000970:	f001 fbb7 	bl	80020e2 <HAL_GPIO_WritePin>
					amber_on = 0;
 8000974:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <fsm_tuning_run+0x264>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(1) == 1) {
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fbe6 	bl	800014c <isButtonPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d10d      	bne.n	80009a2 <fsm_tuning_run+0x14e>
				currentLed13++;
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <fsm_tuning_run+0x258>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	4a47      	ldr	r2, [pc, #284]	; (8000aac <fsm_tuning_run+0x258>)
 800098e:	6013      	str	r3, [r2, #0]
				if (currentLed13 > 99)
 8000990:	4b46      	ldr	r3, [pc, #280]	; (8000aac <fsm_tuning_run+0x258>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b63      	cmp	r3, #99	; 0x63
 8000996:	dd02      	ble.n	800099e <fsm_tuning_run+0x14a>
					currentLed13 = 0;
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <fsm_tuning_run+0x258>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 800099e:	f000 facb 	bl	8000f38 <updateLedBuffer>
			if(isButtonPressed(0) == 1) {
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fbd2 	bl	800014c <isButtonPressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d10f      	bne.n	80009ce <fsm_tuning_run+0x17a>
				clearled();
 80009ae:	f000 fbdd 	bl	800116c <clearled>
				status = TUNING_GREEN;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <fsm_tuning_run+0x248>)
 80009b4:	2217      	movs	r2, #23
 80009b6:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80009b8:	f000 fafe 	bl	8000fb8 <clearTrafficLight>
				currentLed24 = 4; //mode
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <fsm_tuning_run+0x25c>)
 80009be:	2204      	movs	r2, #4
 80009c0:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 80009c2:	f000 fab9 	bl	8000f38 <updateLedBuffer>
				setTimer(3, 50);
 80009c6:	2132      	movs	r1, #50	; 0x32
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 fc69 	bl	80012a0 <setTimer>
			if (isButtonPressed(2) == 1) {
 80009ce:	2002      	movs	r0, #2
 80009d0:	f7ff fbbc 	bl	800014c <isButtonPressed>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d15a      	bne.n	8000a90 <fsm_tuning_run+0x23c>
				realAmberTime = currentLed13;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <fsm_tuning_run+0x258>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a37      	ldr	r2, [pc, #220]	; (8000abc <fsm_tuning_run+0x268>)
 80009e0:	6013      	str	r3, [r2, #0]
			break;
 80009e2:	e055      	b.n	8000a90 <fsm_tuning_run+0x23c>
			if (timerFlag[3] == 1) {
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <fsm_tuning_run+0x24c>)
 80009e6:	78db      	ldrb	r3, [r3, #3]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10b      	bne.n	8000a04 <fsm_tuning_run+0x1b0>
				setTimer(3, 50);
 80009ec:	2132      	movs	r1, #50	; 0x32
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 fc56 	bl	80012a0 <setTimer>
				HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin); //toggle green led 1
 80009f4:	2108      	movs	r1, #8
 80009f6:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <fsm_tuning_run+0x254>)
 80009f8:	f001 fb8b 	bl	8002112 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin); //toggle green led 2
 80009fc:	2110      	movs	r1, #16
 80009fe:	482a      	ldr	r0, [pc, #168]	; (8000aa8 <fsm_tuning_run+0x254>)
 8000a00:	f001 fb87 	bl	8002112 <HAL_GPIO_TogglePin>
			if (isButtonPressed(1) == 1) {
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fba1 	bl	800014c <isButtonPressed>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10d      	bne.n	8000a2c <fsm_tuning_run+0x1d8>
				currentLed13++;
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <fsm_tuning_run+0x258>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <fsm_tuning_run+0x258>)
 8000a18:	6013      	str	r3, [r2, #0]
				if (currentLed13 > 99)
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <fsm_tuning_run+0x258>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b63      	cmp	r3, #99	; 0x63
 8000a20:	dd02      	ble.n	8000a28 <fsm_tuning_run+0x1d4>
					currentLed13 = 0;
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <fsm_tuning_run+0x258>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 8000a28:	f000 fa86 	bl	8000f38 <updateLedBuffer>
			if(isButtonPressed(0) == 1) {
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fb8d 	bl	800014c <isButtonPressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11c      	bne.n	8000a72 <fsm_tuning_run+0x21e>
				clearled();
 8000a38:	f000 fb98 	bl	800116c <clearled>
				status = INIT;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <fsm_tuning_run+0x248>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 8000a42:	f000 fab9 	bl	8000fb8 <clearTrafficLight>
				currentLed24 = 1; //mode
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <fsm_tuning_run+0x25c>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
				updateLedBuffer();
 8000a4c:	f000 fa74 	bl	8000f38 <updateLedBuffer>
				setTimer(0, realAmberTime * 100);
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <fsm_tuning_run+0x268>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	0091      	lsls	r1, r2, #2
 8000a60:	461a      	mov	r2, r3
 8000a62:	460b      	mov	r3, r1
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fc17 	bl	80012a0 <setTimer>
			if (isButtonPressed(2) == 1) {
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff fb6a 	bl	800014c <isButtonPressed>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10a      	bne.n	8000a94 <fsm_tuning_run+0x240>
				realGreenTime = currentLed13;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <fsm_tuning_run+0x258>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <fsm_tuning_run+0x26c>)
 8000a84:	6013      	str	r3, [r2, #0]
			break;
 8000a86:	e005      	b.n	8000a94 <fsm_tuning_run+0x240>
			break;
 8000a88:	bf00      	nop
 8000a8a:	e004      	b.n	8000a96 <fsm_tuning_run+0x242>
			break;
 8000a8c:	bf00      	nop
 8000a8e:	e002      	b.n	8000a96 <fsm_tuning_run+0x242>
			break;
 8000a90:	bf00      	nop
 8000a92:	e000      	b.n	8000a96 <fsm_tuning_run+0x242>
			break;
 8000a94:	bf00      	nop
	}
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000070 	.word	0x20000070
 8000aa0:	20000170 	.word	0x20000170
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	20000150 	.word	0x20000150
 8000ab0:	20000154 	.word	0x20000154
 8000ab4:	20000080 	.word	0x20000080
 8000ab8:	20000138 	.word	0x20000138
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	2000007c 	.word	0x2000007c

08000ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if (huart->Instance==USART2) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_UART_RxCpltCallback+0x5c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d11f      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x52>
	  HAL_UART_Transmit (&huart2 , &temp , 1 , 50) ;
 8000ad6:	2332      	movs	r3, #50	; 0x32
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4912      	ldr	r1, [pc, #72]	; (8000b24 <HAL_UART_RxCpltCallback+0x60>)
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <HAL_UART_RxCpltCallback+0x64>)
 8000ade:	f002 fef5 	bl	80038cc <HAL_UART_Transmit>
	  uart_buffer[index_buffer++]=temp;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_UART_RxCpltCallback+0x68>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	b2d1      	uxtb	r1, r2
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_RxCpltCallback+0x68>)
 8000aec:	7011      	strb	r1, [r2, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_UART_RxCpltCallback+0x60>)
 8000af2:	7819      	ldrb	r1, [r3, #0]
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_UART_RxCpltCallback+0x6c>)
 8000af6:	5499      	strb	r1, [r3, r2]
	  if (index_buffer >= MAX_BUFFER_SIZE)
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_UART_RxCpltCallback+0x68>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b1d      	cmp	r3, #29
 8000afe:	d902      	bls.n	8000b06 <HAL_UART_RxCpltCallback+0x42>
		  index_buffer=0;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_UART_RxCpltCallback+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	  buffer_flag=1;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_UART_RxCpltCallback+0x70>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <HAL_UART_RxCpltCallback+0x60>)
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_RxCpltCallback+0x64>)
 8000b12:	f002 ff5e 	bl	80039d2 <HAL_UART_Receive_IT>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004400 	.word	0x40004400
 8000b24:	20000188 	.word	0x20000188
 8000b28:	20000228 	.word	0x20000228
 8000b2c:	20000189 	.word	0x20000189
 8000b30:	20000294 	.word	0x20000294
 8000b34:	2000018a 	.word	0x2000018a

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 ff14 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f844 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 f96e 	bl	8000e24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b48:	f000 f87c 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b4c:	f000 f8ca 	bl	8000ce4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b50:	f000 f93e 	bl	8000dd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8000b54:	f000 f966 	bl	8000e24 <MX_GPIO_Init>
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <main+0x7c>)
 8000b5a:	f001 ff51 	bl	8002a00 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4915      	ldr	r1, [pc, #84]	; (8000bb8 <main+0x80>)
 8000b62:	4816      	ldr	r0, [pc, #88]	; (8000bbc <main+0x84>)
 8000b64:	f002 ff35 	bl	80039d2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <main+0x88>)
 8000b6c:	f001 fff2 	bl	8002b54 <HAL_TIM_PWM_Start>
  setTimer(1, 10);
 8000b70:	210a      	movs	r1, #10
 8000b72:	2001      	movs	r0, #1
 8000b74:	f000 fb94 	bl	80012a0 <setTimer>
  setTimer(9, 100);
 8000b78:	2164      	movs	r1, #100	; 0x64
 8000b7a:	2009      	movs	r0, #9
 8000b7c:	f000 fb90 	bl	80012a0 <setTimer>
  while (1)
  {
  	fsm_automatic_run();
 8000b80:	f7ff fbde 	bl	8000340 <fsm_automatic_run>
  	fsm_tuning_run();
 8000b84:	f7ff fe66 	bl	8000854 <fsm_tuning_run>
  	manual_fsm_run();
 8000b88:	f7ff fd0c 	bl	80005a4 <manual_fsm_run>
  	fsm_pedestrian();
 8000b8c:	f7ff fda8 	bl	80006e0 <fsm_pedestrian>
	  if(buffer_flag == 1){
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <main+0x8c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d104      	bne.n	8000ba2 <main+0x6a>
		  command_parser_fsm();
 8000b98:	f000 fd62 	bl	8001660 <command_parser_fsm>
		  buffer_flag = 0;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <main+0x8c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_UART_Transmit(&huart2, "unray", 5, 50);
 8000ba2:	2332      	movs	r3, #50	; 0x32
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <main+0x90>)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <main+0x84>)
 8000baa:	f002 fe8f 	bl	80038cc <HAL_UART_Transmit>
	  uart_communication_fsm();
 8000bae:	f000 fddb 	bl	8001768 <uart_communication_fsm>
  	fsm_automatic_run();
 8000bb2:	e7e5      	b.n	8000b80 <main+0x48>
 8000bb4:	200001e0 	.word	0x200001e0
 8000bb8:	20000188 	.word	0x20000188
 8000bbc:	20000228 	.word	0x20000228
 8000bc0:	20000198 	.word	0x20000198
 8000bc4:	2000018a 	.word	0x2000018a
 8000bc8:	08004e0c 	.word	0x08004e0c

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b090      	sub	sp, #64	; 0x40
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	2228      	movs	r2, #40	; 0x28
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fcc8 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fa9e 	bl	8002144 <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f98d 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000c1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fd09 	bl	8002644 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000c38:	f000 f978 	bl	8000f2c <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	; 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c78:	2209      	movs	r2, #9
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000c8a:	f001 fe69 	bl	8002960 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c94:	f000 f94a 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000ca6:	f002 f9c1 	bl	800302c <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 f93c 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000cc2:	f002 fd43 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f92e 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM2_Init+0x9c>)
 8000cd2:	f001 fe95 	bl	8002a00 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200001e0 	.word	0x200001e0

08000ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d1c:	223f      	movs	r2, #63	; 0x3f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3a:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d3c:	f001 fe10 	bl	8002960 <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d46:	f000 f8f1 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d58:	f002 f968 	bl	800302c <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d62:	f000 f8e3 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d68:	f001 fe9c 	bl	8002aa4 <HAL_TIM_PWM_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d72:	f000 f8db 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000d86:	f002 fce1 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d90:	f000 f8cc 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000dac:	f002 f87c 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000db6:	f000 f8b9 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM3_Init+0xe4>)
 8000dbc:	f000 fb3a 	bl	8001434 <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000198 	.word	0x20000198
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_USART2_UART_Init+0x50>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000ddc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000e08:	f002 fd10 	bl	800382c <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e12:	f000 f88b 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000228 	.word	0x20000228
 8000e20:	40004400 	.word	0x40004400

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a2d      	ldr	r2, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e6e:	4822      	ldr	r0, [pc, #136]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e70:	f001 f937 	bl	80020e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e7a:	4820      	ldr	r0, [pc, #128]	; (8000efc <MX_GPIO_Init+0xd8>)
 8000e7c:	f001 f931 	bl	80020e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000e80:	2313      	movs	r3, #19
 8000e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0xd8>)
 8000e94:	f000 ff8a 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000eac:	f000 ff7e 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000eb0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <MX_GPIO_Init+0xd4>)
 8000eca:	f000 ff6f 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000ece:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xd8>)
 8000ee8:	f000 ff60 	bl	8001dac <HAL_GPIO_Init>

}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	40010800 	.word	0x40010800

08000f00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	timer_run();
 8000f08:	f000 fa0c 	bl	8001324 <timer_run>
	getKeyInput(0);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff f947 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff f944 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff f941 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f7ff f93e 	bl	80001a0 <getKeyInput>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <updateLedBuffer>:
//void update7SEGLed(int index) {
//	enState(index);
//	display7SEG(led_buffer[index]);
//}
//
void updateLedBuffer() {
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	led_buffer[0] = currentLed13 / 10;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <updateLedBuffer+0x70>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <updateLedBuffer+0x74>)
 8000f42:	fb82 1203 	smull	r1, r2, r2, r3
 8000f46:	1092      	asrs	r2, r2, #2
 8000f48:	17db      	asrs	r3, r3, #31
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <updateLedBuffer+0x78>)
 8000f4e:	6013      	str	r3, [r2, #0]
	led_buffer[2] = currentLed13 % 10;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <updateLedBuffer+0x70>)
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <updateLedBuffer+0x74>)
 8000f56:	fb83 2301 	smull	r2, r3, r3, r1
 8000f5a:	109a      	asrs	r2, r3, #2
 8000f5c:	17cb      	asrs	r3, r1, #31
 8000f5e:	1ad2      	subs	r2, r2, r3
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1aca      	subs	r2, r1, r3
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <updateLedBuffer+0x78>)
 8000f6c:	609a      	str	r2, [r3, #8]

	led_buffer[1] = currentLed24 / 10;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <updateLedBuffer+0x7c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <updateLedBuffer+0x74>)
 8000f74:	fb82 1203 	smull	r1, r2, r2, r3
 8000f78:	1092      	asrs	r2, r2, #2
 8000f7a:	17db      	asrs	r3, r3, #31
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <updateLedBuffer+0x78>)
 8000f80:	6053      	str	r3, [r2, #4]
	led_buffer[3] = currentLed24 % 10;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <updateLedBuffer+0x7c>)
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <updateLedBuffer+0x74>)
 8000f88:	fb83 2301 	smull	r2, r3, r3, r1
 8000f8c:	109a      	asrs	r2, r3, #2
 8000f8e:	17cb      	asrs	r3, r1, #31
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	1aca      	subs	r2, r1, r3
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <updateLedBuffer+0x78>)
 8000f9e:	60da      	str	r2, [r3, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000150 	.word	0x20000150
 8000fac:	66666667 	.word	0x66666667
 8000fb0:	20000140 	.word	0x20000140
 8000fb4:	20000154 	.word	0x20000154

08000fb8 <clearTrafficLight>:
//  		  	HAL_GPIO_WritePin(SegF_GPIO_Port, SegF_Pin, RESET);
//  		  	HAL_GPIO_WritePin(SegG_GPIO_Port, SegG_Pin, RESET);
//  	  }
//    }
//
  void clearTrafficLight() {
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
//  	HAL_GPIO_WritePin(GPIOA, Yellow1_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Green2_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Red2_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Yellow2_Pin, SET);

  	led_buffer[0] = 0;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <clearTrafficLight+0x30>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
  	led_buffer[1] = 0;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <clearTrafficLight+0x30>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
  	led_buffer[2] = 0;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <clearTrafficLight+0x30>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  	led_buffer[3] = 0;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <clearTrafficLight+0x30>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]

  	currentLed13 = 0;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <clearTrafficLight+0x34>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
  	currentLed24 = 0;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <clearTrafficLight+0x38>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
//  	clear7SEG();
  }
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000140 	.word	0x20000140
 8000fec:	20000150 	.word	0x20000150
 8000ff0:	20000154 	.word	0x20000154

08000ff4 <onAmber1>:

  void onAmber1() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <onAmber1+0x20>)
 8001000:	f001 f86f 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2108      	movs	r1, #8
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <onAmber1+0x24>)
 800100a:	f001 f86a 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010800 	.word	0x40010800
 8001018:	40010c00 	.word	0x40010c00

0800101c <onRed1>:

  void onRed1() {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <onRed1+0x20>)
 8001028:	f001 f85b 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2108      	movs	r1, #8
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <onRed1+0x24>)
 8001032:	f001 f856 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00

08001044 <onGreen1>:

  void onGreen1() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <onGreen1+0x20>)
 8001050:	f001 f847 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2108      	movs	r1, #8
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <onGreen1+0x24>)
 800105a:	f001 f842 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010800 	.word	0x40010800
 8001068:	40010c00 	.word	0x40010c00

0800106c <onAmber2>:

  void onAmber2() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2120      	movs	r1, #32
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <onAmber2+0x1c>)
 8001076:	f001 f834 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2110      	movs	r1, #16
 800107e:	4802      	ldr	r0, [pc, #8]	; (8001088 <onAmber2+0x1c>)
 8001080:	f001 f82f 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010c00 	.word	0x40010c00

0800108c <onRed2>:

  void onRed2() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2120      	movs	r1, #32
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <onRed2+0x1c>)
 8001096:	f001 f824 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2110      	movs	r1, #16
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <onRed2+0x1c>)
 80010a0:	f001 f81f 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010c00 	.word	0x40010c00

080010ac <onGreen2>:

  void onGreen2() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2120      	movs	r1, #32
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <onGreen2+0x1c>)
 80010b6:	f001 f814 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2110      	movs	r1, #16
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <onGreen2+0x1c>)
 80010c0:	f001 f80f 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010c00 	.word	0x40010c00

080010cc <onAmberPedes>:

  void onAmberPedes() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <onAmberPedes+0x20>)
 80010d8:	f001 f803 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <onAmberPedes+0x24>)
 80010e4:	f000 fffd 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40010800 	.word	0x40010800

080010f4 <onGreenPedes>:
  void onGreenPedes() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <onGreenPedes+0x20>)
 8001100:	f000 ffef 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <onGreenPedes+0x24>)
 800110c:	f000 ffe9 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40010800 	.word	0x40010800

0800111c <onRedPedes>:
  void onRedPedes() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <onRedPedes+0x20>)
 8001128:	f000 ffdb 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <onRedPedes+0x24>)
 8001134:	f000 ffd5 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010c00 	.word	0x40010c00
 8001140:	40010800 	.word	0x40010800

08001144 <clearPedesLed>:
  void clearPedesLed() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <clearPedesLed+0x20>)
 8001150:	f000 ffc7 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <clearPedesLed+0x24>)
 800115c:	f000 ffc1 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010c00 	.word	0x40010c00
 8001168:	40010800 	.word	0x40010800

0800116c <clearled>:


  void clearled() {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <clearled+0x34>)
 8001178:	f000 ffb3 	bl	80020e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2108      	movs	r1, #8
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <clearled+0x38>)
 8001182:	f000 ffae 	bl	80020e2 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <clearled+0x38>)
 800118c:	f000 ffa9 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <clearled+0x38>)
 8001196:	f000 ffa4 	bl	80020e2 <HAL_GPIO_WritePin>
  }
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <buzzer_on>:

  int time_buzzer;
  TIM_HandleTypeDef htim3;
  int duty=0;

  void buzzer_on() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	  if (status==AUTO_RED_GREEN) {
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <buzzer_on+0xc0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d157      	bne.n	8001264 <buzzer_on+0xbc>
		  if (buzzer_flag==1) {
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <buzzer_on+0xc4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d131      	bne.n	8001220 <buzzer_on+0x78>
			  if (currentLed24>2) {
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <buzzer_on+0xc8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	dd0a      	ble.n	80011da <buzzer_on+0x32>
				  currentLed24=2;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <buzzer_on+0xc8>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
				  setTimer(3, 200);
 80011ca:	21c8      	movs	r1, #200	; 0xc8
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f867 	bl	80012a0 <setTimer>
				  time_buzzer=200;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <buzzer_on+0xcc>)
 80011d4:	22c8      	movs	r2, #200	; 0xc8
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e019      	b.n	800120e <buzzer_on+0x66>
//				  onRedPedes();
			  } else {
				  setTimer(3, (currentLed24+1)*100);
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <buzzer_on+0xc8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	0091      	lsls	r1, r2, #2
 80011ec:	461a      	mov	r2, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f851 	bl	80012a0 <setTimer>
				  time_buzzer=(currentLed24+1)*100;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <buzzer_on+0xc8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <buzzer_on+0xcc>)
 800120c:	6013      	str	r3, [r2, #0]
//				  onAmberPedes();
			  }
			  buzzer_flag=0;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <buzzer_on+0xc4>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
			  duty=0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <buzzer_on+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
			  timerFlag[6]=1;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <buzzer_on+0xd4>)
 800121c:	2201      	movs	r2, #1
 800121e:	719a      	strb	r2, [r3, #6]
		  }
		  if (duty>=100) {
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <buzzer_on+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b63      	cmp	r3, #99	; 0x63
 8001226:	dd02      	ble.n	800122e <buzzer_on+0x86>
			  duty=0;
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <buzzer_on+0xd0>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
		  }
		  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,duty);
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <buzzer_on+0xd0>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <buzzer_on+0xd8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
		  if (timerFlag[6]==1) {
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <buzzer_on+0xd4>)
 800123a:	799b      	ldrb	r3, [r3, #6]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d111      	bne.n	8001264 <buzzer_on+0xbc>
			  duty+=1;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <buzzer_on+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <buzzer_on+0xd0>)
 8001248:	6013      	str	r3, [r2, #0]
			  setTimer(6, time_buzzer/100);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <buzzer_on+0xcc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <buzzer_on+0xdc>)
 8001250:	fb82 1203 	smull	r1, r2, r2, r3
 8001254:	1152      	asrs	r2, r2, #5
 8001256:	17db      	asrs	r3, r3, #31
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b29b      	uxth	r3, r3
 800125c:	4619      	mov	r1, r3
 800125e:	2006      	movs	r0, #6
 8001260:	f000 f81e 	bl	80012a0 <setTimer>
		  }
	  }
  }
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000070 	.word	0x20000070
 800126c:	2000013c 	.word	0x2000013c
 8001270:	20000154 	.word	0x20000154
 8001274:	20000270 	.word	0x20000270
 8001278:	20000158 	.word	0x20000158
 800127c:	20000170 	.word	0x20000170
 8001280:	20000198 	.word	0x20000198
 8001284:	51eb851f 	.word	0x51eb851f

08001288 <buzzer_off>:

  void buzzer_off() {
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <buzzer_off+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000198 	.word	0x20000198

080012a0 <setTimer>:
#include "software_timer.h"

uint16_t timerCounter[MAX_TIMER] = {0};
uint8_t timerFlag[MAX_TIMER] = {0};

void setTimer(uint8_t index, uint16_t duration) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80bb      	strh	r3, [r7, #4]
	timerCounter[index] = duration;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4906      	ldr	r1, [pc, #24]	; (80012cc <setTimer+0x2c>)
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timerFlag[index] = 0;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <setTimer+0x30>)
 80012be:	2100      	movs	r1, #0
 80012c0:	54d1      	strb	r1, [r2, r3]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	2000015c 	.word	0x2000015c
 80012d0:	20000170 	.word	0x20000170

080012d4 <timerRun>:

void timerRun(uint8_t index){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	if(timerCounter[index] > 0){
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <timerRun+0x48>)
 80012e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d012      	beq.n	8001310 <timerRun+0x3c>
		timerCounter[index]--;
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <timerRun+0x48>)
 80012ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012f2:	3a01      	subs	r2, #1
 80012f4:	b291      	uxth	r1, r2
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <timerRun+0x48>)
 80012f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (timerCounter[index] <= 0){
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <timerRun+0x48>)
 8001300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <timerRun+0x3c>
			timerFlag[index] = 1;
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <timerRun+0x4c>)
 800130c:	2101      	movs	r1, #1
 800130e:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000015c 	.word	0x2000015c
 8001320:	20000170 	.word	0x20000170

08001324 <timer_run>:

void timer_run() {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	timerRun(0);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ffd3 	bl	80012d4 <timerRun>
	timerRun(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff ffd0 	bl	80012d4 <timerRun>
	timerRun(2);
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff ffcd 	bl	80012d4 <timerRun>
	timerRun(3);
 800133a:	2003      	movs	r0, #3
 800133c:	f7ff ffca 	bl	80012d4 <timerRun>
	timerRun(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f7ff ffc7 	bl	80012d4 <timerRun>
	timerRun(6);
 8001346:	2006      	movs	r0, #6
 8001348:	f7ff ffc4 	bl	80012d4 <timerRun>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_MspInit+0x5c>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_MspInit+0x5c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x5c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_MspInit+0x5c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_MspInit+0x60>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_MspInit+0x60>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c4:	d114      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201c      	movs	r0, #28
 80013e4:	f000 fbf9 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 fc12 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ee:	e018      	b.n	8001422 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_TIM_Base_MspInit+0x7c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d113      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201d      	movs	r0, #29
 8001418:	f000 fbdf 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800141c:	201d      	movs	r0, #29
 800141e:	f000 fbf8 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	40000400 	.word	0x40000400

08001434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_TIM_MspPostInit+0x58>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d117      	bne.n	8001484 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_TIM_MspPostInit+0x60>)
 8001480:	f000 fc94 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40000400 	.word	0x40000400
 8001490:	40021000 	.word	0x40021000
 8001494:	40010800 	.word	0x40010800

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d137      	bne.n	8001528 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_UART_MspInit+0x9c>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <HAL_UART_MspInit+0x9c>)
 80014be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c2:	61d3      	str	r3, [r2, #28]
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_UART_MspInit+0x9c>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_UART_MspInit+0x9c>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_UART_MspInit+0x9c>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x9c>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <HAL_UART_MspInit+0xa0>)
 80014fc:	f000 fc56 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001500:	2308      	movs	r3, #8
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_UART_MspInit+0xa0>)
 8001514:	f000 fc4a 	bl	8001dac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2026      	movs	r0, #38	; 0x26
 800151e:	f000 fb5c 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001522:	2026      	movs	r0, #38	; 0x26
 8001524:	f000 fb75 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004400 	.word	0x40004400
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001582:	f000 fa37 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM2_IRQHandler+0x10>)
 8001592:	f001 fb81 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200001e0 	.word	0x200001e0

080015a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM3_IRQHandler+0x10>)
 80015a6:	f001 fb77 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000198 	.word	0x20000198

080015b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <USART2_IRQHandler+0x10>)
 80015ba:	f002 fa2f 	bl	8003a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000228 	.word	0x20000228

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f002 ff90 	bl	800451c <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20005000 	.word	0x20005000
 8001628:	00000400 	.word	0x00000400
 800162c:	2000017c 	.word	0x2000017c
 8001630:	20000330 	.word	0x20000330

08001634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <clear_buffer>:
char str[100];


UART_HandleTypeDef huart2;

void clear_buffer() {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	memset(uart_buffer,0,sizeof(uart_buffer));
 8001644:	221e      	movs	r2, #30
 8001646:	2100      	movs	r1, #0
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <clear_buffer+0x18>)
 800164a:	f002 ff91 	bl	8004570 <memset>
	index_buffer=0;
 800164e:	4b03      	ldr	r3, [pc, #12]	; (800165c <clear_buffer+0x1c>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000294 	.word	0x20000294
 800165c:	20000189 	.word	0x20000189

08001660 <command_parser_fsm>:

void command_parser_fsm() {
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	af00      	add	r7, sp, #0
	switch(cp_state){
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <command_parser_fsm+0x88>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d002      	beq.n	8001672 <command_parser_fsm+0x12>
 800166c:	2b02      	cmp	r3, #2
 800166e:	d00a      	beq.n	8001686 <command_parser_fsm+0x26>
		else if(index_buffer == 0){
			cp_state = WAIT;
		}
		break;
	default:
		break;
 8001670:	e037      	b.n	80016e2 <command_parser_fsm+0x82>
		if(temp == '!'){
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <command_parser_fsm+0x8c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b21      	cmp	r3, #33	; 0x21
 8001678:	d130      	bne.n	80016dc <command_parser_fsm+0x7c>
			clear_buffer();
 800167a:	f7ff ffe1 	bl	8001640 <clear_buffer>
			cp_state = RECEIVE;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <command_parser_fsm+0x88>)
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
		break;
 8001684:	e02a      	b.n	80016dc <command_parser_fsm+0x7c>
		if(temp == '!'){
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <command_parser_fsm+0x8c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b21      	cmp	r3, #33	; 0x21
 800168c:	d102      	bne.n	8001694 <command_parser_fsm+0x34>
			clear_buffer();
 800168e:	f7ff ffd7 	bl	8001640 <clear_buffer>
		break;
 8001692:	e025      	b.n	80016e0 <command_parser_fsm+0x80>
		else if(temp == '#'){
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <command_parser_fsm+0x8c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b23      	cmp	r3, #35	; 0x23
 800169a:	d117      	bne.n	80016cc <command_parser_fsm+0x6c>
			command_flag = 1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <command_parser_fsm+0x90>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
			memcpy(command_data, uart_buffer, sizeof(command_data));
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <command_parser_fsm+0x94>)
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <command_parser_fsm+0x98>)
 80016a6:	6814      	ldr	r4, [r2, #0]
 80016a8:	6850      	ldr	r0, [r2, #4]
 80016aa:	6891      	ldr	r1, [r2, #8]
 80016ac:	68d5      	ldr	r5, [r2, #12]
 80016ae:	601c      	str	r4, [r3, #0]
 80016b0:	6058      	str	r0, [r3, #4]
 80016b2:	6099      	str	r1, [r3, #8]
 80016b4:	60dd      	str	r5, [r3, #12]
 80016b6:	6914      	ldr	r4, [r2, #16]
 80016b8:	6950      	ldr	r0, [r2, #20]
 80016ba:	6991      	ldr	r1, [r2, #24]
 80016bc:	611c      	str	r4, [r3, #16]
 80016be:	6158      	str	r0, [r3, #20]
 80016c0:	6199      	str	r1, [r3, #24]
 80016c2:	8b92      	ldrh	r2, [r2, #28]
 80016c4:	839a      	strh	r2, [r3, #28]
			clear_buffer();
 80016c6:	f7ff ffbb 	bl	8001640 <clear_buffer>
		break;
 80016ca:	e009      	b.n	80016e0 <command_parser_fsm+0x80>
		else if(index_buffer == 0){
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <command_parser_fsm+0x9c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <command_parser_fsm+0x80>
			cp_state = WAIT;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <command_parser_fsm+0x88>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
		break;
 80016da:	e001      	b.n	80016e0 <command_parser_fsm+0x80>
		break;
 80016dc:	bf00      	nop
 80016de:	e000      	b.n	80016e2 <command_parser_fsm+0x82>
		break;
 80016e0:	bf00      	nop
	}
}
 80016e2:	bf00      	nop
 80016e4:	bdb0      	pop	{r4, r5, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000088 	.word	0x20000088
 80016ec:	20000188 	.word	0x20000188
 80016f0:	2000018c 	.word	0x2000018c
 80016f4:	20000274 	.word	0x20000274
 80016f8:	20000294 	.word	0x20000294
 80016fc:	20000189 	.word	0x20000189

08001700 <isRSTreceived>:

int isRSTreceived(){
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	if(command_data[0] == 'R' && command_data[1] == 'S' && command_data[2] == 'T' && command_data[3] == '#')
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <isRSTreceived+0x34>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b52      	cmp	r3, #82	; 0x52
 800170a:	d10d      	bne.n	8001728 <isRSTreceived+0x28>
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <isRSTreceived+0x34>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	2b53      	cmp	r3, #83	; 0x53
 8001712:	d109      	bne.n	8001728 <isRSTreceived+0x28>
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <isRSTreceived+0x34>)
 8001716:	789b      	ldrb	r3, [r3, #2]
 8001718:	2b54      	cmp	r3, #84	; 0x54
 800171a:	d105      	bne.n	8001728 <isRSTreceived+0x28>
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <isRSTreceived+0x34>)
 800171e:	78db      	ldrb	r3, [r3, #3]
 8001720:	2b23      	cmp	r3, #35	; 0x23
 8001722:	d101      	bne.n	8001728 <isRSTreceived+0x28>
		return 1;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <isRSTreceived+0x2a>
	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000274 	.word	0x20000274

08001738 <isOKreceived>:

int isOKreceived(){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	if(command_data[0] == 'O' && command_data[1] == 'K' && command_data[2] == '#')
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <isOKreceived+0x2c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b4f      	cmp	r3, #79	; 0x4f
 8001742:	d109      	bne.n	8001758 <isOKreceived+0x20>
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <isOKreceived+0x2c>)
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2b4b      	cmp	r3, #75	; 0x4b
 800174a:	d105      	bne.n	8001758 <isOKreceived+0x20>
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <isOKreceived+0x2c>)
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	2b23      	cmp	r3, #35	; 0x23
 8001752:	d101      	bne.n	8001758 <isOKreceived+0x20>
		return 1;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <isOKreceived+0x22>
	return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000274 	.word	0x20000274

08001768 <uart_communication_fsm>:

void uart_communication_fsm() {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	switch(cm_state){
 800176c:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <uart_communication_fsm+0x17c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <uart_communication_fsm+0x12>
 8001774:	2b02      	cmp	r3, #2
 8001776:	d017      	beq.n	80017a8 <uart_communication_fsm+0x40>
			setTimer(9, 100);
		}

		break;
	default:
		break;
 8001778:	e0b2      	b.n	80018e0 <uart_communication_fsm+0x178>
		if(isRSTreceived()){
 800177a:	f7ff ffc1 	bl	8001700 <isRSTreceived>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80aa 	beq.w	80018da <uart_communication_fsm+0x172>
			ADC_value = led_buffer[0] * 10 + led_buffer[1];
 8001786:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <uart_communication_fsm+0x180>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	461a      	mov	r2, r3
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <uart_communication_fsm+0x180>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4413      	add	r3, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <uart_communication_fsm+0x184>)
 800179e:	601a      	str	r2, [r3, #0]
			cm_state = SENDING;
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <uart_communication_fsm+0x17c>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
		break;
 80017a6:	e098      	b.n	80018da <uart_communication_fsm+0x172>
		if(timerFlag[9] == 1){
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <uart_communication_fsm+0x188>)
 80017aa:	7a5b      	ldrb	r3, [r3, #9]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f040 8096 	bne.w	80018de <uart_communication_fsm+0x176>
			if(isOKreceived()){
 80017b2:	f7ff ffc1 	bl	8001738 <isOKreceived>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <uart_communication_fsm+0x6c>
					clear_buffer();
 80017bc:	f7ff ff40 	bl	8001640 <clear_buffer>
					command_flag = 0;
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <uart_communication_fsm+0x18c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
					cp_state = WAIT;
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <uart_communication_fsm+0x190>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
					cm_state = RST_WAITING;
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <uart_communication_fsm+0x17c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e07d      	b.n	80018d0 <uart_communication_fsm+0x168>
					clear_buffer();
 80017d4:	f7ff ff34 	bl	8001640 <clear_buffer>
					memset(command_data, 0, sizeof(command_data));
 80017d8:	221e      	movs	r2, #30
 80017da:	2100      	movs	r1, #0
 80017dc:	4847      	ldr	r0, [pc, #284]	; (80018fc <uart_communication_fsm+0x194>)
 80017de:	f002 fec7 	bl	8004570 <memset>
					ADC_value = led_buffer[0] * 10 + led_buffer[1];
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <uart_communication_fsm+0x180>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <uart_communication_fsm+0x180>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b3c      	ldr	r3, [pc, #240]	; (80018ec <uart_communication_fsm+0x184>)
 80017fa:	601a      	str	r2, [r3, #0]
					ADC_value2 = led_buffer[2] * 10 + led_buffer[3];
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <uart_communication_fsm+0x180>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	461a      	mov	r2, r3
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <uart_communication_fsm+0x180>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4413      	add	r3, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <uart_communication_fsm+0x198>)
 8001814:	601a      	str	r2, [r3, #0]
					if(status == AUTO_AMBER_RED || status == AUTO_GREEN_RED || status == AUTO_RED_AMBER || status == AUTO_RED_GREEN)
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <uart_communication_fsm+0x19c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b05      	cmp	r3, #5
 800181c:	d00b      	beq.n	8001836 <uart_communication_fsm+0xce>
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <uart_communication_fsm+0x19c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b04      	cmp	r3, #4
 8001824:	d007      	beq.n	8001836 <uart_communication_fsm+0xce>
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <uart_communication_fsm+0x19c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d003      	beq.n	8001836 <uart_communication_fsm+0xce>
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <uart_communication_fsm+0x19c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d110      	bne.n	8001858 <uart_communication_fsm+0xf0>
						HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!AUTOMATIC: %d, %d# \r\n", ADC_value, ADC_value2), 1000);
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <uart_communication_fsm+0x184>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <uart_communication_fsm+0x198>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4932      	ldr	r1, [pc, #200]	; (8001908 <uart_communication_fsm+0x1a0>)
 8001840:	4832      	ldr	r0, [pc, #200]	; (800190c <uart_communication_fsm+0x1a4>)
 8001842:	f002 fe9d 	bl	8004580 <siprintf>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	492f      	ldr	r1, [pc, #188]	; (800190c <uart_communication_fsm+0x1a4>)
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <uart_communication_fsm+0x1a8>)
 8001852:	f002 f83b 	bl	80038cc <HAL_UART_Transmit>
 8001856:	e03b      	b.n	80018d0 <uart_communication_fsm+0x168>
					else if(status == MANUAL_AMBER_RED || status == MANUAL_GREEN_RED || status == MANUAL_RED_AMBER || status == MANUAL_RED_GREEN)
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <uart_communication_fsm+0x19c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b1d      	cmp	r3, #29
 800185e:	d00b      	beq.n	8001878 <uart_communication_fsm+0x110>
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <uart_communication_fsm+0x19c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b1c      	cmp	r3, #28
 8001866:	d007      	beq.n	8001878 <uart_communication_fsm+0x110>
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <uart_communication_fsm+0x19c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b1b      	cmp	r3, #27
 800186e:	d003      	beq.n	8001878 <uart_communication_fsm+0x110>
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <uart_communication_fsm+0x19c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b1a      	cmp	r3, #26
 8001876:	d110      	bne.n	800189a <uart_communication_fsm+0x132>
						HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!MANUAL: %d, %d# \r\n", ADC_value, ADC_value2), 1000);
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <uart_communication_fsm+0x184>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <uart_communication_fsm+0x198>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4924      	ldr	r1, [pc, #144]	; (8001914 <uart_communication_fsm+0x1ac>)
 8001882:	4822      	ldr	r0, [pc, #136]	; (800190c <uart_communication_fsm+0x1a4>)
 8001884:	f002 fe7c 	bl	8004580 <siprintf>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001890:	491e      	ldr	r1, [pc, #120]	; (800190c <uart_communication_fsm+0x1a4>)
 8001892:	481f      	ldr	r0, [pc, #124]	; (8001910 <uart_communication_fsm+0x1a8>)
 8001894:	f002 f81a 	bl	80038cc <HAL_UART_Transmit>
 8001898:	e01a      	b.n	80018d0 <uart_communication_fsm+0x168>
					else if(status == TUNING_AMBER || status == TUNING_GREEN || status == TUNING_RED)
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <uart_communication_fsm+0x19c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b16      	cmp	r3, #22
 80018a0:	d007      	beq.n	80018b2 <uart_communication_fsm+0x14a>
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <uart_communication_fsm+0x19c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b17      	cmp	r3, #23
 80018a8:	d003      	beq.n	80018b2 <uart_communication_fsm+0x14a>
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <uart_communication_fsm+0x19c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b15      	cmp	r3, #21
 80018b0:	d10e      	bne.n	80018d0 <uart_communication_fsm+0x168>
						HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TUNING: %d# \r\n", ADC_value), 1000);
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <uart_communication_fsm+0x184>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4917      	ldr	r1, [pc, #92]	; (8001918 <uart_communication_fsm+0x1b0>)
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <uart_communication_fsm+0x1a4>)
 80018bc:	f002 fe60 	bl	8004580 <siprintf>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c8:	4910      	ldr	r1, [pc, #64]	; (800190c <uart_communication_fsm+0x1a4>)
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <uart_communication_fsm+0x1a8>)
 80018cc:	f001 fffe 	bl	80038cc <HAL_UART_Transmit>
			setTimer(9, 100);
 80018d0:	2164      	movs	r1, #100	; 0x64
 80018d2:	2009      	movs	r0, #9
 80018d4:	f7ff fce4 	bl	80012a0 <setTimer>
		break;
 80018d8:	e001      	b.n	80018de <uart_communication_fsm+0x176>
		break;
 80018da:	bf00      	nop
 80018dc:	e000      	b.n	80018e0 <uart_communication_fsm+0x178>
		break;
 80018de:	bf00      	nop
	}
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000008c 	.word	0x2000008c
 80018e8:	20000140 	.word	0x20000140
 80018ec:	20000180 	.word	0x20000180
 80018f0:	20000170 	.word	0x20000170
 80018f4:	2000018c 	.word	0x2000018c
 80018f8:	20000088 	.word	0x20000088
 80018fc:	20000274 	.word	0x20000274
 8001900:	20000184 	.word	0x20000184
 8001904:	20000070 	.word	0x20000070
 8001908:	08004e14 	.word	0x08004e14
 800190c:	200002b4 	.word	0x200002b4
 8001910:	20000228 	.word	0x20000228
 8001914:	08004e2c 	.word	0x08004e2c
 8001918:	08004e40 	.word	0x08004e40

0800191c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800191c:	f7ff fe8a 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001922:	490c      	ldr	r1, [pc, #48]	; (8001954 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001938:	4c09      	ldr	r4, [pc, #36]	; (8001960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f002 fdef 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194a:	f7ff f8f5 	bl	8000b38 <main>
  bx lr
 800194e:	4770      	bx	lr
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001958:	08004eb8 	.word	0x08004eb8
  ldr r2, =_sbss
 800195c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001960:	2000032c 	.word	0x2000032c

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x28>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x28>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f923 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fce4 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f93b 	bl	8001c2e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f903 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000084 	.word	0x20000084
 80019ec:	20000094 	.word	0x20000094
 80019f0:	20000090 	.word	0x20000090

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x1c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x20>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <HAL_IncTick+0x20>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000094 	.word	0x20000094
 8001a14:	20000318 	.word	0x20000318

08001a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_GetTick+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000318 	.word	0x20000318

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <__NVIC_EnableIRQ+0x34>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff90 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff2d 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff42 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff35 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d008      	beq.n	8001c70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e020      	b.n	8001cb2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d005      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e051      	b.n	8001d84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 020e 	bic.w	r2, r2, #14
 8001cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_DMA_Abort_IT+0xd4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d029      	beq.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <HAL_DMA_Abort_IT+0xd8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_Abort_IT+0x9e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_DMA_Abort_IT+0xdc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01a      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x98>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_DMA_Abort_IT+0xe0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x92>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_DMA_Abort_IT+0xe4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_Abort_IT+0x8c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_DMA_Abort_IT+0xe8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_DMA_Abort_IT+0x86>
 8001d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d40:	e00e      	b.n	8001d60 <HAL_DMA_Abort_IT+0xa4>
 8001d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d46:	e00b      	b.n	8001d60 <HAL_DMA_Abort_IT+0xa4>
 8001d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4c:	e008      	b.n	8001d60 <HAL_DMA_Abort_IT+0xa4>
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	e005      	b.n	8001d60 <HAL_DMA_Abort_IT+0xa4>
 8001d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d58:	e002      	b.n	8001d60 <HAL_DMA_Abort_IT+0xa4>
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	e000      	b.n	8001d60 <HAL_DMA_Abort_IT+0xa4>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_DMA_Abort_IT+0xec>)
 8001d62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    } 
  }
  return status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020008 	.word	0x40020008
 8001d94:	4002001c 	.word	0x4002001c
 8001d98:	40020030 	.word	0x40020030
 8001d9c:	40020044 	.word	0x40020044
 8001da0:	40020058 	.word	0x40020058
 8001da4:	4002006c 	.word	0x4002006c
 8001da8:	40020000 	.word	0x40020000

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b08b      	sub	sp, #44	; 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	e169      	b.n	8002094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8158 	bne.w	800208e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a9a      	ldr	r2, [pc, #616]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d05e      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001de8:	4a98      	ldr	r2, [pc, #608]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d875      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dee:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d058      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001df4:	4a96      	ldr	r2, [pc, #600]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d86f      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dfa:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d052      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e00:	4a94      	ldr	r2, [pc, #592]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d869      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e06:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04c      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e0c:	4a92      	ldr	r2, [pc, #584]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d863      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e12:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d046      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a90      	ldr	r2, [pc, #576]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d85d      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d82a      	bhi.n	8001e78 <HAL_GPIO_Init+0xcc>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d859      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_GPIO_Init+0x80>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001e81 	.word	0x08001e81
 8001e34:	08001e93 	.word	0x08001e93
 8001e38:	08001ed5 	.word	0x08001ed5
 8001e3c:	08001edb 	.word	0x08001edb
 8001e40:	08001edb 	.word	0x08001edb
 8001e44:	08001edb 	.word	0x08001edb
 8001e48:	08001edb 	.word	0x08001edb
 8001e4c:	08001edb 	.word	0x08001edb
 8001e50:	08001edb 	.word	0x08001edb
 8001e54:	08001edb 	.word	0x08001edb
 8001e58:	08001edb 	.word	0x08001edb
 8001e5c:	08001edb 	.word	0x08001edb
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001edb 	.word	0x08001edb
 8001e68:	08001edb 	.word	0x08001edb
 8001e6c:	08001edb 	.word	0x08001edb
 8001e70:	08001e89 	.word	0x08001e89
 8001e74:	08001e9d 	.word	0x08001e9d
 8001e78:	4a79      	ldr	r2, [pc, #484]	; (8002060 <HAL_GPIO_Init+0x2b4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7e:	e02c      	b.n	8001eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e029      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e024      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	3308      	adds	r3, #8
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e01f      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e01a      	b.n	8001edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e013      	b.n	8001edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	611a      	str	r2, [r3, #16]
          break;
 8001ec6:	e009      	b.n	8001edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	615a      	str	r2, [r3, #20]
          break;
 8001ed2:	e003      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x130>
          break;
 8001eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d801      	bhi.n	8001ee6 <HAL_GPIO_Init+0x13a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_Init+0x13e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_GPIO_Init+0x14c>
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x152>
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3b08      	subs	r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	210f      	movs	r1, #15
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	6a39      	ldr	r1, [r7, #32]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b1 	beq.w	800208e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1ec>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1e8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <HAL_GPIO_Init+0x2c8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_GPIO_Init+0x2cc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1e0>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001faa:	492f      	ldr	r1, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	492c      	ldr	r1, [pc, #176]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4928      	ldr	r1, [pc, #160]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	491e      	ldr	r1, [pc, #120]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4918      	ldr	r1, [pc, #96]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	4914      	ldr	r1, [pc, #80]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d021      	beq.n	8002080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e021      	b.n	800208e <HAL_GPIO_Init+0x2e2>
 800204a:	bf00      	nop
 800204c:	10320000 	.word	0x10320000
 8002050:	10310000 	.word	0x10310000
 8002054:	10220000 	.word	0x10220000
 8002058:	10210000 	.word	0x10210000
 800205c:	10120000 	.word	0x10120000
 8002060:	10110000 	.word	0x10110000
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40011000 	.word	0x40011000
 8002078:	40011400 	.word	0x40011400
 800207c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	43db      	mvns	r3, r3
 8002088:	4909      	ldr	r1, [pc, #36]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800208a:	4013      	ands	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f47f ae8e 	bne.w	8001dc0 <HAL_GPIO_Init+0x14>
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f2:	787b      	ldrb	r3, [r7, #1]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020fe:	e003      	b.n	8002108 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002124:	887a      	ldrh	r2, [r7, #2]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	041a      	lsls	r2, r3, #16
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43d9      	mvns	r1, r3
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	400b      	ands	r3, r1
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e26c      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8087 	beq.w	8002272 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002164:	4b92      	ldr	r3, [pc, #584]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00c      	beq.n	800218a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002170:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d112      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5e>
 800217c:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002188:	d10b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218a:	4b89      	ldr	r3, [pc, #548]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d06c      	beq.n	8002270 <HAL_RCC_OscConfig+0x12c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d168      	bne.n	8002270 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e246      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x76>
 80021ac:	4b80      	ldr	r3, [pc, #512]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a7f      	ldr	r2, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e02e      	b.n	8002218 <HAL_RCC_OscConfig+0xd4>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x98>
 80021c2:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a77      	ldr	r2, [pc, #476]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xd4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0xbc>
 80021e6:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a71      	ldr	r2, [pc, #452]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6e      	ldr	r2, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xd4>
 8002200:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a67      	ldr	r2, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fbfa 	bl	8001a18 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fbf6 	bl	8001a18 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1fa      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xe4>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff fbe6 	bl	8001a18 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fbe2 	bl	8001a18 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1e6      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x10c>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d063      	beq.n	8002346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228a:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x18c>
 8002296:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x176>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1ba      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4939      	ldr	r1, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e03a      	b.n	8002346 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff fb9b 	bl	8001a18 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e6:	f7ff fb97 	bl	8001a18 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e19b      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4927      	ldr	r1, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	e015      	b.n	8002346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_RCC_OscConfig+0x270>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fb7a 	bl	8001a18 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002328:	f7ff fb76 	bl	8001a18 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e17a      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03a      	beq.n	80023c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d019      	beq.n	800238e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7ff fb5a 	bl	8001a18 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7ff fb56 	bl	8001a18 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e15a      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f000 facc 	bl	8002924 <RCC_Delay>
 800238c:	e01c      	b.n	80023c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7ff fb40 	bl	8001a18 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239a:	e00f      	b.n	80023bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7ff fb3c 	bl	8001a18 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d908      	bls.n	80023bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e140      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	42420000 	.word	0x42420000
 80023b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b9e      	ldr	r3, [pc, #632]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e9      	bne.n	800239c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a6 	beq.w	8002522 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b97      	ldr	r3, [pc, #604]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b94      	ldr	r3, [pc, #592]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a93      	ldr	r2, [pc, #588]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b91      	ldr	r3, [pc, #580]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b8e      	ldr	r3, [pc, #568]	; (800263c <HAL_RCC_OscConfig+0x4f8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b8b      	ldr	r3, [pc, #556]	; (800263c <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a8a      	ldr	r2, [pc, #552]	; (800263c <HAL_RCC_OscConfig+0x4f8>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7ff fafd 	bl	8001a18 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7ff faf9 	bl	8001a18 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0fd      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b81      	ldr	r3, [pc, #516]	; (800263c <HAL_RCC_OscConfig+0x4f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x312>
 8002448:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e02d      	b.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x334>
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a75      	ldr	r2, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a72      	ldr	r2, [pc, #456]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	e01c      	b.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x356>
 8002480:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a6c      	ldr	r2, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a69      	ldr	r2, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a66      	ldr	r2, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4b64      	ldr	r3, [pc, #400]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a63      	ldr	r2, [pc, #396]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d015      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ba:	f7ff faad 	bl	8001a18 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7ff faa9 	bl	8001a18 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0ab      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b57      	ldr	r3, [pc, #348]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCC_OscConfig+0x37e>
 80024e4:	e014      	b.n	8002510 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7ff fa97 	bl	8001a18 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7ff fa93 	bl	8001a18 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e095      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b48      	ldr	r3, [pc, #288]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a47      	ldr	r2, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8081 	beq.w	800262e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252c:	4b42      	ldr	r3, [pc, #264]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d061      	beq.n	80025fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d146      	bne.n	80025ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_OscConfig+0x4fc>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff fa67 	bl	8001a18 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7ff fa63 	bl	8001a18 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e067      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002576:	4b30      	ldr	r3, [pc, #192]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	492d      	ldr	r1, [pc, #180]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a19      	ldr	r1, [r3, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	430b      	orrs	r3, r1
 800259a:	4927      	ldr	r1, [pc, #156]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x4fc>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fa37 	bl	8001a18 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fa33 	bl	8001a18 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e037      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x46a>
 80025cc:	e02f      	b.n	800262e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_RCC_OscConfig+0x4fc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff fa20 	bl	8001a18 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff fa1c 	bl	8001a18 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e020      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x498>
 80025fa:	e018      	b.n	800262e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e013      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	429a      	cmp	r2, r3
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
 8002640:	42420060 	.word	0x42420060

08002644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d0      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4965      	ldr	r1, [pc, #404]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d040      	beq.n	8002764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d115      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e073      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06b      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4936      	ldr	r1, [pc, #216]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002734:	f7ff f970 	bl	8001a18 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7ff f96c 	bl	8001a18 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e053      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d210      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4922      	ldr	r1, [pc, #136]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f821 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	490a      	ldr	r1, [pc, #40]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	5ccb      	ldrb	r3, [r1, r3]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1cc>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f8ce 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40022000 	.word	0x40022000
 8002808:	40021000 	.word	0x40021000
 800280c:	08004e50 	.word	0x08004e50
 8002810:	20000084 	.word	0x20000084
 8002814:	20000090 	.word	0x20000090

08002818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x30>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x36>
 8002846:	e027      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800284a:	613b      	str	r3, [r7, #16]
      break;
 800284c:	e027      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0c5b      	lsrs	r3, r3, #17
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800287a:	fb02 f203 	mul.w	r2, r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e004      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	613b      	str	r3, [r7, #16]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	693b      	ldr	r3, [r7, #16]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	007a1200 	.word	0x007a1200
 80028b4:	08004e68 	.word	0x08004e68
 80028b8:	08004e78 	.word	0x08004e78
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000084 	.word	0x20000084

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff2 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08004e60 	.word	0x08004e60

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffde 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0adb      	lsrs	r3, r3, #11
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08004e60 	.word	0x08004e60

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000084 	.word	0x20000084
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e041      	b.n	80029f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fd14 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f000 fc30 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e03a      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIM_Base_Start_IT+0x98>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x58>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d009      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x58>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x58>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d010      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800

08002aa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e041      	b.n	8002b3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f839 	bl	8002b42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 fb8e 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_TIM_PWM_Start+0x24>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e022      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d109      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x3e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e015      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_PWM_Start+0x58>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05e      	b.n	8002c84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x82>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	e013      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	e00b      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0xa2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	e003      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	6839      	ldr	r1, [r7, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fd7c 	bl	8003704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_TIM_PWM_Start+0x138>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_TIM_PWM_Start+0x138>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d009      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_TIM_PWM_Start+0x13c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_TIM_PWM_Start+0x140>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d010      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	e007      	b.n	8002c82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0202 	mvn.w	r2, #2
 8002cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa76 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa69 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fa78 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0204 	mvn.w	r2, #4
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa4c 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa3f 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fa4e 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0208 	mvn.w	r2, #8
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa22 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa15 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa24 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0210 	mvn.w	r2, #16
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f9f8 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9eb 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f9fa 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0201 	mvn.w	r2, #1
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe f872 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fce9 	bl	800381a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9be 	bl	80031f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0220 	mvn.w	r2, #32
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fcb4 	bl	8003808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ae      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	f200 809f 	bhi.w	8003014 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08003015 	.word	0x08003015
 8002ee4:	08003015 	.word	0x08003015
 8002ee8:	08003015 	.word	0x08003015
 8002eec:	08002f51 	.word	0x08002f51
 8002ef0:	08003015 	.word	0x08003015
 8002ef4:	08003015 	.word	0x08003015
 8002ef8:	08003015 	.word	0x08003015
 8002efc:	08002f93 	.word	0x08002f93
 8002f00:	08003015 	.word	0x08003015
 8002f04:	08003015 	.word	0x08003015
 8002f08:	08003015 	.word	0x08003015
 8002f0c:	08002fd3 	.word	0x08002fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f9d6 	bl	80032c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	619a      	str	r2, [r3, #24]
      break;
 8002f4e:	e064      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa1c 	bl	8003394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6999      	ldr	r1, [r3, #24]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	619a      	str	r2, [r3, #24]
      break;
 8002f90:	e043      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa65 	bl	8003468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0208 	orr.w	r2, r2, #8
 8002fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0204 	bic.w	r2, r2, #4
 8002fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69d9      	ldr	r1, [r3, #28]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
      break;
 8002fd0:	e023      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 faaf 	bl	800353c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]
      break;
 8003012:	e002      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
      break;
 8003018:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIM_ConfigClockSource+0x1c>
 8003044:	2302      	movs	r3, #2
 8003046:	e0b4      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x186>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d03e      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xd4>
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	f200 8087 	bhi.w	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	f000 8086 	beq.w	800319e <HAL_TIM_ConfigClockSource+0x172>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d87f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d01a      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xa6>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d87b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d050      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x11a>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d877      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d03c      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xfa>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d873      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d058      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x13a>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d86f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d064      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d86b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d060      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d867      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05c      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d05a      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	e062      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 faf0 	bl	80036c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	609a      	str	r2, [r3, #8]
      break;
 80030fe:	e04f      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f000 fad9 	bl	80036c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003122:	609a      	str	r2, [r3, #8]
      break;
 8003124:	e03c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	f000 fa50 	bl	80035d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2150      	movs	r1, #80	; 0x50
 800313e:	4618      	mov	r0, r3
 8003140:	f000 faa7 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003144:	e02c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 fa6e 	bl	8003634 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2160      	movs	r1, #96	; 0x60
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa97 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003164:	e01c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	f000 fa30 	bl	80035d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2140      	movs	r1, #64	; 0x40
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fa87 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003184:	e00c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 fa7e 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003196:	e003      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e000      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800319e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a29      	ldr	r2, [pc, #164]	; (80032bc <TIM_Base_SetConfig+0xb8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0x30>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <TIM_Base_SetConfig+0xbc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <TIM_Base_SetConfig+0xc0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <TIM_Base_SetConfig+0xb8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <TIM_Base_SetConfig+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d007      	beq.n	8003266 <TIM_Base_SetConfig+0x62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <TIM_Base_SetConfig+0xbc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <TIM_Base_SetConfig+0xc0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d108      	bne.n	8003278 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a07      	ldr	r2, [pc, #28]	; (80032bc <TIM_Base_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	615a      	str	r2, [r3, #20]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800

080032c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f023 0201 	bic.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0302 	bic.w	r3, r3, #2
 8003310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <TIM_OC1_SetConfig+0xc8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10c      	bne.n	800333e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0308 	bic.w	r3, r3, #8
 800332a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <TIM_OC1_SetConfig+0xc8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d111      	bne.n	800336a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00

08003394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 0210 	bic.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0320 	bic.w	r3, r3, #32
 80033de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <TIM_OC2_SetConfig+0xd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10d      	bne.n	8003410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <TIM_OC2_SetConfig+0xd0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d113      	bne.n	8003440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00

08003468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <TIM_OC3_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <TIM_OC3_SetConfig+0xd0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d113      	bne.n	8003512 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	621a      	str	r2, [r3, #32]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00

0800353c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <TIM_OC4_SetConfig+0x98>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00

080035d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 030a 	bic.w	r3, r3, #10
 8003614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	621a      	str	r2, [r3, #32]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0210 	bic.w	r2, r3, #16
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	031b      	lsls	r3, r3, #12
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003670:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	621a      	str	r2, [r3, #32]
}
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	021a      	lsls	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	609a      	str	r2, [r3, #8]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2201      	movs	r2, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1a      	ldr	r2, [r3, #32]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e046      	b.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d009      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a10      	ldr	r2, [pc, #64]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10c      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800

08003808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e042      	b.n	80038c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fe20 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fdc5 	bl	8004400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d16d      	bne.n	80039c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UART_Transmit+0x2c>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e066      	b.n	80039ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2221      	movs	r2, #33	; 0x21
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390a:	f7fe f885 	bl	8001a18 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d108      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003940:	e02a      	b.n	8003998 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fb14 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e036      	b.n	80039ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	3302      	adds	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e007      	b.n	800398a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1cf      	bne.n	8003942 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2140      	movs	r1, #64	; 0x40
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fae4 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e006      	b.n	80039ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	4613      	mov	r3, r2
 80039de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d112      	bne.n	8003a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_Receive_IT+0x26>
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e00b      	b.n	8003a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fb24 	bl	8004056 <UART_Start_Receive_IT>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	e000      	b.n	8003a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0ba      	sub	sp, #232	; 0xe8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_UART_IRQHandler+0x66>
 8003a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fc01 	bl	8004282 <UART_Receive_IT>
      return;
 8003a80:	e25b      	b.n	8003f3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80de 	beq.w	8003c48 <HAL_UART_IRQHandler+0x22c>
 8003a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80d1 	beq.w	8003c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_UART_IRQHandler+0xae>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_UART_IRQHandler+0xd2>
 8003ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0202 	orr.w	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xf6>
 8003afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	f043 0204 	orr.w	r2, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <HAL_UART_IRQHandler+0x126>
 8003b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f043 0208 	orr.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 81f2 	beq.w	8003f30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_UART_IRQHandler+0x14e>
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fb8c 	bl	8004282 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <HAL_UART_IRQHandler+0x17a>
 8003b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d04f      	beq.n	8003c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa96 	bl	80040c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d041      	beq.n	8003c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1d9      	bne.n	8003baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d013      	beq.n	8003c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	4a7e      	ldr	r2, [pc, #504]	; (8003dfc <HAL_UART_IRQHandler+0x3e0>)
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe f856 	bl	8001cbc <HAL_DMA_Abort_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00e      	b.n	8003c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f993 	bl	8003f52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00a      	b.n	8003c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f98f 	bl	8003f52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e006      	b.n	8003c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f98b 	bl	8003f52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c42:	e175      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	bf00      	nop
    return;
 8003c46:	e173      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 814f 	bne.w	8003ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8148 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8141 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80b6 	beq.w	8003e00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8145 	beq.w	8003f34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	f080 813e 	bcs.w	8003f34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	f000 8088 	beq.w	8003ddc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cf8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1d9      	bne.n	8003ccc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e1      	bne.n	8003d18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e3      	bne.n	8003d54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dac:	f023 0310 	bic.w	r3, r3, #16
 8003db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e3      	bne.n	8003d9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd ff35 	bl	8001c46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8b6 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df8:	e09c      	b.n	8003f34 <HAL_UART_IRQHandler+0x518>
 8003dfa:	bf00      	nop
 8003dfc:	0800418d 	.word	0x0800418d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 808e 	beq.w	8003f38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8089 	beq.w	8003f38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e82:	633a      	str	r2, [r7, #48]	; 0x30
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e3      	bne.n	8003e5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0310 	bic.w	r3, r3, #16
 8003eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ec8:	61fa      	str	r2, [r7, #28]
 8003eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e3      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f83b 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eee:	e023      	b.n	8003f38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_UART_IRQHandler+0x4f4>
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f953 	bl	80041b4 <UART_Transmit_IT>
    return;
 8003f0e:	e014      	b.n	8003f3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <HAL_UART_IRQHandler+0x51e>
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f992 	bl	8004252 <UART_EndTransmit_IT>
    return;
 8003f2e:	e004      	b.n	8003f3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f38:	bf00      	nop
  }
}
 8003f3a:	37e8      	adds	r7, #232	; 0xe8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b090      	sub	sp, #64	; 0x40
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	e050      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d04c      	beq.n	800402e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9a:	f7fd fd3d 	bl	8001a18 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d241      	bcs.n	800402e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fca:	637a      	str	r2, [r7, #52]	; 0x34
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	613b      	str	r3, [r7, #16]
   return(result);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ffe:	623a      	str	r2, [r7, #32]
 8004000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	69f9      	ldr	r1, [r7, #28]
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	61bb      	str	r3, [r7, #24]
   return(result);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00f      	b.n	800404e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d09f      	beq.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3740      	adds	r7, #64	; 0x40
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2222      	movs	r2, #34	; 0x22
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0220 	orr.w	r2, r2, #32
 80040ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b095      	sub	sp, #84	; 0x54
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f0:	643a      	str	r2, [r7, #64]	; 0x40
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3314      	adds	r3, #20
 800410a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	61fb      	str	r3, [r7, #28]
   return(result);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800412a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e5      	bne.n	8004104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	2b01      	cmp	r3, #1
 800413e:	d119      	bne.n	8004174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004160:	61ba      	str	r2, [r7, #24]
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	613b      	str	r3, [r7, #16]
   return(result);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004182:	bf00      	nop
 8004184:	3754      	adds	r7, #84	; 0x54
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fed3 	bl	8003f52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b21      	cmp	r3, #33	; 0x21
 80041c6:	d13e      	bne.n	8004246 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d0:	d114      	bne.n	80041fc <UART_Transmit_IT+0x48>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d110      	bne.n	80041fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	621a      	str	r2, [r3, #32]
 80041fa:	e008      	b.n	800420e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	1c59      	adds	r1, r3, #1
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6211      	str	r1, [r2, #32]
 8004206:	781a      	ldrb	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29b      	uxth	r3, r3
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4619      	mov	r1, r3
 800421c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004230:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004240:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004268:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fe64 	bl	8003f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b08c      	sub	sp, #48	; 0x30
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b22      	cmp	r3, #34	; 0x22
 8004294:	f040 80ae 	bne.w	80043f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d117      	bne.n	80042d2 <UART_Receive_IT+0x50>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d113      	bne.n	80042d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	1c9a      	adds	r2, r3, #2
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
 80042d0:	e026      	b.n	8004320 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	d007      	beq.n	80042f6 <UART_Receive_IT+0x74>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <UART_Receive_IT+0x82>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e008      	b.n	8004316 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004310:	b2da      	uxtb	r2, r3
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4619      	mov	r1, r3
 800432e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004330:	2b00      	cmp	r3, #0
 8004332:	d15d      	bne.n	80043f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0220 	bic.w	r2, r2, #32
 8004342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	2b01      	cmp	r3, #1
 8004378:	d135      	bne.n	80043e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	613b      	str	r3, [r7, #16]
   return(result);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 0310 	bic.w	r3, r3, #16
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	623a      	str	r2, [r7, #32]
 80043a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d10a      	bne.n	80043d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fdc0 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 80043e4:	e002      	b.n	80043ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fb6c 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e002      	b.n	80043f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3730      	adds	r7, #48	; 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800443a:	f023 030c 	bic.w	r3, r3, #12
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	430b      	orrs	r3, r1
 8004446:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <UART_SetConfig+0x114>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d103      	bne.n	8004470 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004468:	f7fe fa48 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	e002      	b.n	8004476 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe fa30 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004474:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009a      	lsls	r2, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <UART_SetConfig+0x118>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	0119      	lsls	r1, r3, #4
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <UART_SetConfig+0x118>)
 80044ae:	fba3 0302 	umull	r0, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	fb00 f303 	mul.w	r3, r0, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	; 0x32
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <UART_SetConfig+0x118>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044cc:	4419      	add	r1, r3
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <UART_SetConfig+0x118>)
 80044e6:	fba3 0302 	umull	r0, r3, r3, r2
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2064      	movs	r0, #100	; 0x64
 80044ee:	fb00 f303 	mul.w	r3, r0, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	3332      	adds	r3, #50	; 0x32
 80044f8:	4a07      	ldr	r2, [pc, #28]	; (8004518 <UART_SetConfig+0x118>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	440a      	add	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40013800 	.word	0x40013800
 8004518:	51eb851f 	.word	0x51eb851f

0800451c <__errno>:
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <__errno+0x8>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000098 	.word	0x20000098

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	2600      	movs	r6, #0
 800452c:	4d0c      	ldr	r5, [pc, #48]	; (8004560 <__libc_init_array+0x38>)
 800452e:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	f000 fc5c 	bl	8004df4 <_init>
 800453c:	2600      	movs	r6, #0
 800453e:	4d0a      	ldr	r5, [pc, #40]	; (8004568 <__libc_init_array+0x40>)
 8004540:	4c0a      	ldr	r4, [pc, #40]	; (800456c <__libc_init_array+0x44>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f855 3b04 	ldr.w	r3, [r5], #4
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	08004eb0 	.word	0x08004eb0
 8004564:	08004eb0 	.word	0x08004eb0
 8004568:	08004eb0 	.word	0x08004eb0
 800456c:	08004eb4 	.word	0x08004eb4

08004570 <memset>:
 8004570:	4603      	mov	r3, r0
 8004572:	4402      	add	r2, r0
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	f803 1b01 	strb.w	r1, [r3], #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <siprintf>:
 8004580:	b40e      	push	{r1, r2, r3}
 8004582:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004586:	b500      	push	{lr}
 8004588:	b09c      	sub	sp, #112	; 0x70
 800458a:	ab1d      	add	r3, sp, #116	; 0x74
 800458c:	9002      	str	r0, [sp, #8]
 800458e:	9006      	str	r0, [sp, #24]
 8004590:	9107      	str	r1, [sp, #28]
 8004592:	9104      	str	r1, [sp, #16]
 8004594:	4808      	ldr	r0, [pc, #32]	; (80045b8 <siprintf+0x38>)
 8004596:	4909      	ldr	r1, [pc, #36]	; (80045bc <siprintf+0x3c>)
 8004598:	f853 2b04 	ldr.w	r2, [r3], #4
 800459c:	9105      	str	r1, [sp, #20]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	a902      	add	r1, sp, #8
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	f000 f868 	bl	8004678 <_svfiprintf_r>
 80045a8:	2200      	movs	r2, #0
 80045aa:	9b02      	ldr	r3, [sp, #8]
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	b01c      	add	sp, #112	; 0x70
 80045b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b4:	b003      	add	sp, #12
 80045b6:	4770      	bx	lr
 80045b8:	20000098 	.word	0x20000098
 80045bc:	ffff0208 	.word	0xffff0208

080045c0 <__ssputs_r>:
 80045c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c4:	688e      	ldr	r6, [r1, #8]
 80045c6:	4682      	mov	sl, r0
 80045c8:	429e      	cmp	r6, r3
 80045ca:	460c      	mov	r4, r1
 80045cc:	4690      	mov	r8, r2
 80045ce:	461f      	mov	r7, r3
 80045d0:	d838      	bhi.n	8004644 <__ssputs_r+0x84>
 80045d2:	898a      	ldrh	r2, [r1, #12]
 80045d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045d8:	d032      	beq.n	8004640 <__ssputs_r+0x80>
 80045da:	6825      	ldr	r5, [r4, #0]
 80045dc:	6909      	ldr	r1, [r1, #16]
 80045de:	3301      	adds	r3, #1
 80045e0:	eba5 0901 	sub.w	r9, r5, r1
 80045e4:	6965      	ldr	r5, [r4, #20]
 80045e6:	444b      	add	r3, r9
 80045e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f0:	106d      	asrs	r5, r5, #1
 80045f2:	429d      	cmp	r5, r3
 80045f4:	bf38      	it	cc
 80045f6:	461d      	movcc	r5, r3
 80045f8:	0553      	lsls	r3, r2, #21
 80045fa:	d531      	bpl.n	8004660 <__ssputs_r+0xa0>
 80045fc:	4629      	mov	r1, r5
 80045fe:	f000 fb53 	bl	8004ca8 <_malloc_r>
 8004602:	4606      	mov	r6, r0
 8004604:	b950      	cbnz	r0, 800461c <__ssputs_r+0x5c>
 8004606:	230c      	movs	r3, #12
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f8ca 3000 	str.w	r3, [sl]
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	464a      	mov	r2, r9
 800461e:	6921      	ldr	r1, [r4, #16]
 8004620:	f000 face 	bl	8004bc0 <memcpy>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800462a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	6126      	str	r6, [r4, #16]
 8004632:	444e      	add	r6, r9
 8004634:	6026      	str	r6, [r4, #0]
 8004636:	463e      	mov	r6, r7
 8004638:	6165      	str	r5, [r4, #20]
 800463a:	eba5 0509 	sub.w	r5, r5, r9
 800463e:	60a5      	str	r5, [r4, #8]
 8004640:	42be      	cmp	r6, r7
 8004642:	d900      	bls.n	8004646 <__ssputs_r+0x86>
 8004644:	463e      	mov	r6, r7
 8004646:	4632      	mov	r2, r6
 8004648:	4641      	mov	r1, r8
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	f000 fac6 	bl	8004bdc <memmove>
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	1b9b      	subs	r3, r3, r6
 8004656:	4432      	add	r2, r6
 8004658:	2000      	movs	r0, #0
 800465a:	60a3      	str	r3, [r4, #8]
 800465c:	6022      	str	r2, [r4, #0]
 800465e:	e7db      	b.n	8004618 <__ssputs_r+0x58>
 8004660:	462a      	mov	r2, r5
 8004662:	f000 fb7b 	bl	8004d5c <_realloc_r>
 8004666:	4606      	mov	r6, r0
 8004668:	2800      	cmp	r0, #0
 800466a:	d1e1      	bne.n	8004630 <__ssputs_r+0x70>
 800466c:	4650      	mov	r0, sl
 800466e:	6921      	ldr	r1, [r4, #16]
 8004670:	f000 face 	bl	8004c10 <_free_r>
 8004674:	e7c7      	b.n	8004606 <__ssputs_r+0x46>
	...

08004678 <_svfiprintf_r>:
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	4698      	mov	r8, r3
 800467e:	898b      	ldrh	r3, [r1, #12]
 8004680:	4607      	mov	r7, r0
 8004682:	061b      	lsls	r3, r3, #24
 8004684:	460d      	mov	r5, r1
 8004686:	4614      	mov	r4, r2
 8004688:	b09d      	sub	sp, #116	; 0x74
 800468a:	d50e      	bpl.n	80046aa <_svfiprintf_r+0x32>
 800468c:	690b      	ldr	r3, [r1, #16]
 800468e:	b963      	cbnz	r3, 80046aa <_svfiprintf_r+0x32>
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	f000 fb09 	bl	8004ca8 <_malloc_r>
 8004696:	6028      	str	r0, [r5, #0]
 8004698:	6128      	str	r0, [r5, #16]
 800469a:	b920      	cbnz	r0, 80046a6 <_svfiprintf_r+0x2e>
 800469c:	230c      	movs	r3, #12
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	e0d1      	b.n	800484a <_svfiprintf_r+0x1d2>
 80046a6:	2340      	movs	r3, #64	; 0x40
 80046a8:	616b      	str	r3, [r5, #20]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9309      	str	r3, [sp, #36]	; 0x24
 80046ae:	2320      	movs	r3, #32
 80046b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046b4:	2330      	movs	r3, #48	; 0x30
 80046b6:	f04f 0901 	mov.w	r9, #1
 80046ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80046be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004864 <_svfiprintf_r+0x1ec>
 80046c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046c6:	4623      	mov	r3, r4
 80046c8:	469a      	mov	sl, r3
 80046ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ce:	b10a      	cbz	r2, 80046d4 <_svfiprintf_r+0x5c>
 80046d0:	2a25      	cmp	r2, #37	; 0x25
 80046d2:	d1f9      	bne.n	80046c8 <_svfiprintf_r+0x50>
 80046d4:	ebba 0b04 	subs.w	fp, sl, r4
 80046d8:	d00b      	beq.n	80046f2 <_svfiprintf_r+0x7a>
 80046da:	465b      	mov	r3, fp
 80046dc:	4622      	mov	r2, r4
 80046de:	4629      	mov	r1, r5
 80046e0:	4638      	mov	r0, r7
 80046e2:	f7ff ff6d 	bl	80045c0 <__ssputs_r>
 80046e6:	3001      	adds	r0, #1
 80046e8:	f000 80aa 	beq.w	8004840 <_svfiprintf_r+0x1c8>
 80046ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ee:	445a      	add	r2, fp
 80046f0:	9209      	str	r2, [sp, #36]	; 0x24
 80046f2:	f89a 3000 	ldrb.w	r3, [sl]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80a2 	beq.w	8004840 <_svfiprintf_r+0x1c8>
 80046fc:	2300      	movs	r3, #0
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004706:	f10a 0a01 	add.w	sl, sl, #1
 800470a:	9304      	str	r3, [sp, #16]
 800470c:	9307      	str	r3, [sp, #28]
 800470e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004712:	931a      	str	r3, [sp, #104]	; 0x68
 8004714:	4654      	mov	r4, sl
 8004716:	2205      	movs	r2, #5
 8004718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471c:	4851      	ldr	r0, [pc, #324]	; (8004864 <_svfiprintf_r+0x1ec>)
 800471e:	f000 fa41 	bl	8004ba4 <memchr>
 8004722:	9a04      	ldr	r2, [sp, #16]
 8004724:	b9d8      	cbnz	r0, 800475e <_svfiprintf_r+0xe6>
 8004726:	06d0      	lsls	r0, r2, #27
 8004728:	bf44      	itt	mi
 800472a:	2320      	movmi	r3, #32
 800472c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004730:	0711      	lsls	r1, r2, #28
 8004732:	bf44      	itt	mi
 8004734:	232b      	movmi	r3, #43	; 0x2b
 8004736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800473a:	f89a 3000 	ldrb.w	r3, [sl]
 800473e:	2b2a      	cmp	r3, #42	; 0x2a
 8004740:	d015      	beq.n	800476e <_svfiprintf_r+0xf6>
 8004742:	4654      	mov	r4, sl
 8004744:	2000      	movs	r0, #0
 8004746:	f04f 0c0a 	mov.w	ip, #10
 800474a:	9a07      	ldr	r2, [sp, #28]
 800474c:	4621      	mov	r1, r4
 800474e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004752:	3b30      	subs	r3, #48	; 0x30
 8004754:	2b09      	cmp	r3, #9
 8004756:	d94e      	bls.n	80047f6 <_svfiprintf_r+0x17e>
 8004758:	b1b0      	cbz	r0, 8004788 <_svfiprintf_r+0x110>
 800475a:	9207      	str	r2, [sp, #28]
 800475c:	e014      	b.n	8004788 <_svfiprintf_r+0x110>
 800475e:	eba0 0308 	sub.w	r3, r0, r8
 8004762:	fa09 f303 	lsl.w	r3, r9, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	46a2      	mov	sl, r4
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	e7d2      	b.n	8004714 <_svfiprintf_r+0x9c>
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	1d19      	adds	r1, r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	9103      	str	r1, [sp, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfbb      	ittet	lt
 800477a:	425b      	neglt	r3, r3
 800477c:	f042 0202 	orrlt.w	r2, r2, #2
 8004780:	9307      	strge	r3, [sp, #28]
 8004782:	9307      	strlt	r3, [sp, #28]
 8004784:	bfb8      	it	lt
 8004786:	9204      	strlt	r2, [sp, #16]
 8004788:	7823      	ldrb	r3, [r4, #0]
 800478a:	2b2e      	cmp	r3, #46	; 0x2e
 800478c:	d10c      	bne.n	80047a8 <_svfiprintf_r+0x130>
 800478e:	7863      	ldrb	r3, [r4, #1]
 8004790:	2b2a      	cmp	r3, #42	; 0x2a
 8004792:	d135      	bne.n	8004800 <_svfiprintf_r+0x188>
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	3402      	adds	r4, #2
 8004798:	1d1a      	adds	r2, r3, #4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	9203      	str	r2, [sp, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bfb8      	it	lt
 80047a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80047a6:	9305      	str	r3, [sp, #20]
 80047a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004874 <_svfiprintf_r+0x1fc>
 80047ac:	2203      	movs	r2, #3
 80047ae:	4650      	mov	r0, sl
 80047b0:	7821      	ldrb	r1, [r4, #0]
 80047b2:	f000 f9f7 	bl	8004ba4 <memchr>
 80047b6:	b140      	cbz	r0, 80047ca <_svfiprintf_r+0x152>
 80047b8:	2340      	movs	r3, #64	; 0x40
 80047ba:	eba0 000a 	sub.w	r0, r0, sl
 80047be:	fa03 f000 	lsl.w	r0, r3, r0
 80047c2:	9b04      	ldr	r3, [sp, #16]
 80047c4:	3401      	adds	r4, #1
 80047c6:	4303      	orrs	r3, r0
 80047c8:	9304      	str	r3, [sp, #16]
 80047ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ce:	2206      	movs	r2, #6
 80047d0:	4825      	ldr	r0, [pc, #148]	; (8004868 <_svfiprintf_r+0x1f0>)
 80047d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047d6:	f000 f9e5 	bl	8004ba4 <memchr>
 80047da:	2800      	cmp	r0, #0
 80047dc:	d038      	beq.n	8004850 <_svfiprintf_r+0x1d8>
 80047de:	4b23      	ldr	r3, [pc, #140]	; (800486c <_svfiprintf_r+0x1f4>)
 80047e0:	bb1b      	cbnz	r3, 800482a <_svfiprintf_r+0x1b2>
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	3307      	adds	r3, #7
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	3308      	adds	r3, #8
 80047ec:	9303      	str	r3, [sp, #12]
 80047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f0:	4433      	add	r3, r6
 80047f2:	9309      	str	r3, [sp, #36]	; 0x24
 80047f4:	e767      	b.n	80046c6 <_svfiprintf_r+0x4e>
 80047f6:	460c      	mov	r4, r1
 80047f8:	2001      	movs	r0, #1
 80047fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80047fe:	e7a5      	b.n	800474c <_svfiprintf_r+0xd4>
 8004800:	2300      	movs	r3, #0
 8004802:	f04f 0c0a 	mov.w	ip, #10
 8004806:	4619      	mov	r1, r3
 8004808:	3401      	adds	r4, #1
 800480a:	9305      	str	r3, [sp, #20]
 800480c:	4620      	mov	r0, r4
 800480e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004812:	3a30      	subs	r2, #48	; 0x30
 8004814:	2a09      	cmp	r2, #9
 8004816:	d903      	bls.n	8004820 <_svfiprintf_r+0x1a8>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0c5      	beq.n	80047a8 <_svfiprintf_r+0x130>
 800481c:	9105      	str	r1, [sp, #20]
 800481e:	e7c3      	b.n	80047a8 <_svfiprintf_r+0x130>
 8004820:	4604      	mov	r4, r0
 8004822:	2301      	movs	r3, #1
 8004824:	fb0c 2101 	mla	r1, ip, r1, r2
 8004828:	e7f0      	b.n	800480c <_svfiprintf_r+0x194>
 800482a:	ab03      	add	r3, sp, #12
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	462a      	mov	r2, r5
 8004830:	4638      	mov	r0, r7
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <_svfiprintf_r+0x1f8>)
 8004834:	a904      	add	r1, sp, #16
 8004836:	f3af 8000 	nop.w
 800483a:	1c42      	adds	r2, r0, #1
 800483c:	4606      	mov	r6, r0
 800483e:	d1d6      	bne.n	80047ee <_svfiprintf_r+0x176>
 8004840:	89ab      	ldrh	r3, [r5, #12]
 8004842:	065b      	lsls	r3, r3, #25
 8004844:	f53f af2c 	bmi.w	80046a0 <_svfiprintf_r+0x28>
 8004848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800484a:	b01d      	add	sp, #116	; 0x74
 800484c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004850:	ab03      	add	r3, sp, #12
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	462a      	mov	r2, r5
 8004856:	4638      	mov	r0, r7
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <_svfiprintf_r+0x1f8>)
 800485a:	a904      	add	r1, sp, #16
 800485c:	f000 f87c 	bl	8004958 <_printf_i>
 8004860:	e7eb      	b.n	800483a <_svfiprintf_r+0x1c2>
 8004862:	bf00      	nop
 8004864:	08004e7a 	.word	0x08004e7a
 8004868:	08004e84 	.word	0x08004e84
 800486c:	00000000 	.word	0x00000000
 8004870:	080045c1 	.word	0x080045c1
 8004874:	08004e80 	.word	0x08004e80

08004878 <_printf_common>:
 8004878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	4616      	mov	r6, r2
 800487e:	4699      	mov	r9, r3
 8004880:	688a      	ldr	r2, [r1, #8]
 8004882:	690b      	ldr	r3, [r1, #16]
 8004884:	4607      	mov	r7, r0
 8004886:	4293      	cmp	r3, r2
 8004888:	bfb8      	it	lt
 800488a:	4613      	movlt	r3, r2
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004892:	460c      	mov	r4, r1
 8004894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004898:	b10a      	cbz	r2, 800489e <_printf_common+0x26>
 800489a:	3301      	adds	r3, #1
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	0699      	lsls	r1, r3, #26
 80048a2:	bf42      	ittt	mi
 80048a4:	6833      	ldrmi	r3, [r6, #0]
 80048a6:	3302      	addmi	r3, #2
 80048a8:	6033      	strmi	r3, [r6, #0]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	f015 0506 	ands.w	r5, r5, #6
 80048b0:	d106      	bne.n	80048c0 <_printf_common+0x48>
 80048b2:	f104 0a19 	add.w	sl, r4, #25
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	6832      	ldr	r2, [r6, #0]
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	42ab      	cmp	r3, r5
 80048be:	dc28      	bgt.n	8004912 <_printf_common+0x9a>
 80048c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048c4:	1e13      	subs	r3, r2, #0
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	bf18      	it	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	0692      	lsls	r2, r2, #26
 80048ce:	d42d      	bmi.n	800492c <_printf_common+0xb4>
 80048d0:	4649      	mov	r1, r9
 80048d2:	4638      	mov	r0, r7
 80048d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d8:	47c0      	blx	r8
 80048da:	3001      	adds	r0, #1
 80048dc:	d020      	beq.n	8004920 <_printf_common+0xa8>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	68e5      	ldr	r5, [r4, #12]
 80048e2:	f003 0306 	and.w	r3, r3, #6
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf18      	it	ne
 80048ea:	2500      	movne	r5, #0
 80048ec:	6832      	ldr	r2, [r6, #0]
 80048ee:	f04f 0600 	mov.w	r6, #0
 80048f2:	68a3      	ldr	r3, [r4, #8]
 80048f4:	bf08      	it	eq
 80048f6:	1aad      	subeq	r5, r5, r2
 80048f8:	6922      	ldr	r2, [r4, #16]
 80048fa:	bf08      	it	eq
 80048fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004900:	4293      	cmp	r3, r2
 8004902:	bfc4      	itt	gt
 8004904:	1a9b      	subgt	r3, r3, r2
 8004906:	18ed      	addgt	r5, r5, r3
 8004908:	341a      	adds	r4, #26
 800490a:	42b5      	cmp	r5, r6
 800490c:	d11a      	bne.n	8004944 <_printf_common+0xcc>
 800490e:	2000      	movs	r0, #0
 8004910:	e008      	b.n	8004924 <_printf_common+0xac>
 8004912:	2301      	movs	r3, #1
 8004914:	4652      	mov	r2, sl
 8004916:	4649      	mov	r1, r9
 8004918:	4638      	mov	r0, r7
 800491a:	47c0      	blx	r8
 800491c:	3001      	adds	r0, #1
 800491e:	d103      	bne.n	8004928 <_printf_common+0xb0>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004928:	3501      	adds	r5, #1
 800492a:	e7c4      	b.n	80048b6 <_printf_common+0x3e>
 800492c:	2030      	movs	r0, #48	; 0x30
 800492e:	18e1      	adds	r1, r4, r3
 8004930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800493a:	4422      	add	r2, r4
 800493c:	3302      	adds	r3, #2
 800493e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004942:	e7c5      	b.n	80048d0 <_printf_common+0x58>
 8004944:	2301      	movs	r3, #1
 8004946:	4622      	mov	r2, r4
 8004948:	4649      	mov	r1, r9
 800494a:	4638      	mov	r0, r7
 800494c:	47c0      	blx	r8
 800494e:	3001      	adds	r0, #1
 8004950:	d0e6      	beq.n	8004920 <_printf_common+0xa8>
 8004952:	3601      	adds	r6, #1
 8004954:	e7d9      	b.n	800490a <_printf_common+0x92>
	...

08004958 <_printf_i>:
 8004958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	460c      	mov	r4, r1
 800495e:	7e27      	ldrb	r7, [r4, #24]
 8004960:	4691      	mov	r9, r2
 8004962:	2f78      	cmp	r7, #120	; 0x78
 8004964:	4680      	mov	r8, r0
 8004966:	469a      	mov	sl, r3
 8004968:	990c      	ldr	r1, [sp, #48]	; 0x30
 800496a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800496e:	d807      	bhi.n	8004980 <_printf_i+0x28>
 8004970:	2f62      	cmp	r7, #98	; 0x62
 8004972:	d80a      	bhi.n	800498a <_printf_i+0x32>
 8004974:	2f00      	cmp	r7, #0
 8004976:	f000 80d9 	beq.w	8004b2c <_printf_i+0x1d4>
 800497a:	2f58      	cmp	r7, #88	; 0x58
 800497c:	f000 80a4 	beq.w	8004ac8 <_printf_i+0x170>
 8004980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004988:	e03a      	b.n	8004a00 <_printf_i+0xa8>
 800498a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800498e:	2b15      	cmp	r3, #21
 8004990:	d8f6      	bhi.n	8004980 <_printf_i+0x28>
 8004992:	a001      	add	r0, pc, #4	; (adr r0, 8004998 <_printf_i+0x40>)
 8004994:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004998:	080049f1 	.word	0x080049f1
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004981 	.word	0x08004981
 80049a4:	08004981 	.word	0x08004981
 80049a8:	08004981 	.word	0x08004981
 80049ac:	08004981 	.word	0x08004981
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004981 	.word	0x08004981
 80049b8:	08004981 	.word	0x08004981
 80049bc:	08004981 	.word	0x08004981
 80049c0:	08004981 	.word	0x08004981
 80049c4:	08004b13 	.word	0x08004b13
 80049c8:	08004a35 	.word	0x08004a35
 80049cc:	08004af5 	.word	0x08004af5
 80049d0:	08004981 	.word	0x08004981
 80049d4:	08004981 	.word	0x08004981
 80049d8:	08004b35 	.word	0x08004b35
 80049dc:	08004981 	.word	0x08004981
 80049e0:	08004a35 	.word	0x08004a35
 80049e4:	08004981 	.word	0x08004981
 80049e8:	08004981 	.word	0x08004981
 80049ec:	08004afd 	.word	0x08004afd
 80049f0:	680b      	ldr	r3, [r1, #0]
 80049f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	600a      	str	r2, [r1, #0]
 80049fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0a4      	b.n	8004b4e <_printf_i+0x1f6>
 8004a04:	6825      	ldr	r5, [r4, #0]
 8004a06:	6808      	ldr	r0, [r1, #0]
 8004a08:	062e      	lsls	r6, r5, #24
 8004a0a:	f100 0304 	add.w	r3, r0, #4
 8004a0e:	d50a      	bpl.n	8004a26 <_printf_i+0xce>
 8004a10:	6805      	ldr	r5, [r0, #0]
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	da03      	bge.n	8004a20 <_printf_i+0xc8>
 8004a18:	232d      	movs	r3, #45	; 0x2d
 8004a1a:	426d      	negs	r5, r5
 8004a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a20:	230a      	movs	r3, #10
 8004a22:	485e      	ldr	r0, [pc, #376]	; (8004b9c <_printf_i+0x244>)
 8004a24:	e019      	b.n	8004a5a <_printf_i+0x102>
 8004a26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a2a:	6805      	ldr	r5, [r0, #0]
 8004a2c:	600b      	str	r3, [r1, #0]
 8004a2e:	bf18      	it	ne
 8004a30:	b22d      	sxthne	r5, r5
 8004a32:	e7ef      	b.n	8004a14 <_printf_i+0xbc>
 8004a34:	680b      	ldr	r3, [r1, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	1d18      	adds	r0, r3, #4
 8004a3a:	6008      	str	r0, [r1, #0]
 8004a3c:	0628      	lsls	r0, r5, #24
 8004a3e:	d501      	bpl.n	8004a44 <_printf_i+0xec>
 8004a40:	681d      	ldr	r5, [r3, #0]
 8004a42:	e002      	b.n	8004a4a <_printf_i+0xf2>
 8004a44:	0669      	lsls	r1, r5, #25
 8004a46:	d5fb      	bpl.n	8004a40 <_printf_i+0xe8>
 8004a48:	881d      	ldrh	r5, [r3, #0]
 8004a4a:	2f6f      	cmp	r7, #111	; 0x6f
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2308      	moveq	r3, #8
 8004a50:	230a      	movne	r3, #10
 8004a52:	4852      	ldr	r0, [pc, #328]	; (8004b9c <_printf_i+0x244>)
 8004a54:	2100      	movs	r1, #0
 8004a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a5a:	6866      	ldr	r6, [r4, #4]
 8004a5c:	2e00      	cmp	r6, #0
 8004a5e:	bfa8      	it	ge
 8004a60:	6821      	ldrge	r1, [r4, #0]
 8004a62:	60a6      	str	r6, [r4, #8]
 8004a64:	bfa4      	itt	ge
 8004a66:	f021 0104 	bicge.w	r1, r1, #4
 8004a6a:	6021      	strge	r1, [r4, #0]
 8004a6c:	b90d      	cbnz	r5, 8004a72 <_printf_i+0x11a>
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	d04d      	beq.n	8004b0e <_printf_i+0x1b6>
 8004a72:	4616      	mov	r6, r2
 8004a74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a78:	fb03 5711 	mls	r7, r3, r1, r5
 8004a7c:	5dc7      	ldrb	r7, [r0, r7]
 8004a7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a82:	462f      	mov	r7, r5
 8004a84:	42bb      	cmp	r3, r7
 8004a86:	460d      	mov	r5, r1
 8004a88:	d9f4      	bls.n	8004a74 <_printf_i+0x11c>
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d10b      	bne.n	8004aa6 <_printf_i+0x14e>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	07df      	lsls	r7, r3, #31
 8004a92:	d508      	bpl.n	8004aa6 <_printf_i+0x14e>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	6861      	ldr	r1, [r4, #4]
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	bfde      	ittt	le
 8004a9c:	2330      	movle	r3, #48	; 0x30
 8004a9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aa6:	1b92      	subs	r2, r2, r6
 8004aa8:	6122      	str	r2, [r4, #16]
 8004aaa:	464b      	mov	r3, r9
 8004aac:	4621      	mov	r1, r4
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f8cd a000 	str.w	sl, [sp]
 8004ab4:	aa03      	add	r2, sp, #12
 8004ab6:	f7ff fedf 	bl	8004878 <_printf_common>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d14c      	bne.n	8004b58 <_printf_i+0x200>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	b004      	add	sp, #16
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	4834      	ldr	r0, [pc, #208]	; (8004b9c <_printf_i+0x244>)
 8004aca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ace:	680e      	ldr	r6, [r1, #0]
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ad6:	061f      	lsls	r7, r3, #24
 8004ad8:	600e      	str	r6, [r1, #0]
 8004ada:	d514      	bpl.n	8004b06 <_printf_i+0x1ae>
 8004adc:	07d9      	lsls	r1, r3, #31
 8004ade:	bf44      	itt	mi
 8004ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae4:	6023      	strmi	r3, [r4, #0]
 8004ae6:	b91d      	cbnz	r5, 8004af0 <_printf_i+0x198>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	f023 0320 	bic.w	r3, r3, #32
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	2310      	movs	r3, #16
 8004af2:	e7af      	b.n	8004a54 <_printf_i+0xfc>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f043 0320 	orr.w	r3, r3, #32
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	2378      	movs	r3, #120	; 0x78
 8004afe:	4828      	ldr	r0, [pc, #160]	; (8004ba0 <_printf_i+0x248>)
 8004b00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b04:	e7e3      	b.n	8004ace <_printf_i+0x176>
 8004b06:	065e      	lsls	r6, r3, #25
 8004b08:	bf48      	it	mi
 8004b0a:	b2ad      	uxthmi	r5, r5
 8004b0c:	e7e6      	b.n	8004adc <_printf_i+0x184>
 8004b0e:	4616      	mov	r6, r2
 8004b10:	e7bb      	b.n	8004a8a <_printf_i+0x132>
 8004b12:	680b      	ldr	r3, [r1, #0]
 8004b14:	6826      	ldr	r6, [r4, #0]
 8004b16:	1d1d      	adds	r5, r3, #4
 8004b18:	6960      	ldr	r0, [r4, #20]
 8004b1a:	600d      	str	r5, [r1, #0]
 8004b1c:	0635      	lsls	r5, r6, #24
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	d501      	bpl.n	8004b26 <_printf_i+0x1ce>
 8004b22:	6018      	str	r0, [r3, #0]
 8004b24:	e002      	b.n	8004b2c <_printf_i+0x1d4>
 8004b26:	0671      	lsls	r1, r6, #25
 8004b28:	d5fb      	bpl.n	8004b22 <_printf_i+0x1ca>
 8004b2a:	8018      	strh	r0, [r3, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4616      	mov	r6, r2
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	e7ba      	b.n	8004aaa <_printf_i+0x152>
 8004b34:	680b      	ldr	r3, [r1, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	600a      	str	r2, [r1, #0]
 8004b3a:	681e      	ldr	r6, [r3, #0]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4630      	mov	r0, r6
 8004b40:	6862      	ldr	r2, [r4, #4]
 8004b42:	f000 f82f 	bl	8004ba4 <memchr>
 8004b46:	b108      	cbz	r0, 8004b4c <_printf_i+0x1f4>
 8004b48:	1b80      	subs	r0, r0, r6
 8004b4a:	6060      	str	r0, [r4, #4]
 8004b4c:	6863      	ldr	r3, [r4, #4]
 8004b4e:	6123      	str	r3, [r4, #16]
 8004b50:	2300      	movs	r3, #0
 8004b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b56:	e7a8      	b.n	8004aaa <_printf_i+0x152>
 8004b58:	4632      	mov	r2, r6
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	47d0      	blx	sl
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0ab      	beq.n	8004abe <_printf_i+0x166>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	079b      	lsls	r3, r3, #30
 8004b6a:	d413      	bmi.n	8004b94 <_printf_i+0x23c>
 8004b6c:	68e0      	ldr	r0, [r4, #12]
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	4298      	cmp	r0, r3
 8004b72:	bfb8      	it	lt
 8004b74:	4618      	movlt	r0, r3
 8004b76:	e7a4      	b.n	8004ac2 <_printf_i+0x16a>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	4632      	mov	r2, r6
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	4640      	mov	r0, r8
 8004b80:	47d0      	blx	sl
 8004b82:	3001      	adds	r0, #1
 8004b84:	d09b      	beq.n	8004abe <_printf_i+0x166>
 8004b86:	3501      	adds	r5, #1
 8004b88:	68e3      	ldr	r3, [r4, #12]
 8004b8a:	9903      	ldr	r1, [sp, #12]
 8004b8c:	1a5b      	subs	r3, r3, r1
 8004b8e:	42ab      	cmp	r3, r5
 8004b90:	dcf2      	bgt.n	8004b78 <_printf_i+0x220>
 8004b92:	e7eb      	b.n	8004b6c <_printf_i+0x214>
 8004b94:	2500      	movs	r5, #0
 8004b96:	f104 0619 	add.w	r6, r4, #25
 8004b9a:	e7f5      	b.n	8004b88 <_printf_i+0x230>
 8004b9c:	08004e8b 	.word	0x08004e8b
 8004ba0:	08004e9c 	.word	0x08004e9c

08004ba4 <memchr>:
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	b2c9      	uxtb	r1, r1
 8004baa:	4402      	add	r2, r0
 8004bac:	4293      	cmp	r3, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	d101      	bne.n	8004bb6 <memchr+0x12>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e003      	b.n	8004bbe <memchr+0x1a>
 8004bb6:	7804      	ldrb	r4, [r0, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	428c      	cmp	r4, r1
 8004bbc:	d1f6      	bne.n	8004bac <memchr+0x8>
 8004bbe:	bd10      	pop	{r4, pc}

08004bc0 <memcpy>:
 8004bc0:	440a      	add	r2, r1
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bc8:	d100      	bne.n	8004bcc <memcpy+0xc>
 8004bca:	4770      	bx	lr
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd2:	4291      	cmp	r1, r2
 8004bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd8:	d1f9      	bne.n	8004bce <memcpy+0xe>
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <memmove>:
 8004bdc:	4288      	cmp	r0, r1
 8004bde:	b510      	push	{r4, lr}
 8004be0:	eb01 0402 	add.w	r4, r1, r2
 8004be4:	d902      	bls.n	8004bec <memmove+0x10>
 8004be6:	4284      	cmp	r4, r0
 8004be8:	4623      	mov	r3, r4
 8004bea:	d807      	bhi.n	8004bfc <memmove+0x20>
 8004bec:	1e43      	subs	r3, r0, #1
 8004bee:	42a1      	cmp	r1, r4
 8004bf0:	d008      	beq.n	8004c04 <memmove+0x28>
 8004bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bfa:	e7f8      	b.n	8004bee <memmove+0x12>
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	4402      	add	r2, r0
 8004c00:	428a      	cmp	r2, r1
 8004c02:	d100      	bne.n	8004c06 <memmove+0x2a>
 8004c04:	bd10      	pop	{r4, pc}
 8004c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c0e:	e7f7      	b.n	8004c00 <memmove+0x24>

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d043      	beq.n	8004ca0 <_free_r+0x90>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 f8d0 	bl	8004dc8 <__malloc_lock>
 8004c28:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <_free_r+0x94>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	b933      	cbnz	r3, 8004c3e <_free_r+0x2e>
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6014      	str	r4, [r2, #0]
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3a:	f000 b8cb 	b.w	8004dd4 <__malloc_unlock>
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	d90a      	bls.n	8004c58 <_free_r+0x48>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	1862      	adds	r2, r4, r1
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf01      	itttt	eq
 8004c4a:	681a      	ldreq	r2, [r3, #0]
 8004c4c:	685b      	ldreq	r3, [r3, #4]
 8004c4e:	1852      	addeq	r2, r2, r1
 8004c50:	6022      	streq	r2, [r4, #0]
 8004c52:	6063      	str	r3, [r4, #4]
 8004c54:	6004      	str	r4, [r0, #0]
 8004c56:	e7ed      	b.n	8004c34 <_free_r+0x24>
 8004c58:	461a      	mov	r2, r3
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b10b      	cbz	r3, 8004c62 <_free_r+0x52>
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	d9fa      	bls.n	8004c58 <_free_r+0x48>
 8004c62:	6811      	ldr	r1, [r2, #0]
 8004c64:	1850      	adds	r0, r2, r1
 8004c66:	42a0      	cmp	r0, r4
 8004c68:	d10b      	bne.n	8004c82 <_free_r+0x72>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	1850      	adds	r0, r2, r1
 8004c70:	4283      	cmp	r3, r0
 8004c72:	6011      	str	r1, [r2, #0]
 8004c74:	d1de      	bne.n	8004c34 <_free_r+0x24>
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4401      	add	r1, r0
 8004c7c:	6011      	str	r1, [r2, #0]
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e7d8      	b.n	8004c34 <_free_r+0x24>
 8004c82:	d902      	bls.n	8004c8a <_free_r+0x7a>
 8004c84:	230c      	movs	r3, #12
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	e7d4      	b.n	8004c34 <_free_r+0x24>
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1821      	adds	r1, r4, r0
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	bf01      	itttt	eq
 8004c92:	6819      	ldreq	r1, [r3, #0]
 8004c94:	685b      	ldreq	r3, [r3, #4]
 8004c96:	1809      	addeq	r1, r1, r0
 8004c98:	6021      	streq	r1, [r4, #0]
 8004c9a:	6063      	str	r3, [r4, #4]
 8004c9c:	6054      	str	r4, [r2, #4]
 8004c9e:	e7c9      	b.n	8004c34 <_free_r+0x24>
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000190 	.word	0x20000190

08004ca8 <_malloc_r>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	1ccd      	adds	r5, r1, #3
 8004cac:	f025 0503 	bic.w	r5, r5, #3
 8004cb0:	3508      	adds	r5, #8
 8004cb2:	2d0c      	cmp	r5, #12
 8004cb4:	bf38      	it	cc
 8004cb6:	250c      	movcc	r5, #12
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	4606      	mov	r6, r0
 8004cbc:	db01      	blt.n	8004cc2 <_malloc_r+0x1a>
 8004cbe:	42a9      	cmp	r1, r5
 8004cc0:	d903      	bls.n	8004cca <_malloc_r+0x22>
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cca:	f000 f87d 	bl	8004dc8 <__malloc_lock>
 8004cce:	4921      	ldr	r1, [pc, #132]	; (8004d54 <_malloc_r+0xac>)
 8004cd0:	680a      	ldr	r2, [r1, #0]
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	b99c      	cbnz	r4, 8004cfe <_malloc_r+0x56>
 8004cd6:	4f20      	ldr	r7, [pc, #128]	; (8004d58 <_malloc_r+0xb0>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	b923      	cbnz	r3, 8004ce6 <_malloc_r+0x3e>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f000 f862 	bl	8004da8 <_sbrk_r>
 8004ce4:	6038      	str	r0, [r7, #0]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f85d 	bl	8004da8 <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d123      	bne.n	8004d3a <_malloc_r+0x92>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f000 f86c 	bl	8004dd4 <__malloc_unlock>
 8004cfc:	e7e3      	b.n	8004cc6 <_malloc_r+0x1e>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	1b5b      	subs	r3, r3, r5
 8004d02:	d417      	bmi.n	8004d34 <_malloc_r+0x8c>
 8004d04:	2b0b      	cmp	r3, #11
 8004d06:	d903      	bls.n	8004d10 <_malloc_r+0x68>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	441c      	add	r4, r3
 8004d0c:	6025      	str	r5, [r4, #0]
 8004d0e:	e004      	b.n	8004d1a <_malloc_r+0x72>
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	42a2      	cmp	r2, r4
 8004d14:	bf0c      	ite	eq
 8004d16:	600b      	streq	r3, [r1, #0]
 8004d18:	6053      	strne	r3, [r2, #4]
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f000 f85a 	bl	8004dd4 <__malloc_unlock>
 8004d20:	f104 000b 	add.w	r0, r4, #11
 8004d24:	1d23      	adds	r3, r4, #4
 8004d26:	f020 0007 	bic.w	r0, r0, #7
 8004d2a:	1ac2      	subs	r2, r0, r3
 8004d2c:	d0cc      	beq.n	8004cc8 <_malloc_r+0x20>
 8004d2e:	1a1b      	subs	r3, r3, r0
 8004d30:	50a3      	str	r3, [r4, r2]
 8004d32:	e7c9      	b.n	8004cc8 <_malloc_r+0x20>
 8004d34:	4622      	mov	r2, r4
 8004d36:	6864      	ldr	r4, [r4, #4]
 8004d38:	e7cc      	b.n	8004cd4 <_malloc_r+0x2c>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d0e3      	beq.n	8004d0c <_malloc_r+0x64>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 f82e 	bl	8004da8 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d1dd      	bne.n	8004d0c <_malloc_r+0x64>
 8004d50:	e7cf      	b.n	8004cf2 <_malloc_r+0x4a>
 8004d52:	bf00      	nop
 8004d54:	20000190 	.word	0x20000190
 8004d58:	20000194 	.word	0x20000194

08004d5c <_realloc_r>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	4607      	mov	r7, r0
 8004d60:	4614      	mov	r4, r2
 8004d62:	460e      	mov	r6, r1
 8004d64:	b921      	cbnz	r1, 8004d70 <_realloc_r+0x14>
 8004d66:	4611      	mov	r1, r2
 8004d68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d6c:	f7ff bf9c 	b.w	8004ca8 <_malloc_r>
 8004d70:	b922      	cbnz	r2, 8004d7c <_realloc_r+0x20>
 8004d72:	f7ff ff4d 	bl	8004c10 <_free_r>
 8004d76:	4625      	mov	r5, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7c:	f000 f830 	bl	8004de0 <_malloc_usable_size_r>
 8004d80:	42a0      	cmp	r0, r4
 8004d82:	d20f      	bcs.n	8004da4 <_realloc_r+0x48>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4638      	mov	r0, r7
 8004d88:	f7ff ff8e 	bl	8004ca8 <_malloc_r>
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d0f2      	beq.n	8004d78 <_realloc_r+0x1c>
 8004d92:	4631      	mov	r1, r6
 8004d94:	4622      	mov	r2, r4
 8004d96:	f7ff ff13 	bl	8004bc0 <memcpy>
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f7ff ff37 	bl	8004c10 <_free_r>
 8004da2:	e7e9      	b.n	8004d78 <_realloc_r+0x1c>
 8004da4:	4635      	mov	r5, r6
 8004da6:	e7e7      	b.n	8004d78 <_realloc_r+0x1c>

08004da8 <_sbrk_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	2300      	movs	r3, #0
 8004dac:	4d05      	ldr	r5, [pc, #20]	; (8004dc4 <_sbrk_r+0x1c>)
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fc fc08 	bl	80015c8 <_sbrk>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_sbrk_r+0x1a>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_sbrk_r+0x1a>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	2000031c 	.word	0x2000031c

08004dc8 <__malloc_lock>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <__malloc_lock+0x8>)
 8004dca:	f000 b811 	b.w	8004df0 <__retarget_lock_acquire_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000324 	.word	0x20000324

08004dd4 <__malloc_unlock>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__malloc_unlock+0x8>)
 8004dd6:	f000 b80c 	b.w	8004df2 <__retarget_lock_release_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000324 	.word	0x20000324

08004de0 <_malloc_usable_size_r>:
 8004de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de4:	1f18      	subs	r0, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfbc      	itt	lt
 8004dea:	580b      	ldrlt	r3, [r1, r0]
 8004dec:	18c0      	addlt	r0, r0, r3
 8004dee:	4770      	bx	lr

08004df0 <__retarget_lock_acquire_recursive>:
 8004df0:	4770      	bx	lr

08004df2 <__retarget_lock_release_recursive>:
 8004df2:	4770      	bx	lr

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
