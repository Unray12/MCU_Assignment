
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b4c  08002b4c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b4c  08002b4c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b4c  08002b4c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000008c  08002be0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002be0  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f1c  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba5  00000000  00000000  00029fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001710a  00000000  00000000  0002cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be8f  00000000  00000000  000440c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846d9  00000000  00000000  0004ff51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d462a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d4680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b10 	.word	0x08002b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002b10 	.word	0x08002b10

0800014c <isButtonPressed>:

int keyReg3[MAX_BUTTON] = {NORMAL_STATE};
int timerForKeyPress[MAX_BUTTON] = {200};
int button_flag[MAX_BUTTON] = {0};

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000a8 	.word	0x200000a8

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000a8 	.word	0x200000a8

080001a0 <getKeyInput>:


void getKeyInput(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	keyReg0[index] = keyReg1[index];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[index] = keyReg2[index];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	keyReg2[index] = HAL_GPIO_ReadPin(button_pin[index].GPIOtype, button_pin[index].buttonPin);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80001d0:	4930      	ldr	r1, [pc, #192]	; (8000294 <getKeyInput+0xf4>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	00db      	lsls	r3, r3, #3
 80001d6:	440b      	add	r3, r1
 80001d8:	889b      	ldrh	r3, [r3, #4]
 80001da:	4619      	mov	r1, r3
 80001dc:	4610      	mov	r0, r2
 80001de:	f001 f8f9 	bl	80013d4 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4619      	mov	r1, r3
 80001e6:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//keyReg2[index] = HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
	if ((keyReg0[index] == keyReg1[index]) && (keyReg1[index] == keyReg2[index])) {
 80001ee:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d13e      	bne.n	8000280 <getKeyInput+0xe0>
 8000202:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d134      	bne.n	8000280 <getKeyInput+0xe0>
		if (keyReg3[index] != keyReg2[index]) {
 8000216:	4a20      	ldr	r2, [pc, #128]	; (8000298 <getKeyInput+0xf8>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d016      	beq.n	8000258 <getKeyInput+0xb8>
			keyReg3[index] = keyReg2[index];
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4919      	ldr	r1, [pc, #100]	; (8000298 <getKeyInput+0xf8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (keyReg2[index] == PRESSED_STATE) {
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d11c      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(index);
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f7ff ff9a 	bl	8000180 <subKeyProcess>
				timerForKeyPress[index] = 200;
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <getKeyInput+0xfc>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	21c8      	movs	r1, #200	; 0xc8
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (timerForKeyPress[index] == 0) {
				keyReg3[index] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			timerForKeyPress[index]--;
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490e      	ldr	r1, [pc, #56]	; (800029c <getKeyInput+0xfc>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timerForKeyPress[index] == 0) {
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <getKeyInput+0xfc>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d104      	bne.n	8000280 <getKeyInput+0xe0>
				keyReg3[index] = NORMAL_STATE;
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <getKeyInput+0xf8>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000030 	.word	0x20000030
 800028c:	20000020 	.word	0x20000020
 8000290:	20000040 	.word	0x20000040
 8000294:	20000000 	.word	0x20000000
 8000298:	20000050 	.word	0x20000050
 800029c:	20000060 	.word	0x20000060

080002a0 <redGreenLed>:
int	greenTime = 0;

int led13 = 0; //initial time for that state
int led24 = 0;

void redGreenLed() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	onRed1();
 80002a4:	f000 fb90 	bl	80009c8 <onRed1>
	onGreen2();
 80002a8:	f000 fbd6 	bl	8000a58 <onGreen2>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <redAmberLed>:

void redAmberLed() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	onRed1();
 80002b4:	f000 fb88 	bl	80009c8 <onRed1>
	onAmber2();
 80002b8:	f000 fbae 	bl	8000a18 <onAmber2>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <greenRedLed>:

void greenRedLed() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	onGreen1();
 80002c4:	f000 fb94 	bl	80009f0 <onGreen1>
	onRed2();
 80002c8:	f000 fbb6 	bl	8000a38 <onRed2>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <amberRedLed>:

void amberRedLed() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	onAmber1();
 80002d4:	f000 fb64 	bl	80009a0 <onAmber1>
	onRed2();
 80002d8:	f000 fbae 	bl	8000a38 <onRed2>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <countDown>:

void countDown() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (timerFlag[1] == 1) { //for 7 seg leds buffer
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <countDown+0x4c>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d11d      	bne.n	8000328 <countDown+0x48>
		currentLed13--;
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <countDown+0x50>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <countDown+0x50>)
 80002f4:	6013      	str	r3, [r2, #0]
		currentLed24--;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <countDown+0x54>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <countDown+0x54>)
 80002fe:	6013      	str	r3, [r2, #0]
		if (currentLed13 < 0)
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <countDown+0x50>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	da03      	bge.n	8000310 <countDown+0x30>
			currentLed13 = led13;
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <countDown+0x58>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a08      	ldr	r2, [pc, #32]	; (8000330 <countDown+0x50>)
 800030e:	6013      	str	r3, [r2, #0]
		if (currentLed24 < 0)
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <countDown+0x54>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	da03      	bge.n	8000320 <countDown+0x40>
			currentLed24 = led24;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <countDown+0x5c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <countDown+0x54>)
 800031e:	6013      	str	r3, [r2, #0]
		//updateLedBuffer();
		setTimer(1, 100);
 8000320:	2164      	movs	r1, #100	; 0x64
 8000322:	2001      	movs	r0, #1
 8000324:	f000 fc00 	bl	8000b28 <setTimer>
	}
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000fc 	.word	0x200000fc
 8000330:	200000dc 	.word	0x200000dc
 8000334:	200000e0 	.word	0x200000e0
 8000338:	200000c0 	.word	0x200000c0
 800033c:	200000c4 	.word	0x200000c4

08000340 <fsm_automatic_run>:
void fsm_automatic_run() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	amberTime = realAmberTime * 100;
 8000344:	4b7d      	ldr	r3, [pc, #500]	; (800053c <fsm_automatic_run+0x1fc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2264      	movs	r2, #100	; 0x64
 800034a:	fb02 f303 	mul.w	r3, r2, r3
 800034e:	4a7c      	ldr	r2, [pc, #496]	; (8000540 <fsm_automatic_run+0x200>)
 8000350:	6013      	str	r3, [r2, #0]
	greenTime = realGreenTime * 100;
 8000352:	4b7c      	ldr	r3, [pc, #496]	; (8000544 <fsm_automatic_run+0x204>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2264      	movs	r2, #100	; 0x64
 8000358:	fb02 f303 	mul.w	r3, r2, r3
 800035c:	4a7a      	ldr	r2, [pc, #488]	; (8000548 <fsm_automatic_run+0x208>)
 800035e:	6013      	str	r3, [r2, #0]
	switch (status) {
 8000360:	4b7a      	ldr	r3, [pc, #488]	; (800054c <fsm_automatic_run+0x20c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	2b04      	cmp	r3, #4
 8000368:	f200 80e5 	bhi.w	8000536 <fsm_automatic_run+0x1f6>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <fsm_automatic_run+0x34>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000389 	.word	0x08000389
 8000378:	080003b9 	.word	0x080003b9
 800037c:	0800042f 	.word	0x0800042f
 8000380:	08000487 	.word	0x08000487
 8000384:	080004df 	.word	0x080004df
	case INIT:
		clearTrafficLight();
 8000388:	f000 faec 	bl	8000964 <clearTrafficLight>
		status = AUTO_RED_GREEN;
 800038c:	4b6f      	ldr	r3, [pc, #444]	; (800054c <fsm_automatic_run+0x20c>)
 800038e:	2202      	movs	r2, #2
 8000390:	601a      	str	r2, [r3, #0]
		setTimer(0, greenTime);
 8000392:	4b6d      	ldr	r3, [pc, #436]	; (8000548 <fsm_automatic_run+0x208>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	b29b      	uxth	r3, r3
 8000398:	4619      	mov	r1, r3
 800039a:	2000      	movs	r0, #0
 800039c:	f000 fbc4 	bl	8000b28 <setTimer>

		led13 = realAmberTime + realGreenTime;
 80003a0:	4b66      	ldr	r3, [pc, #408]	; (800053c <fsm_automatic_run+0x1fc>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b67      	ldr	r3, [pc, #412]	; (8000544 <fsm_automatic_run+0x204>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4413      	add	r3, r2
 80003aa:	4a69      	ldr	r2, [pc, #420]	; (8000550 <fsm_automatic_run+0x210>)
 80003ac:	6013      	str	r3, [r2, #0]
		led24 = realGreenTime;
 80003ae:	4b65      	ldr	r3, [pc, #404]	; (8000544 <fsm_automatic_run+0x204>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a68      	ldr	r2, [pc, #416]	; (8000554 <fsm_automatic_run+0x214>)
 80003b4:	6013      	str	r3, [r2, #0]
		break;
 80003b6:	e0bf      	b.n	8000538 <fsm_automatic_run+0x1f8>
	case AUTO_RED_GREEN:
		redGreenLed();
 80003b8:	f7ff ff72 	bl	80002a0 <redGreenLed>
		if (isButtonPressed(0) == 1) {
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff fec5 	bl	800014c <isButtonPressed>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d107      	bne.n	80003d8 <fsm_automatic_run+0x98>
			status = MANUAL_RED_GREEN;
 80003c8:	4b60      	ldr	r3, [pc, #384]	; (800054c <fsm_automatic_run+0x20c>)
 80003ca:	221a      	movs	r2, #26
 80003cc:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 80003ce:	f000 fac9 	bl	8000964 <clearTrafficLight>
			currentLed24 = 2; //mode
 80003d2:	4b61      	ldr	r3, [pc, #388]	; (8000558 <fsm_automatic_run+0x218>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
			//updateLedBuffer();
//			setTimer(2, 10); //update leds
		}
		button_flag[3]=0;
 80003d8:	4b60      	ldr	r3, [pc, #384]	; (800055c <fsm_automatic_run+0x21c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
		if (isButtonPressed(3)) { // pedestrian nho' check cac state khac khi bam nut
 80003de:	2003      	movs	r0, #3
 80003e0:	f7ff feb4 	bl	800014c <isButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d005      	beq.n	80003f6 <fsm_automatic_run+0xb6>
			buzzer_flag=1;
 80003ea:	4b5d      	ldr	r3, [pc, #372]	; (8000560 <fsm_automatic_run+0x220>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
			status_pedestrian=PEDESTRIAN;
 80003f0:	4b5c      	ldr	r3, [pc, #368]	; (8000564 <fsm_automatic_run+0x224>)
 80003f2:	220a      	movs	r2, #10
 80003f4:	601a      	str	r2, [r3, #0]
		}
		if (timerFlag[0] == 1){
 80003f6:	4b5c      	ldr	r3, [pc, #368]	; (8000568 <fsm_automatic_run+0x228>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d114      	bne.n	8000428 <fsm_automatic_run+0xe8>
			status = AUTO_RED_AMBER;
 80003fe:	4b53      	ldr	r3, [pc, #332]	; (800054c <fsm_automatic_run+0x20c>)
 8000400:	2203      	movs	r2, #3
 8000402:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime + realGreenTime;
 8000404:	4b4d      	ldr	r3, [pc, #308]	; (800053c <fsm_automatic_run+0x1fc>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b4e      	ldr	r3, [pc, #312]	; (8000544 <fsm_automatic_run+0x204>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4413      	add	r3, r2
 800040e:	4a50      	ldr	r2, [pc, #320]	; (8000550 <fsm_automatic_run+0x210>)
 8000410:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime;
 8000412:	4b4a      	ldr	r3, [pc, #296]	; (800053c <fsm_automatic_run+0x1fc>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a4f      	ldr	r2, [pc, #316]	; (8000554 <fsm_automatic_run+0x214>)
 8000418:	6013      	str	r3, [r2, #0]

			setTimer(0, amberTime);
 800041a:	4b49      	ldr	r3, [pc, #292]	; (8000540 <fsm_automatic_run+0x200>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	b29b      	uxth	r3, r3
 8000420:	4619      	mov	r1, r3
 8000422:	2000      	movs	r0, #0
 8000424:	f000 fb80 	bl	8000b28 <setTimer>
		}
		countDown();
 8000428:	f7ff ff5a 	bl	80002e0 <countDown>
		break;
 800042c:	e084      	b.n	8000538 <fsm_automatic_run+0x1f8>
	case AUTO_RED_AMBER:
		redAmberLed();
 800042e:	f7ff ff3f 	bl	80002b0 <redAmberLed>

		if (isButtonPressed(0) == 1) {
 8000432:	2000      	movs	r0, #0
 8000434:	f7ff fe8a 	bl	800014c <isButtonPressed>
 8000438:	4603      	mov	r3, r0
 800043a:	2b01      	cmp	r3, #1
 800043c:	d104      	bne.n	8000448 <fsm_automatic_run+0x108>
			status = MANUAL_RED_AMBER;
 800043e:	4b43      	ldr	r3, [pc, #268]	; (800054c <fsm_automatic_run+0x20c>)
 8000440:	221b      	movs	r2, #27
 8000442:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 8000444:	f000 fa8e 	bl	8000964 <clearTrafficLight>
			//currentLed24 = 2; //mode
			//updateLedBuffer();
//			setTimer(2, 10); //update leds
		}

		if (timerFlag[0] == 1) {
 8000448:	4b47      	ldr	r3, [pc, #284]	; (8000568 <fsm_automatic_run+0x228>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d114      	bne.n	800047a <fsm_automatic_run+0x13a>
			status = AUTO_GREEN_RED;
 8000450:	4b3e      	ldr	r3, [pc, #248]	; (800054c <fsm_automatic_run+0x20c>)
 8000452:	2204      	movs	r2, #4
 8000454:	601a      	str	r2, [r3, #0]

			led13 = realGreenTime;
 8000456:	4b3b      	ldr	r3, [pc, #236]	; (8000544 <fsm_automatic_run+0x204>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <fsm_automatic_run+0x210>)
 800045c:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime + realGreenTime;
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <fsm_automatic_run+0x1fc>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b38      	ldr	r3, [pc, #224]	; (8000544 <fsm_automatic_run+0x204>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4413      	add	r3, r2
 8000468:	4a3a      	ldr	r2, [pc, #232]	; (8000554 <fsm_automatic_run+0x214>)
 800046a:	6013      	str	r3, [r2, #0]

			setTimer(0, greenTime);
 800046c:	4b36      	ldr	r3, [pc, #216]	; (8000548 <fsm_automatic_run+0x208>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	b29b      	uxth	r3, r3
 8000472:	4619      	mov	r1, r3
 8000474:	2000      	movs	r0, #0
 8000476:	f000 fb57 	bl	8000b28 <setTimer>
		}
		countDown();
 800047a:	f7ff ff31 	bl	80002e0 <countDown>
		isButtonPressed(0);
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff fe64 	bl	800014c <isButtonPressed>
		break;
 8000484:	e058      	b.n	8000538 <fsm_automatic_run+0x1f8>
	case AUTO_GREEN_RED:
		greenRedLed();
 8000486:	f7ff ff1b 	bl	80002c0 <greenRedLed>

		if (isButtonPressed(0) == 1) {
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff fe5e 	bl	800014c <isButtonPressed>
 8000490:	4603      	mov	r3, r0
 8000492:	2b01      	cmp	r3, #1
 8000494:	d104      	bne.n	80004a0 <fsm_automatic_run+0x160>
			status = MANUAL_GREEN_RED;
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <fsm_automatic_run+0x20c>)
 8000498:	221c      	movs	r2, #28
 800049a:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 800049c:	f000 fa62 	bl	8000964 <clearTrafficLight>
			//currentLed24 = 2; //mode
			//updateLedBuffer();
//			setTimer(2, 10); //update leds
		}

		if (timerFlag[0] == 1) {
 80004a0:	4b31      	ldr	r3, [pc, #196]	; (8000568 <fsm_automatic_run+0x228>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d114      	bne.n	80004d2 <fsm_automatic_run+0x192>
			status = AUTO_AMBER_RED;
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <fsm_automatic_run+0x20c>)
 80004aa:	2205      	movs	r2, #5
 80004ac:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime;
 80004ae:	4b23      	ldr	r3, [pc, #140]	; (800053c <fsm_automatic_run+0x1fc>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a27      	ldr	r2, [pc, #156]	; (8000550 <fsm_automatic_run+0x210>)
 80004b4:	6013      	str	r3, [r2, #0]
			led24 = realAmberTime + realGreenTime;
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <fsm_automatic_run+0x1fc>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <fsm_automatic_run+0x204>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	4a24      	ldr	r2, [pc, #144]	; (8000554 <fsm_automatic_run+0x214>)
 80004c2:	6013      	str	r3, [r2, #0]

			setTimer(0, amberTime);
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <fsm_automatic_run+0x200>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fb2b 	bl	8000b28 <setTimer>
		}
		countDown();
 80004d2:	f7ff ff05 	bl	80002e0 <countDown>
		isButtonPressed(0);
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff fe38 	bl	800014c <isButtonPressed>
		break;
 80004dc:	e02c      	b.n	8000538 <fsm_automatic_run+0x1f8>
	case AUTO_AMBER_RED:
		amberRedLed();
 80004de:	f7ff fef7 	bl	80002d0 <amberRedLed>

		if (isButtonPressed(0) == 1) {
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe32 	bl	800014c <isButtonPressed>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d104      	bne.n	80004f8 <fsm_automatic_run+0x1b8>
			status = MANUAL_AMBER_RED;
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <fsm_automatic_run+0x20c>)
 80004f0:	221d      	movs	r2, #29
 80004f2:	601a      	str	r2, [r3, #0]
			clearTrafficLight();
 80004f4:	f000 fa36 	bl	8000964 <clearTrafficLight>
			//currentLed24 = 2; //mode
			//updateLedBuffer();
//			setTimer(2, 10); //update leds
		}

		if (timerFlag[0] == 1) {
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <fsm_automatic_run+0x228>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d114      	bne.n	800052a <fsm_automatic_run+0x1ea>
			status = AUTO_RED_GREEN;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <fsm_automatic_run+0x20c>)
 8000502:	2202      	movs	r2, #2
 8000504:	601a      	str	r2, [r3, #0]

			led13 = realAmberTime + realGreenTime;
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <fsm_automatic_run+0x1fc>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <fsm_automatic_run+0x204>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <fsm_automatic_run+0x210>)
 8000512:	6013      	str	r3, [r2, #0]
			led24 = realGreenTime;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <fsm_automatic_run+0x204>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <fsm_automatic_run+0x214>)
 800051a:	6013      	str	r3, [r2, #0]

			setTimer(0, greenTime);
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <fsm_automatic_run+0x208>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b29b      	uxth	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	2000      	movs	r0, #0
 8000526:	f000 faff 	bl	8000b28 <setTimer>
		}
		countDown();
 800052a:	f7ff fed9 	bl	80002e0 <countDown>
		isButtonPressed(0);
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff fe0c 	bl	800014c <isButtonPressed>
		break;
 8000534:	e000      	b.n	8000538 <fsm_automatic_run+0x1f8>
	default:
		break;
 8000536:	bf00      	nop
	}
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000078 	.word	0x20000078
 8000540:	200000b8 	.word	0x200000b8
 8000544:	2000007c 	.word	0x2000007c
 8000548:	200000bc 	.word	0x200000bc
 800054c:	20000070 	.word	0x20000070
 8000550:	200000c0 	.word	0x200000c0
 8000554:	200000c4 	.word	0x200000c4
 8000558:	200000e0 	.word	0x200000e0
 800055c:	200000a8 	.word	0x200000a8
 8000560:	200000c8 	.word	0x200000c8
 8000564:	20000074 	.word	0x20000074
 8000568:	200000fc 	.word	0x200000fc

0800056c <fsm_pedestrian>:
 *      Author: Vostro
 */

#include "global.h"
#include "software_timer.h"
void fsm_pedestrian() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
//		buzzer_off();
//		status_pedestrian=PEDESTRIAN_GREEN;
//		setTimer(5, realGreenTime);
//		timerFlag[3]=0;
//	}
	switch(status_pedestrian) {
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <fsm_pedestrian+0x74>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d009      	beq.n	800058c <fsm_pedestrian+0x20>
 8000578:	2b0d      	cmp	r3, #13
 800057a:	dc29      	bgt.n	80005d0 <fsm_pedestrian+0x64>
 800057c:	2b0a      	cmp	r3, #10
 800057e:	d002      	beq.n	8000586 <fsm_pedestrian+0x1a>
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d017      	beq.n	80005b4 <fsm_pedestrian+0x48>
 8000584:	e024      	b.n	80005d0 <fsm_pedestrian+0x64>
	case PEDESTRIAN:
//		HAL_GPIO_TogglePin(D2_GPIO_Port,D2_Pin);
		buzzer_on();
 8000586:	f000 fab3 	bl	8000af0 <buzzer_on>
		break;
 800058a:	e027      	b.n	80005dc <fsm_pedestrian+0x70>
	case PEDESTRIAN_GREEN:
		onGreenPedes();
 800058c:	f000 fa88 	bl	8000aa0 <onGreenPedes>
		if (timerFlag[5]==1) {
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <fsm_pedestrian+0x78>)
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d11e      	bne.n	80005d6 <fsm_pedestrian+0x6a>
			setTimer(5, realAmberTime);
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <fsm_pedestrian+0x7c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	b29b      	uxth	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fac1 	bl	8000b28 <setTimer>
			status_pedestrian=PEDESTRIAN_AMBER;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <fsm_pedestrian+0x74>)
 80005a8:	220c      	movs	r2, #12
 80005aa:	601a      	str	r2, [r3, #0]
			timerFlag[5]=0;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <fsm_pedestrian+0x78>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	715a      	strb	r2, [r3, #5]
		}
		break;
 80005b2:	e010      	b.n	80005d6 <fsm_pedestrian+0x6a>
	case PEDESTRIAN_AMBER:
		onAmberPedes();
 80005b4:	f000 fa88 	bl	8000ac8 <onAmberPedes>
		if (timerFlag[5]==1) {
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <fsm_pedestrian+0x78>)
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10c      	bne.n	80005da <fsm_pedestrian+0x6e>
			status_pedestrian=1000;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <fsm_pedestrian+0x74>)
 80005c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c6:	601a      	str	r2, [r3, #0]
			timerFlag[5]=0;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <fsm_pedestrian+0x78>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
		}
		break;
 80005ce:	e004      	b.n	80005da <fsm_pedestrian+0x6e>
	default:
		onRedPedes();
 80005d0:	f000 fa52 	bl	8000a78 <onRedPedes>
		break;
 80005d4:	e002      	b.n	80005dc <fsm_pedestrian+0x70>
		break;
 80005d6:	bf00      	nop
 80005d8:	e000      	b.n	80005dc <fsm_pedestrian+0x70>
		break;
 80005da:	bf00      	nop
	}
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000074 	.word	0x20000074
 80005e4:	200000fc 	.word	0x200000fc
 80005e8:	20000078 	.word	0x20000078

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fbfc 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f824 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f92a 	bl	8000850 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005fc:	f000 f862 	bl	80006c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000600:	f000 f8b0 	bl	8000764 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2);
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <main+0x44>)
 8000606:	f001 fb41 	bl	8001c8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <main+0x48>)
 800060e:	f001 fbe7 	bl	8001de0 <HAL_TIM_PWM_Start>
  status_pedestrian=PEDESTRIAN;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <main+0x4c>)
 8000614:	220a      	movs	r2, #10
 8000616:	601a      	str	r2, [r3, #0]
  buzzer_flag=1;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x50>)
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
  setTimer(6, 200/4);
 800061e:	2132      	movs	r1, #50	; 0x32
 8000620:	2006      	movs	r0, #6
 8000622:	f000 fa81 	bl	8000b28 <setTimer>
    while (1)
    {
    fsm_automatic_run();
 8000626:	f7ff fe8b 	bl	8000340 <fsm_automatic_run>
    fsm_pedestrian();
 800062a:	f7ff ff9f 	bl	800056c <fsm_pedestrian>
    {
 800062e:	e7fa      	b.n	8000626 <main+0x3a>
 8000630:	20000150 	.word	0x20000150
 8000634:	20000108 	.word	0x20000108
 8000638:	20000074 	.word	0x20000074
 800063c:	200000c8 	.word	0x200000c8

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fa56 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000672:	2300      	movs	r3, #0
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000676:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fed7 	bl	8001434 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800068c:	f000 f964 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800069c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f942 	bl	8001934 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006b6:	f000 f94f 	bl	8000958 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3740      	adds	r7, #64	; 0x40
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_TIM2_Init+0x9c>)
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_TIM2_Init+0x9c>)
 80006ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80006ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_TIM2_Init+0x9c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM2_Init+0x9c>)
 80006f8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80006fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_TIM2_Init+0x9c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_TIM2_Init+0x9c>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070a:	4815      	ldr	r0, [pc, #84]	; (8000760 <MX_TIM2_Init+0x9c>)
 800070c:	f001 fa6e 	bl	8001bec <HAL_TIM_Base_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000716:	f000 f91f 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4619      	mov	r1, r3
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_TIM2_Init+0x9c>)
 8000728:	f001 fdc6 	bl	80022b8 <HAL_TIM_ConfigClockSource>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000732:	f000 f911 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <MX_TIM2_Init+0x9c>)
 8000744:	f002 f948 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800074e:	f000 f903 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <MX_TIM2_Init+0x9c>)
 8000754:	f001 fa9a 	bl	8001c8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000150 	.word	0x20000150

08000764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_TIM3_Init+0xe4>)
 8000796:	4a2d      	ldr	r2, [pc, #180]	; (800084c <MX_TIM3_Init+0xe8>)
 8000798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_TIM3_Init+0xe4>)
 800079c:	223f      	movs	r2, #63	; 0x3f
 800079e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ba:	4823      	ldr	r0, [pc, #140]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007bc:	f001 fa16 	bl	8001bec <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007c6:	f000 f8c7 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007d8:	f001 fd6e 	bl	80022b8 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007e2:	f000 f8b9 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_TIM3_Init+0xe4>)
 80007e8:	f001 faa2 	bl	8001d30 <HAL_TIM_PWM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007f2:	f000 f8b1 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_TIM3_Init+0xe4>)
 8000806:	f002 f8e7 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000810:	f000 f8a2 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM3_Init+0xe4>)
 800082c:	f001 fc82 	bl	8002134 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000836:	f000 f88f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM3_Init+0xe4>)
 800083c:	f000 fa3c 	bl	8000cb8 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	; 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000108 	.word	0x20000108
 800084c:	40000400 	.word	0x40000400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <MX_GPIO_Init+0xd0>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_GPIO_Init+0xd0>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a27      	ldr	r2, [pc, #156]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <MX_GPIO_Init+0xd0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800089a:	4822      	ldr	r0, [pc, #136]	; (8000924 <MX_GPIO_Init+0xd4>)
 800089c:	f000 fdb1 	bl	8001402 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80008a6:	4820      	ldr	r0, [pc, #128]	; (8000928 <MX_GPIO_Init+0xd8>)
 80008a8:	f000 fdab 	bl	8001402 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80008ac:	2313      	movs	r3, #19
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_GPIO_Init+0xd8>)
 80008c0:	f000 fc04 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008d8:	f000 fbf8 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80008dc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80008e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2302      	movs	r3, #2
 80008ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008f6:	f000 fbe9 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80008fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_GPIO_Init+0xd8>)
 8000914:	f000 fbda 	bl	80010cc <HAL_GPIO_Init>

}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	40010c00 	.word	0x40010c00
 8000928:	40010800 	.word	0x40010800

0800092c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	timer_run();
 8000934:	f000 f93a 	bl	8000bac <timer_run>
	getKeyInput(0);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fc31 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff fc2e 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000944:	2002      	movs	r0, #2
 8000946:	f7ff fc2b 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 800094a:	2003      	movs	r0, #3
 800094c:	f7ff fc28 	bl	80001a0 <getKeyInput>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <clearTrafficLight>:
//  		  	HAL_GPIO_WritePin(SegF_GPIO_Port, SegF_Pin, RESET);
//  		  	HAL_GPIO_WritePin(SegG_GPIO_Port, SegG_Pin, RESET);
//  	  }
//    }
//
  void clearTrafficLight() {
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
//  	HAL_GPIO_WritePin(GPIOA, Yellow1_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Green2_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Red2_Pin, SET);
//  	HAL_GPIO_WritePin(GPIOA, Yellow2_Pin, SET);

  	led_buffer[0] = 0;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <clearTrafficLight+0x30>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  	led_buffer[1] = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <clearTrafficLight+0x30>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  	led_buffer[2] = 0;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <clearTrafficLight+0x30>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  	led_buffer[3] = 0;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <clearTrafficLight+0x30>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]

  	currentLed13 = 0;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <clearTrafficLight+0x34>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
  	currentLed24 = 0;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <clearTrafficLight+0x38>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
//  	clear7SEG();
  }
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200000cc 	.word	0x200000cc
 8000998:	200000dc 	.word	0x200000dc
 800099c:	200000e0 	.word	0x200000e0

080009a0 <onAmber1>:

  void onAmber1() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <onAmber1+0x20>)
 80009ac:	f000 fd29 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2108      	movs	r1, #8
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <onAmber1+0x24>)
 80009b6:	f000 fd24 	bl	8001402 <HAL_GPIO_WritePin>
  }
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <onRed1>:

  void onRed1() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <onRed1+0x20>)
 80009d4:	f000 fd15 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2108      	movs	r1, #8
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <onRed1+0x24>)
 80009de:	f000 fd10 	bl	8001402 <HAL_GPIO_WritePin>
  }
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010800 	.word	0x40010800
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <onGreen1>:

  void onGreen1() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <onGreen1+0x20>)
 80009fc:	f000 fd01 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <onGreen1+0x24>)
 8000a06:	f000 fcfc 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <onAmber2>:

  void onAmber2() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <onAmber2+0x1c>)
 8000a22:	f000 fcee 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2110      	movs	r1, #16
 8000a2a:	4802      	ldr	r0, [pc, #8]	; (8000a34 <onAmber2+0x1c>)
 8000a2c:	f000 fce9 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <onRed2>:

  void onRed2() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2120      	movs	r1, #32
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <onRed2+0x1c>)
 8000a42:	f000 fcde 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <onRed2+0x1c>)
 8000a4c:	f000 fcd9 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <onGreen2>:

  void onGreen2() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2120      	movs	r1, #32
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <onGreen2+0x1c>)
 8000a62:	f000 fcce 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4802      	ldr	r0, [pc, #8]	; (8000a74 <onGreen2+0x1c>)
 8000a6c:	f000 fcc9 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <onRedPedes>:

  void onRedPedes() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <onRedPedes+0x20>)
 8000a84:	f000 fcbd 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <onRedPedes+0x24>)
 8000a90:	f000 fcb7 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40010800 	.word	0x40010800

08000aa0 <onGreenPedes>:
  void onGreenPedes() {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <onGreenPedes+0x20>)
 8000aac:	f000 fca9 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <onGreenPedes+0x24>)
 8000ab8:	f000 fca3 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <onAmberPedes>:
  void onAmberPedes() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <onAmberPedes+0x20>)
 8000ad4:	f000 fc95 	bl	8001402 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <onAmberPedes+0x24>)
 8000ae0:	f000 fc8f 	bl	8001402 <HAL_GPIO_WritePin>
  }
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <buzzer_on>:

  int time_buzzer;
  TIM_HandleTypeDef htim3;
  int duty=0;

  void buzzer_on() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
//			  time_buzzer=led24-currentLed24;
//		  }
//		  buzzer_flag=0;
//		  duty=0;
//	  }
	  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,duty);
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <buzzer_on+0x2c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <buzzer_on+0x30>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
	  if (timerFlag[6]==1) {
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <buzzer_on+0x34>)
 8000b00:	799b      	ldrb	r3, [r3, #6]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d108      	bne.n	8000b18 <buzzer_on+0x28>
		  duty+=25;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <buzzer_on+0x2c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3319      	adds	r3, #25
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <buzzer_on+0x2c>)
 8000b0e:	6013      	str	r3, [r2, #0]
		  setTimer(6, 200/4);
 8000b10:	2132      	movs	r1, #50	; 0x32
 8000b12:	2006      	movs	r0, #6
 8000b14:	f000 f808 	bl	8000b28 <setTimer>
	  }
  }
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000e4 	.word	0x200000e4
 8000b20:	20000108 	.word	0x20000108
 8000b24:	200000fc 	.word	0x200000fc

08000b28 <setTimer>:
#include "software_timer.h"

uint16_t timerCounter[MAX_TIMER] = {0};
uint8_t timerFlag[MAX_TIMER] = {0};

void setTimer(uint8_t index, uint16_t duration) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	80bb      	strh	r3, [r7, #4]
	timerCounter[index] = duration;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4906      	ldr	r1, [pc, #24]	; (8000b54 <setTimer+0x2c>)
 8000b3c:	88ba      	ldrh	r2, [r7, #4]
 8000b3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timerFlag[index] = 0;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <setTimer+0x30>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	54d1      	strb	r1, [r2, r3]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	200000e8 	.word	0x200000e8
 8000b58:	200000fc 	.word	0x200000fc

08000b5c <timerRun>:

void timerRun(uint8_t index){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if(timerCounter[index] > 0){
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <timerRun+0x48>)
 8000b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d012      	beq.n	8000b98 <timerRun+0x3c>
		timerCounter[index]--;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <timerRun+0x48>)
 8000b76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b7a:	3a01      	subs	r2, #1
 8000b7c:	b291      	uxth	r1, r2
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <timerRun+0x48>)
 8000b80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (timerCounter[index] <= 0){
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <timerRun+0x48>)
 8000b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d103      	bne.n	8000b98 <timerRun+0x3c>
			timerFlag[index] = 1;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <timerRun+0x4c>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	200000fc 	.word	0x200000fc

08000bac <timer_run>:

void timer_run() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	timerRun(0);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff ffd3 	bl	8000b5c <timerRun>
	timerRun(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff ffd0 	bl	8000b5c <timerRun>
	timerRun(2);
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff ffcd 	bl	8000b5c <timerRun>
	timerRun(3);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f7ff ffca 	bl	8000b5c <timerRun>
	timerRun(6);
 8000bc8:	2006      	movs	r0, #6
 8000bca:	f7ff ffc7 	bl	8000b5c <timerRun>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_MspInit+0x60>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_MspInit+0x60>)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c48:	d114      	bne.n	8000c74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_TIM_Base_MspInit+0x78>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <HAL_TIM_Base_MspInit+0x78>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_TIM_Base_MspInit+0x78>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201c      	movs	r0, #28
 8000c68:	f000 f9f9 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c6c:	201c      	movs	r0, #28
 8000c6e:	f000 fa12 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c72:	e018      	b.n	8000ca6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_TIM_Base_MspInit+0x7c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d113      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_TIM_Base_MspInit+0x78>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_TIM_Base_MspInit+0x78>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0x78>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	201d      	movs	r0, #29
 8000c9c:	f000 f9df 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ca0:	201d      	movs	r0, #29
 8000ca2:	f000 f9f8 	bl	8001096 <HAL_NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_TIM_MspPostInit+0x58>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d117      	bne.n	8000d08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_TIM_MspPostInit+0x5c>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_TIM_MspPostInit+0x5c>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_TIM_MspPostInit+0x5c>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_TIM_MspPostInit+0x60>)
 8000d04:	f000 f9e2 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40000400 	.word	0x40000400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d62:	f000 f889 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <TIM2_IRQHandler+0x10>)
 8000d72:	f001 f8d7 	bl	8001f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000150 	.word	0x20000150

08000d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <TIM3_IRQHandler+0x10>)
 8000d86:	f001 f8cd 	bl	8001f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000108 	.word	0x20000108

08000d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff fff8 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000da6:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dbc:	4c09      	ldr	r4, [pc, #36]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f001 fe75 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dce:	f7ff fc0d 	bl	80005ec <main>
  bx lr
 8000dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000ddc:	08002b54 	.word	0x08002b54
  ldr r2, =_sbss
 8000de0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000de4:	2000019c 	.word	0x2000019c

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f923 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fee4 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f93b 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f903 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000080 	.word	0x20000080
 8000e70:	20000088 	.word	0x20000088
 8000e74:	20000084 	.word	0x20000084

08000e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_IncTick+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_IncTick+0x20>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000088 	.word	0x20000088
 8000e98:	20000198 	.word	0x20000198

08000e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000198 	.word	0x20000198

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <__NVIC_EnableIRQ+0x34>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff90 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff2d 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff42 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff90 	bl	8000fa0 <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5f 	bl	8000f4c <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff35 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b08b      	sub	sp, #44	; 0x2c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e169      	b.n	80013b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e0:	2201      	movs	r2, #1
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8158 	bne.w	80013ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a9a      	ldr	r2, [pc, #616]	; (800136c <HAL_GPIO_Init+0x2a0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d05e      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001108:	4a98      	ldr	r2, [pc, #608]	; (800136c <HAL_GPIO_Init+0x2a0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d875      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 800110e:	4a98      	ldr	r2, [pc, #608]	; (8001370 <HAL_GPIO_Init+0x2a4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d058      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001114:	4a96      	ldr	r2, [pc, #600]	; (8001370 <HAL_GPIO_Init+0x2a4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d86f      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 800111a:	4a96      	ldr	r2, [pc, #600]	; (8001374 <HAL_GPIO_Init+0x2a8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d052      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001120:	4a94      	ldr	r2, [pc, #592]	; (8001374 <HAL_GPIO_Init+0x2a8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d869      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 8001126:	4a94      	ldr	r2, [pc, #592]	; (8001378 <HAL_GPIO_Init+0x2ac>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d04c      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 800112c:	4a92      	ldr	r2, [pc, #584]	; (8001378 <HAL_GPIO_Init+0x2ac>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d863      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 8001132:	4a92      	ldr	r2, [pc, #584]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d046      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001138:	4a90      	ldr	r2, [pc, #576]	; (800137c <HAL_GPIO_Init+0x2b0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d85d      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 800113e:	2b12      	cmp	r3, #18
 8001140:	d82a      	bhi.n	8001198 <HAL_GPIO_Init+0xcc>
 8001142:	2b12      	cmp	r3, #18
 8001144:	d859      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <HAL_GPIO_Init+0x80>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	080011c7 	.word	0x080011c7
 8001150:	080011a1 	.word	0x080011a1
 8001154:	080011b3 	.word	0x080011b3
 8001158:	080011f5 	.word	0x080011f5
 800115c:	080011fb 	.word	0x080011fb
 8001160:	080011fb 	.word	0x080011fb
 8001164:	080011fb 	.word	0x080011fb
 8001168:	080011fb 	.word	0x080011fb
 800116c:	080011fb 	.word	0x080011fb
 8001170:	080011fb 	.word	0x080011fb
 8001174:	080011fb 	.word	0x080011fb
 8001178:	080011fb 	.word	0x080011fb
 800117c:	080011fb 	.word	0x080011fb
 8001180:	080011fb 	.word	0x080011fb
 8001184:	080011fb 	.word	0x080011fb
 8001188:	080011fb 	.word	0x080011fb
 800118c:	080011fb 	.word	0x080011fb
 8001190:	080011a9 	.word	0x080011a9
 8001194:	080011bd 	.word	0x080011bd
 8001198:	4a79      	ldr	r2, [pc, #484]	; (8001380 <HAL_GPIO_Init+0x2b4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800119e:	e02c      	b.n	80011fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e029      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	3304      	adds	r3, #4
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e024      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	3308      	adds	r3, #8
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e01f      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	330c      	adds	r3, #12
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e01a      	b.n	80011fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ce:	2304      	movs	r3, #4
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e013      	b.n	80011fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011dc:	2308      	movs	r3, #8
 80011de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	611a      	str	r2, [r3, #16]
          break;
 80011e6:	e009      	b.n	80011fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	615a      	str	r2, [r3, #20]
          break;
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
          break;
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x130>
          break;
 80011fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d801      	bhi.n	8001206 <HAL_GPIO_Init+0x13a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	e001      	b.n	800120a <HAL_GPIO_Init+0x13e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2bff      	cmp	r3, #255	; 0xff
 8001210:	d802      	bhi.n	8001218 <HAL_GPIO_Init+0x14c>
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x152>
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	3b08      	subs	r3, #8
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	210f      	movs	r1, #15
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	6a39      	ldr	r1, [r7, #32]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	431a      	orrs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80b1 	beq.w	80013ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800124c:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x2b8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x2b8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2bc>)
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_GPIO_Init+0x2c0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d013      	beq.n	80012b8 <HAL_GPIO_Init+0x1ec>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <HAL_GPIO_Init+0x2c4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_Init+0x1e8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <HAL_GPIO_Init+0x2c8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x1e4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a3d      	ldr	r2, [pc, #244]	; (8001398 <HAL_GPIO_Init+0x2cc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_Init+0x1e0>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e006      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012ac:	2304      	movs	r3, #4
 80012ae:	e004      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012b8:	2300      	movs	r3, #0
 80012ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012bc:	f002 0203 	and.w	r2, r2, #3
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	4093      	lsls	r3, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ca:	492f      	ldr	r1, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x2bc>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	492c      	ldr	r1, [pc, #176]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4928      	ldr	r1, [pc, #160]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	4922      	ldr	r1, [pc, #136]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	491e      	ldr	r1, [pc, #120]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4918      	ldr	r1, [pc, #96]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	4914      	ldr	r1, [pc, #80]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800134c:	4013      	ands	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d021      	beq.n	80013a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	490e      	ldr	r1, [pc, #56]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e021      	b.n	80013ae <HAL_GPIO_Init+0x2e2>
 800136a:	bf00      	nop
 800136c:	10320000 	.word	0x10320000
 8001370:	10310000 	.word	0x10310000
 8001374:	10220000 	.word	0x10220000
 8001378:	10210000 	.word	0x10210000
 800137c:	10120000 	.word	0x10120000
 8001380:	10110000 	.word	0x10110000
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40011000 	.word	0x40011000
 8001398:	40011400 	.word	0x40011400
 800139c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_GPIO_Init+0x304>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4909      	ldr	r1, [pc, #36]	; (80013d0 <HAL_GPIO_Init+0x304>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f47f ae8e 	bne.w	80010e0 <HAL_GPIO_Init+0x14>
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	372c      	adds	r7, #44	; 0x2c
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]
 800140e:	4613      	mov	r3, r2
 8001410:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001412:	787b      	ldrb	r3, [r7, #1]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001418:	887a      	ldrh	r2, [r7, #2]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800141e:	e003      	b.n	8001428 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	041a      	lsls	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	611a      	str	r2, [r3, #16]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e26c      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8087 	beq.w	8001562 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b04      	cmp	r3, #4
 800145e:	d00c      	beq.n	800147a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d112      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 800146c:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <HAL_RCC_OscConfig+0x12c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d168      	bne.n	8001560 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e246      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x76>
 800149c:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7f      	ldr	r2, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e02e      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0xbc>
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014f0:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a67      	ldr	r2, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fcc4 	bl	8000e9c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fcc0 	bl	8000e9c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1fa      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xe4>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fcb0 	bl	8000e9c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fcac 	bl	8000e9c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1e6      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x10c>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d063      	beq.n	8001636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1ba      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4939      	ldr	r1, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e03a      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc65 	bl	8000e9c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc61 	bl	8000e9c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e19b      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4927      	ldr	r1, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc44 	bl	8000e9c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fc40 	bl	8000e9c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e17a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d03a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fc24 	bl	8000e9c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fc20 	bl	8000e9c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e15a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 fa9a 	bl	8001bb0 <RCC_Delay>
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fc0a 	bl	8000e9c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fc06 	bl	8000e9c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d908      	bls.n	80016ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e140      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	42420000 	.word	0x42420000
 80016a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b9e      	ldr	r3, [pc, #632]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e9      	bne.n	800168c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a6 	beq.w	8001812 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b97      	ldr	r3, [pc, #604]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b94      	ldr	r3, [pc, #592]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a93      	ldr	r2, [pc, #588]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fbc7 	bl	8000e9c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fbc3 	bl	8000e9c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0fd      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x312>
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a7a      	ldr	r2, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x334>
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a72      	ldr	r2, [pc, #456]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x356>
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb77 	bl	8000e9c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fb73 	bl	8000e9c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0ab      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x37e>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb61 	bl	8000e9c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb5d 	bl	8000e9c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e095      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8081 	beq.w	800191e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d061      	beq.n	80018ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d146      	bne.n	80018be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb31 	bl	8000e9c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb2d 	bl	8000e9c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e067      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	492d      	ldr	r1, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a19      	ldr	r1, [r3, #32]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	430b      	orrs	r3, r1
 800188a:	4927      	ldr	r1, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fb01 	bl	8000e9c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fafd 	bl	8000e9c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e037      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x46a>
 80018bc:	e02f      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff faea 	bl	8000e9c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fae6 	bl	8000e9c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e020      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	42420060 	.word	0x42420060

08001934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d0      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4965      	ldr	r1, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800199a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e073      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06b      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4936      	ldr	r1, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff fa3a 	bl	8000e9c <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff fa36 	bl	8000e9c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e053      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d210      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	490a      	ldr	r1, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	5ccb      	ldrb	r3, [r1, r3]
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1cc>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f998 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08002b28 	.word	0x08002b28
 8001b00:	20000080 	.word	0x20000080
 8001b04:	20000084 	.word	0x20000084

08001b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x30>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x36>
 8001b36:	e027      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3a:	613b      	str	r3, [r7, #16]
      break;
 8001b3c:	e027      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d010      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	0c5b      	lsrs	r3, r3, #17
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6a:	fb02 f203 	mul.w	r2, r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e004      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	613b      	str	r3, [r7, #16]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b8a:	613b      	str	r3, [r7, #16]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	693b      	ldr	r3, [r7, #16]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	007a1200 	.word	0x007a1200
 8001ba4:	08002b38 	.word	0x08002b38
 8001ba8:	08002b48 	.word	0x08002b48
 8001bac:	003d0900 	.word	0x003d0900

08001bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <RCC_Delay+0x34>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <RCC_Delay+0x38>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0a5b      	lsrs	r3, r3, #9
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bcc:	bf00      	nop
  }
  while (Delay --);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	60fa      	str	r2, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <RCC_Delay+0x1c>
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000080 	.word	0x20000080
 8001be8:	10624dd3 	.word	0x10624dd3

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e041      	b.n	8001c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff f810 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 fc30 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d001      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e03a      	b.n	8001d1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_TIM_Base_Start_IT+0x98>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x58>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cce:	d009      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x58>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <HAL_TIM_Base_Start_IT+0x9c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x58>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_TIM_Base_Start_IT+0xa0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d111      	bne.n	8001d08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d010      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d06:	e007      	b.n	8001d18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800

08001d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e041      	b.n	8001dc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f839 	bl	8001dce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 fb8e 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_TIM_PWM_Start+0x24>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e022      	b.n	8001e4a <HAL_TIM_PWM_Start+0x6a>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d109      	bne.n	8001e1e <HAL_TIM_PWM_Start+0x3e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e015      	b.n	8001e4a <HAL_TIM_PWM_Start+0x6a>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d109      	bne.n	8001e38 <HAL_TIM_PWM_Start+0x58>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e008      	b.n	8001e4a <HAL_TIM_PWM_Start+0x6a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e05e      	b.n	8001f10 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_PWM_Start+0x82>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e60:	e013      	b.n	8001e8a <HAL_TIM_PWM_Start+0xaa>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_PWM_Start+0x92>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e70:	e00b      	b.n	8001e8a <HAL_TIM_PWM_Start+0xaa>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d104      	bne.n	8001e82 <HAL_TIM_PWM_Start+0xa2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e80:	e003      	b.n	8001e8a <HAL_TIM_PWM_Start+0xaa>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd7c 	bl	8002990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_TIM_PWM_Start+0x138>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_TIM_PWM_Start+0x138>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00e      	beq.n	8001eda <HAL_TIM_PWM_Start+0xfa>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d009      	beq.n	8001eda <HAL_TIM_PWM_Start+0xfa>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_TIM_PWM_Start+0x13c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d004      	beq.n	8001eda <HAL_TIM_PWM_Start+0xfa>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_TIM_PWM_Start+0x140>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d010      	beq.n	8001f0e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800

08001f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0202 	mvn.w	r2, #2
 8001f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa76 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fa69 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fa78 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0204 	mvn.w	r2, #4
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa4c 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa3f 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fa4e 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0208 	mvn.w	r2, #8
 8001ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fa22 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fa15 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fa24 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b10      	cmp	r3, #16
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b10      	cmp	r3, #16
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0210 	mvn.w	r2, #16
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2208      	movs	r2, #8
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f9f8 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f9eb 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f9fa 	bl	800246a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0201 	mvn.w	r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fc42 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fce9 	bl	8002aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f9be 	bl	800247c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b20      	cmp	r3, #32
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0220 	mvn.w	r2, #32
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fcb4 	bl	8002a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800214e:	2302      	movs	r3, #2
 8002150:	e0ae      	b.n	80022b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	f200 809f 	bhi.w	80022a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	0800219d 	.word	0x0800219d
 800216c:	080022a1 	.word	0x080022a1
 8002170:	080022a1 	.word	0x080022a1
 8002174:	080022a1 	.word	0x080022a1
 8002178:	080021dd 	.word	0x080021dd
 800217c:	080022a1 	.word	0x080022a1
 8002180:	080022a1 	.word	0x080022a1
 8002184:	080022a1 	.word	0x080022a1
 8002188:	0800221f 	.word	0x0800221f
 800218c:	080022a1 	.word	0x080022a1
 8002190:	080022a1 	.word	0x080022a1
 8002194:	080022a1 	.word	0x080022a1
 8002198:	0800225f 	.word	0x0800225f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f9d6 	bl	8002554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0204 	bic.w	r2, r2, #4
 80021c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	619a      	str	r2, [r3, #24]
      break;
 80021da:	e064      	b.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fa1c 	bl	8002620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6999      	ldr	r1, [r3, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	021a      	lsls	r2, r3, #8
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	619a      	str	r2, [r3, #24]
      break;
 800221c:	e043      	b.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fa65 	bl	80026f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0208 	orr.w	r2, r2, #8
 8002238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0204 	bic.w	r2, r2, #4
 8002248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
      break;
 800225c:	e023      	b.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 faaf 	bl	80027c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	021a      	lsls	r2, r3, #8
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	61da      	str	r2, [r3, #28]
      break;
 800229e:	e002      	b.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	75fb      	strb	r3, [r7, #23]
      break;
 80022a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_TIM_ConfigClockSource+0x1c>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0b4      	b.n	800243e <HAL_TIM_ConfigClockSource+0x186>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230c:	d03e      	beq.n	800238c <HAL_TIM_ConfigClockSource+0xd4>
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	f200 8087 	bhi.w	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	f000 8086 	beq.w	800242a <HAL_TIM_ConfigClockSource+0x172>
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	d87f      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d01a      	beq.n	800235e <HAL_TIM_ConfigClockSource+0xa6>
 8002328:	2b70      	cmp	r3, #112	; 0x70
 800232a:	d87b      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d050      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d877      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b50      	cmp	r3, #80	; 0x50
 8002336:	d03c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002338:	2b50      	cmp	r3, #80	; 0x50
 800233a:	d873      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d058      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d86f      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d064      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x15a>
 8002348:	2b30      	cmp	r3, #48	; 0x30
 800234a:	d86b      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 800234c:	2b20      	cmp	r3, #32
 800234e:	d060      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x15a>
 8002350:	2b20      	cmp	r3, #32
 8002352:	d867      	bhi.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d05c      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x15a>
 8002358:	2b10      	cmp	r3, #16
 800235a:	d05a      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x15a>
 800235c:	e062      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f000 faf0 	bl	8002952 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	609a      	str	r2, [r3, #8]
      break;
 800238a:	e04f      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f000 fad9 	bl	8002952 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ae:	609a      	str	r2, [r3, #8]
      break;
 80023b0:	e03c      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 fa50 	bl	8002864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2150      	movs	r1, #80	; 0x50
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 faa7 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80023d0:	e02c      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 fa6e 	bl	80028c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2160      	movs	r1, #96	; 0x60
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fa97 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80023f0:	e01c      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	f000 fa30 	bl	8002864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2140      	movs	r1, #64	; 0x40
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa87 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 8002410:	e00c      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 fa7e 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 8002422:	e003      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e000      	b.n	800242c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800242a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
	...

08002490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a29      	ldr	r2, [pc, #164]	; (8002548 <TIM_Base_SetConfig+0xb8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00b      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ae:	d007      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a26      	ldr	r2, [pc, #152]	; (800254c <TIM_Base_SetConfig+0xbc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0x30>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a25      	ldr	r2, [pc, #148]	; (8002550 <TIM_Base_SetConfig+0xc0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <TIM_Base_SetConfig+0xb8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <TIM_Base_SetConfig+0xbc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a18      	ldr	r2, [pc, #96]	; (8002550 <TIM_Base_SetConfig+0xc0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <TIM_Base_SetConfig+0xb8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d103      	bne.n	8002538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	615a      	str	r2, [r3, #20]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800

08002554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 0201 	bic.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0308 	bic.w	r3, r3, #8
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00

08002620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 0210 	bic.w	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0320 	bic.w	r3, r3, #32
 800266a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <TIM_OC2_SetConfig+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10d      	bne.n	800269c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <TIM_OC2_SetConfig+0xd0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d113      	bne.n	80026cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <TIM_OC3_SetConfig+0xd0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10d      	bne.n	800276e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <TIM_OC3_SetConfig+0xd0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	621a      	str	r2, [r3, #32]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00

080027c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <TIM_OC4_SetConfig+0x98>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d109      	bne.n	800283c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00

08002864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 030a 	bic.w	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0210 	bic.w	r2, r3, #16
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	f043 0307 	orr.w	r3, r3, #7
 8002940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2201      	movs	r2, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1a      	ldr	r2, [r3, #32]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e046      	b.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10c      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800

08002a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	2600      	movs	r6, #0
 8002abc:	4d0c      	ldr	r5, [pc, #48]	; (8002af0 <__libc_init_array+0x38>)
 8002abe:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002ac0:	1b64      	subs	r4, r4, r5
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	42a6      	cmp	r6, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	f000 f822 	bl	8002b10 <_init>
 8002acc:	2600      	movs	r6, #0
 8002ace:	4d0a      	ldr	r5, [pc, #40]	; (8002af8 <__libc_init_array+0x40>)
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	; (8002afc <__libc_init_array+0x44>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	42a6      	cmp	r6, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae0:	4798      	blx	r3
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aea:	4798      	blx	r3
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08002b4c 	.word	0x08002b4c
 8002af4:	08002b4c 	.word	0x08002b4c
 8002af8:	08002b4c 	.word	0x08002b4c
 8002afc:	08002b50 	.word	0x08002b50

08002b00 <memset>:
 8002b00:	4603      	mov	r3, r0
 8002b02:	4402      	add	r2, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
